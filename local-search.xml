<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>List学习</title>
    <link href="/2021/02/18/java/List%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/02/18/java/List%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="ArrayList-and-LinkedList"><a href="#ArrayList-and-LinkedList" class="headerlink" title="ArrayList and LinkedList"></a>ArrayList and LinkedList</h2><h2 id="联系与区别"><a href="#联系与区别" class="headerlink" title="联系与区别"></a>联系与区别</h2><p><strong>线程安全：</strong>都是线程不安全</p><p><strong>底层实现:</strong> arraylist 是数组，linkedlist是双向链表</p><p><strong>复杂度问题：</strong>对于插入来说，若ArrayList直接add 添加到最后一个，则复杂度为<em>O</em>(1),若指定位置插入和删除元素则复杂度为<em>O(n-i)</em>，而LinkedList采用链表，插入和删除的复杂度接近<em>O(1)</em>。</p><p><strong>是否支持快速随机访问：</strong> <code>LinkedList</code> 不支持高效的随机元素访问，而 <code>ArrayList</code> 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</p><p><strong>内存空间占用：</strong> ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。</p><h2 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>ArrayList有三种方式来初始化，构造方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 默认初始容量大小<br> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_CAPACITY = <span class="hljs-number">10</span>;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">/**<br> *默认构造函数，使用初始容量10构造一个空列表(无参数构造)<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 带初始容量参数的构造函数。（用户自己指定容量）<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//初始容量大于0</span><br>        <span class="hljs-comment">//创建initialCapacity大小的数组</span><br>        <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//初始容量等于0</span><br>        <span class="hljs-comment">//创建空数组</span><br>        <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//初始容量小于0，抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal Capacity: "</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**<br> *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回<br> *如果指定的集合为null，throws NullPointerException。 <br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    elementData = c.toArray();<br>    <span class="hljs-keyword">if</span> ((size = elementData.length) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br>        <span class="hljs-keyword">if</span> (elementData.getClass() != Object[]<span class="hljs-class">.<span class="hljs-keyword">class</span>)<br>            <span class="hljs-title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// replace with empty array.</span><br>        <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以无参数构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。</p><h3 id="add-方法"><a href="#add-方法" class="headerlink" title="add()方法"></a><strong>add()</strong>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 将指定的元素追加到此列表的末尾。 <br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-comment">//添加元素之前，先调用ensureCapacityInternal方法</span><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    <span class="hljs-comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用的<code>ensureCapacityInternal()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//得到最小扩容量</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-comment">// 获取默认的容量和传入参数的较大值</span><br>        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br><br>    ensureExplicitCapacity(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一定会调用的ensureExplicitCapacity方法"><a href="#一定会调用的ensureExplicitCapacity方法" class="headerlink" title="一定会调用的ensureExplicitCapacity方法"></a>一定会调用的<code>ensureExplicitCapacity</code>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断是否需要扩容</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    modCount++;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span><br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>过程分析</p><ul><li>当我们要 add 进第1个元素到 ArrayList 时，elementData.length 为0 （因为还是一个空的 list），因为执行了 <code>ensureCapacityInternal()</code> 方法 ，所以 minCapacity 此时为10。此时，<code>minCapacity - elementData.length &gt; 0</code>成立，所以会进入 <code>grow(minCapacity)</code> 方法。</li><li>当add第2个元素时，minCapacity 为2，此时e lementData.length(容量)在添加第一个元素后扩容成 10 了。此时，<code>minCapacity - elementData.length &gt; 0</code>不成立，所以不会进入 （执行）<code>grow(minCapacity)</code> 方法。</li><li>添加第3、4···到第10个元素时，依然不会执行grow方法，数组容量都为10。</li></ul><h3 id="grow-方法"><a href="#grow-方法" class="headerlink" title="grow()方法"></a><code>grow()</code>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 要分配的最大数组大小<br> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">/**<br>* ArrayList扩容的核心方法。<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// oldCapacity为旧容量，newCapacity为新容量</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span><br>    <span class="hljs-comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span><br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span><br>    <span class="hljs-comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<span class="hljs-comment">//复制数组</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍！（JDK1.6版本以后）</strong>1.6之前是1.5倍+1，右移为除以2的操作</p><p><code>hugeCapacity()</code> 方法：如果minCapacity大于最大容量，则新容量则为<code>Integer.MAX_VALUE</code>，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 <code>Integer.MAX_VALUE - 8</code></p><p>ArrayList在使用过程中大量使用了<code>System.arraycopy()</code> 和 <code>Arrays.copyOf()</code>两个方法</p><p>如在指定位置添加元素的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 在此列表中的指定位置插入指定的元素。 <br> *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；<br> *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>    rangeCheckForAdd(index);<br>    <span class="hljs-comment">//边界检查</span><br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    <span class="hljs-comment">//arraycopy()方法实现数组自己复制自己</span><br>    <span class="hljs-comment">//elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；</span><br>    System.arraycopy(elementData, index, elementData, index + <span class="hljs-number">1</span>, size - index);<br>    <span class="hljs-comment">//先复制再添加元素</span><br>    elementData[index] = element;<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有toArray()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。 <br>     */</span><br><span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>    <span class="hljs-comment">//elementData：要复制的数组；size：要复制的长度</span><br>    <span class="hljs-keyword">return</span> Arrays.copyOf(elementData, size);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="联系与区别："><a href="#联系与区别：" class="headerlink" title="联系与区别："></a>联系与区别：</h3><p>看两者源代码可以发现 copyOf() 内部实际调用了 <code>System.arraycopy()</code> 方法</p><p><code>arraycopy()</code> 需要目标数组，将原数组拷贝到你自己定义的数组里或者原数组，而且可以选择拷贝的起点和长度以及放入新数组中的位置 <code>copyOf()</code> 是系统自动在内部新建一个数组，并返回该数组。</p><p><code>ensureCapacity</code>方法：可以确保数组容纳指定数量的元素，<strong>最好在 add 大量元素之前用 ensureCapacity 方法，以减少增量重新分配的次数</strong></p><h2 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h2><h3 id="内部类-Node结构"><a href="#内部类-Node结构" class="headerlink" title="内部类 Node结构"></a>内部类 Node结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    E item;<span class="hljs-comment">//节点值</span><br>    Node&lt;E&gt; next;<span class="hljs-comment">//后继节点</span><br>    Node&lt;E&gt; prev;<span class="hljs-comment">//前驱节点</span><br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-keyword">this</span>.item = element;<br>        <span class="hljs-keyword">this</span>.next = next;<br>        <span class="hljs-keyword">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//空构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><span class="hljs-comment">//用已有集合创建链表的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>();<br>    addAll(c);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    linkLast(e);<span class="hljs-comment">//这里就只调用了这一个方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-comment">/**<br> * 链接使e作为最后一个元素。<br> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>    last = newNode;<span class="hljs-comment">//新建节点</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<span class="hljs-comment">//指向后继元素也就是指向下一个元素</span><br>    size++;<br>    modCount++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>    checkPositionIndex(index); <span class="hljs-comment">//检查索引是否处于[0-size]之间</span><br><br>    <span class="hljs-keyword">if</span> (index == size)<span class="hljs-comment">//添加在链表尾部</span><br>        linkLast(element);<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">//添加在链表中间</span><br>        linkBefore(element, node(index));<br>&#125;<br><span class="hljs-comment">//addAll(Collection c )：将集合插入到链表尾部</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> addAll(size, c);<br>    &#125;<br><span class="hljs-comment">//addAll(int index, Collection c)： 将集合从指定位置开始插入</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-comment">//1:检查index范围是否在size之内</span><br>    checkPositionIndex(index);<br><br>    <span class="hljs-comment">//2:toArray()方法把集合的数据存到对象数组中</span><br>    Object[] a = c.toArray();<br>    <span class="hljs-keyword">int</span> numNew = a.length;<br>    <span class="hljs-keyword">if</span> (numNew == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">//3：得到插入位置的前驱节点和后继节点</span><br>    Node&lt;E&gt; pred, succ;<br>    <span class="hljs-comment">//如果插入位置为尾部，前驱节点为last，后继节点为null</span><br>    <span class="hljs-keyword">if</span> (index == size) &#123;<br>        succ = <span class="hljs-keyword">null</span>;<br>        pred = last;<br>    &#125;<br>    <span class="hljs-comment">//否则，调用node()方法得到后继节点，再得到前驱节点</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        succ = node(index);<br>        pred = succ.prev;<br>    &#125;<br><br>    <span class="hljs-comment">// 4：遍历数据将数据插入</span><br>    <span class="hljs-keyword">for</span> (Object o : a) &#123;<br>        <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>) E e = (E) o;<br>        <span class="hljs-comment">//创建新节点</span><br>        Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(pred, e, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//如果插入位置在链表头部</span><br>        <span class="hljs-keyword">if</span> (pred == <span class="hljs-keyword">null</span>)<br>            first = newNode;<br>        <span class="hljs-keyword">else</span><br>            pred.next = newNode;<br>        pred = newNode;<br>    &#125;<br><br>    <span class="hljs-comment">//如果插入位置在尾部，重置last节点</span><br>    <span class="hljs-keyword">if</span> (succ == <span class="hljs-keyword">null</span>) &#123;<br>        last = pred;<br>    &#125;<br>    <span class="hljs-comment">//否则，将插入的链表与先前链表连接起来</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        pred.next = succ;<br>        succ.prev = pred;<br>    &#125;<br><br>    size += numNew;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="addAll方法步骤："><a href="#addAll方法步骤：" class="headerlink" title="addAll方法步骤："></a>addAll方法步骤：</h3><ol><li>检查index范围是否在size之内</li><li>toArray()方法把集合的数据存到对象数组中</li><li>得到插入位置的前驱和后继节点</li><li>遍历数据，将数据插入到指定位置</li></ol><h3 id="addFirst-E-e"><a href="#addFirst-E-e" class="headerlink" title="addFirst(E e)"></a>addFirst(E e)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFirst</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    linkFirst(e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">linkFirst</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(<span class="hljs-keyword">null</span>, e, f);<span class="hljs-comment">//新建节点，以头节点为后继节点</span><br>    first = newNode;<br>    <span class="hljs-comment">//如果链表为空，last节点也指向该节点</span><br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-keyword">null</span>)<br>        last = newNode;<br>    <span class="hljs-comment">//否则，将头节点的前驱指针指向新节点，也就是指向前一个元素</span><br>    <span class="hljs-keyword">else</span><br>        f.prev = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br><span class="hljs-comment">//添加元素到最后</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        linkLast(e);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-comment">//检查index范围是否在size之内</span><br>    checkElementIndex(index);<br>    <span class="hljs-comment">//调用Node(index)去找到index对应的node然后返回它的值</span><br>    <span class="hljs-keyword">return</span> node(index).item;<br>&#125;<br><span class="hljs-comment">//根据对象得到索引的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//从头遍历</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-keyword">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> index;<br>            index++;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//从头遍历</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-keyword">null</span>; x = x.next) &#123;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item))<br>                <span class="hljs-keyword">return</span> index;<br>            index++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lastIndexOf</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> index = size;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//从尾遍历</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="hljs-keyword">null</span>; x = x.prev) &#123;<br>            index--;<br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> index;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//从尾遍历</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="hljs-keyword">null</span>; x = x.prev) &#123;<br>            index--;<br>            <span class="hljs-keyword">if</span> (o.equals(x.item))<br>                <span class="hljs-keyword">return</span> index;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//是否包含某个对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> indexOf(o) != -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> removeFirst();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> removeFirst();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">removeFirst</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first;<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>    <span class="hljs-keyword">return</span> unlinkFirst(f);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">removeLast</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>    <span class="hljs-keyword">return</span> unlinkLast(l);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">pollLast</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">return</span> (l == <span class="hljs-keyword">null</span>) ? <span class="hljs-keyword">null</span> : unlinkLast(l);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-comment">//如果删除对象为null</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//从头开始遍历</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-keyword">null</span>; x = x.next) &#123;<br>            <span class="hljs-comment">//找到元素</span><br>            <span class="hljs-keyword">if</span> (x.item == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">//从链表中移除找到的元素</span><br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//从头开始遍历</span><br>        <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-keyword">null</span>; x = x.next) &#123;<br>            <span class="hljs-comment">//找到元素</span><br>            <span class="hljs-keyword">if</span> (o.equals(x.item)) &#123;<br>                <span class="hljs-comment">//从链表中移除找到的元素</span><br>                unlink(x);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-comment">//unlink()方法</span><br><span class="hljs-function">E <span class="hljs-title">unlink</span><span class="hljs-params">(Node&lt;E&gt; x)</span> </span>&#123;<br>    <span class="hljs-comment">// assert x != null;</span><br>    <span class="hljs-keyword">final</span> E element = x.item;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = x.next;<span class="hljs-comment">//得到后继节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="hljs-comment">//得到前驱节点</span><br><br>    <span class="hljs-comment">//删除前驱指针</span><br>    <span class="hljs-keyword">if</span> (prev == <span class="hljs-keyword">null</span>) &#123;<br>        first = next;<span class="hljs-comment">//如果删除的节点是头节点,令头节点指向该节点的后继节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        prev.next = next;<span class="hljs-comment">//将前驱节点的后继节点指向后继节点</span><br>        x.prev = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删除后继指针</span><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-keyword">null</span>) &#123;<br>        last = prev;<span class="hljs-comment">//如果删除的节点是尾节点,令尾节点指向该节点的前驱节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        next.prev = prev;<br>        x.next = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    x.item = <span class="hljs-keyword">null</span>;<br>    size--;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br>remove(<span class="hljs-keyword">int</span> index)：删除指定位置的元素<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-comment">//检查index范围</span><br>        checkElementIndex(index);<br>        <span class="hljs-comment">//将节点删除</span><br>        <span class="hljs-keyword">return</span> unlink(node(index));<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>都是通过创建底层数组的新副本来实现的。当 List 需要被修改的时候，我并不修改原有内容，而是对原有数据进行一次复制，将修改的内容写入副本。写完之后，再将修改完的副本替换原来的数据，这样就可以保证写操作不会影响读操作了。</p><p>对原来的数组对象采用volatile修饰，保证每次读都是最新的</p><p>修改的数组的时候，在添加时加锁，保证同时刻只有一个被copy</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ER图学习</title>
    <link href="/2021/01/12/%E5%85%B6%E4%BB%96/ER%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/12/%E5%85%B6%E4%BB%96/ER%E5%9B%BE%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ER图，全名实体(Entity)关系(relation)关系，主要用于数据库设计的结构图，表示系统内的主要实体及其属性以及实体之间的关系。</p><h2 id="主要组成"><a href="#主要组成" class="headerlink" title="主要组成"></a>主要组成</h2><ol><li>实体，可以理解类</li><li>属性，实体具有的特性，类的字段</li><li>关系，类之间的关系</li></ol><h2 id="主要画法"><a href="#主要画法" class="headerlink" title="主要画法"></a>主要画法</h2><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210218175920.png" srcset="/img/loading.gif" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zookeeper学习笔记</title>
    <link href="/2020/12/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/zookeeper/"/>
    <url>/2020/12/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/zookeeper/</url>
    
    <content type="html"><![CDATA[<p>ZooKeeper是一个开源的分布式服务框架，为分布式应用提供协调服务，用来解决分布式应用中的数据管理问题，如：配置管理、域名服务、分布式同步、集群管理等</p><h2 id="zookeeper应用场景"><a href="#zookeeper应用场景" class="headerlink" title="zookeeper应用场景"></a>zookeeper应用场景</h2><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>在开发过程中需要获取一些配置，如果这些配置发生了改变的话，那么需要每一台的服务都去修改配置，针对这个问题，我们将一些公共的配置放在zookeeper的节点中，然后应用程序连接到zookeeper上，并监听配置的修改，这样就可以实现配置的管理。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><strong>思路</strong></p><ol><li>首先zookeeper中我们可以创建一个/distributed_lock持久化节点</li><li>然后再在/distributed_lock节点下创建自己的临时顺序节点，比如：/distributed_lock/task_00000000008</li><li>获取所有的/distributed_lock下的所有子节点，并排序</li><li>判读自己创建的节点是否最小值（第一位）</li><li>如果是，则获取得到锁，执行自己的业务逻辑，最后删除这个临时节点。</li><li>如果不是最小值，则需要监听自己创建节点前一位节点的数据变化，并阻塞。</li><li>当前一位节点被删除时，我们需要通过递归来判断自己创建的节点是否在是最小的，如果是则执行5）；</li><li>如果不是则执行6）（就是递归循环的判断）</li></ol><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>集群管理的主要内容包括：节点（机器）增删及Master选取。</p><p><strong>节点增删</strong>：所有机器约定在父目录GroupMembers下创建临时目录节点，然后监听父目录节点的子节点变化消息。一旦有机器挂掉，该机器与 zookeeper的连接断开，其所创建的临时目录节点被删除，所有其他机器都收到通知：某个兄弟目录被删除，于是，所有人都知道：它上船了。新机器加入 也是类似，所有机器收到通知：新兄弟目录加入，highcount又有了。</p><p><strong>Master选取</strong>：所有机器创建临时顺序编号目录节点，每次选取编号最小的机器作为master就好。</p><h2 id="zookeeper组成"><a href="#zookeeper组成" class="headerlink" title="zookeeper组成"></a>zookeeper组成</h2><ol><li>文件系统</li><li>通知机制</li></ol><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p> ZooKeeper维护一个类似Linux文件系统的数据结构，用于存储数据</p><ul><li>数据模型结构是一种树形结构，由许多节点构成</li><li>每个节点叫做ZNode（ZooKeeper Node）</li><li>每个节点对应一个唯一路径，通过该路径来标识节点，如 /app1/p_2</li><li>每个节点只能存储大约1M的数据</li></ul><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><ul><li><p>持久化目录节点 persistent</p><p>客户端与服务器断开连接，该节点仍然存在</p></li><li><p>持久化顺序编号目录节点 persistent_sequential</p><p>客户端与服务器断开连接，该节点仍然存在，此时节点会被顺序编号，如：000001、000002…</p></li><li><p>临时目录节点 ephemeral</p><p>客户端与服务器断开连接，该节点会被删除</p></li><li><p>临时顺序编号目录节点 ephemeral_sequential</p><p>客户端与服务器断开连接，该节点会被删除，此时节点会被顺序编号，如：000001、000002…</p></li></ul><h3 id="通知机制"><a href="#通知机制" class="headerlink" title="通知机制"></a>通知机制</h3><p> ZooKeeper是一个基于观察者模式设计的分布式服务管理框架</p><p>ZooKeeper负责管理和维护项目的公共数据，并授受观察者的注册（订阅）一旦这些数据发生化，ZooKeeper就会通知已注册的观察者此时观察者就可以做出相应的反应简单来说，客户端注册监听它关心的目录节点，当目录节点发生变化时，ZooKeeper会通知客户端<br>ZooKeeper是一个订阅中心（注册中心）</p><h3 id="zookeeper集群"><a href="#zookeeper集群" class="headerlink" title="zookeeper集群"></a>zookeeper集群</h3><p><strong>tips:</strong>zookeeper集群，只要有半数以上的机器处于可用状态，那么集群就是可用的。因此一个集群通常是奇数的，因为5台和6台能提供服务的最少机器数都是一样的。</p><h4 id="zk角色："><a href="#zk角色：" class="headerlink" title="zk角色："></a>zk角色：</h4><p>leader：负责投票的发起和决议，系统状态的更新，master？</p><p>leaner：</p><p>​    follower：处理来自client的请求，并参与投票</p><p>​    observer:仅处理客户端的连接和请求，同时不参与投票，为了扩展系统，提高读取的速度和并发的能力。</p><p>client: 客户端，请求发起方。</p><p><strong>集群的数据一致性协议</strong>：ZAB协议（Zookeeper Atomic Broadcast（Zookeeper 原子广播协议））</p><h4 id="选举过程"><a href="#选举过程" class="headerlink" title="选举过程"></a><strong>选举过程</strong></h4><h5 id="服务器初始化启动。"><a href="#服务器初始化启动。" class="headerlink" title="服务器初始化启动。"></a>服务器初始化启动。</h5><p><strong>(1) 每个Server发出一个投票</strong>。由于是初始情况，Server1和Server2都会将自己作为Leader服务器来进行投票，每次投票会包含所推举的服务器的myid和ZXID，使用(myid, ZXID)来表示，此时Server1的投票为(1, 0)，Server2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。</p><p><strong>(2) 接受来自各个服务器的投票</strong>。集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自LOOKING状态的服务器。</p><p><strong>(3) 处理投票</strong>。针对每一个投票，服务器都需要将别人的投票和自己的投票进行PK，PK规则如下</p><p><strong>· 优先检查ZXID</strong>。ZXID比较大的服务器优先作为Leader。</p><p><strong>· 如果ZXID相同，那么就比较myid</strong>。myid较大的服务器作为Leader服务器。</p><p>对于Server1而言，它的投票是(1, 0)，接收Server2的投票为(2, 0)，首先会比较两者的ZXID，均为0，再比较myid，此时Server2的myid最大，于是更新自己的投票为(2, 0)，然后重新投票，对于Server2而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。</p><p><strong>(4) 统计投票</strong>。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于Server1、Server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了Leader。</p><p><strong>(5) 改变服务器状态</strong>。一旦确定了Leader，每个服务器就会更新自己的状态，如果是Follower，那么就变更为FOLLOWING，如果是Leader，就变更为LEADING。</p><h5 id="服务器运行期间无法和Leader保持连接。"><a href="#服务器运行期间无法和Leader保持连接。" class="headerlink" title="服务器运行期间无法和Leader保持连接。"></a>服务器运行期间无法和Leader保持连接。</h5><p>(1) <strong>变更状态</strong>。Leader挂后，余下的非Observer服务器都会讲自己的服务器状态变更为LOOKING，然后开始进入Leader选举过程。</p><p>(2) <strong>每个Server会发出一个投票</strong>。在运行期间，每个服务器上的ZXID可能不同，此时假定Server1的ZXID为123，Server3的ZXID为122；在第一轮投票中，Server1和Server3都会投自己，产生投票(1, 123)，(3, 122)，然后各自将投票发送给集群中所有机器。</p><p>(3) <strong>接收来自各个服务器的投票</strong>。与启动时过程相同。</p><p>(4) <strong>处理投票</strong>。与启动时过程相同，此时，Server1将会成为Leader。</p><p>(5) <strong>统计投票</strong>。与启动时过程相同。</p><p>(6) <strong>改变服务器的状态</strong>。与启动时过程相同。</p><h4 id="数据同步过程"><a href="#数据同步过程" class="headerlink" title="数据同步过程"></a>数据同步过程</h4><p>选完 leader 以后，zk 就进入状态同步过程。<br>1、leader 等待 server 连接；<br>2、follower 连接 leader，将最大的 zxid 发送给 leader；<br>3、leader 根据 follower 的 zxid 确定同步点；<br>4、完成同步后通知 follower 已经成为 uptodate 状态；<br>5、follower 收到 uptodate 消息后，又可以重新接受 client 的请求进行服务了。</p><h4 id="zookeeper-写数据流程"><a href="#zookeeper-写数据流程" class="headerlink" title="zookeeper 写数据流程"></a>zookeeper 写数据流程</h4><p>1.Client向Zookeeper的Server1上写数据，发送一个写请求</p><p>2.如果Server1不是Leader，那么Server1会把接收到的请求进一步转发给Leader,这个Leader会把写请求广播给各个Leader,各个Server写成功后就会通知Leader</p><p>3.当Leader收到大多数Server数据写成功了，那么就说明数据写成功了，比如这里有三个节点，只有两个节点数据写成功了，就认为数据写成功了，写成功以后，Leader会告诉Server数据写成功了</p><p>4.Server1会通知Client数据写成功了，这时就认为整个写操作成功</p><h2 id="zookeeper协议"><a href="#zookeeper协议" class="headerlink" title="zookeeper协议"></a>zookeeper协议</h2><p>待补充。。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>zookeeper 分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些有价值的站点</title>
    <link href="/2020/11/30/%E5%85%B6%E4%BB%96/Userful%20URL/"/>
    <url>/2020/11/30/%E5%85%B6%E4%BB%96/Userful%20URL/</url>
    
    <content type="html"><![CDATA[<p>Sonar wiki <a href="https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java" target="_blank" rel="noopener">https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java</a></p><p>java language specification <a href="https://docs.oracle.com/javase/specs/jls/se8/html/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/index.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hiveSQL</title>
    <link href="/2020/10/03/%E5%A4%A7%E6%95%B0%E6%8D%AE/hivesql/"/>
    <url>/2020/10/03/%E5%A4%A7%E6%95%B0%E6%8D%AE/hivesql/</url>
    
    <content type="html"><![CDATA[<h2 id="hive-SQL"><a href="#hive-SQL" class="headerlink" title="hive SQL"></a>hive SQL</h2><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p><strong>AvroSerDe</strong></p><p><strong>ORC Files</strong></p><p><strong>Parquet</strong></p><p><strong>压缩文件</strong></p><p>在某些情况下，保持在 Hive 表中压缩数据可以提供比未压缩存储更好的 performance;在磁盘使用和查询 performance 方面。</p><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><ol><li>建表语句</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> pokes (foo <span class="hljs-built_in">INT</span>, bar <span class="hljs-keyword">STRING</span>);<br></code></pre></td></tr></table></figure><p>创建名为poke的表，包含两列 整数型foo和字符型的bar</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> invites (foo <span class="hljs-built_in">INT</span>, bar <span class="hljs-keyword">STRING</span>) PARTITIONED <span class="hljs-keyword">BY</span> (ds <span class="hljs-keyword">STRING</span>);<br></code></pre></td></tr></table></figure><p>创建名为invites的表，包含两列 整数型foo和字符型的bar,同时建立一个虚拟的分区字段ds，但是该字段不存放实际的数据内容，仅仅是分区的表示。 Hive 中，表中的一个 Partition 对应于表下的一个目录，所有的 Partition 的数据都存储在最字集的目录中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">EXTERNAL</span>] <br><span class="hljs-keyword">TABLE</span> <br>[<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] table_name <br>[(col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)] <br>[<span class="hljs-keyword">COMMENT</span> table_comment] <br>[PARTITIONED <span class="hljs-keyword">BY</span> (col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)] [CLUSTERED <span class="hljs-keyword">BY</span> (col_name, col_name, ...) <br>[SORTED <span class="hljs-keyword">BY</span> (col_name [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>], ...)] <span class="hljs-keyword">INTO</span> num_buckets BUCKETS] <br>[<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> row_format]<br> [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> file_format] <br>[LOCATION hdfs_path]<br></code></pre></td></tr></table></figure><p>2.修改表结构</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive&gt; ALTER TABLE events RENAME TO 3koobecaf;<br>hive&gt; ALTER TABLE pokes ADD COLUMNS (new_col INT);<br>hive&gt; ALTER TABLE invites ADD COLUMNS (new_col2 INT COMMENT 'a comment');<br>hive&gt; ALTER TABLE invites REPLACE COLUMNS (foo INT, bar STRING, baz INT COMMENT 'baz replaces new_col2');<br></code></pre></td></tr></table></figure><p>可以重命名表，添加列 重命名列或者修改列的数据结构，也可以用来删掉某一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> invites <span class="hljs-keyword">REPLACE</span> <span class="hljs-keyword">COLUMNS</span> (foo <span class="hljs-built_in">INT</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'only keep the first column'</span>);<br></code></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> pokes;<br></code></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li>LOAD</li></ul><p>转载数据到hive表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">LOAD</span> <span class="hljs-keyword">DATA</span> [<span class="hljs-keyword">LOCAL</span>] INPATH <span class="hljs-string">'filepath'</span> [OVERWRITE] <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> tablename [<span class="hljs-keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...)]<br><span class="hljs-keyword">LOAD</span> <span class="hljs-keyword">DATA</span> [<span class="hljs-keyword">LOCAL</span>] INPATH <span class="hljs-string">'filepath'</span> [OVERWRITE] <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> tablename [<span class="hljs-keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...)] [INPUTFORMAT <span class="hljs-string">'inputformat'</span> SERDE <span class="hljs-string">'serde'</span>] (<span class="hljs-string">``</span><span class="hljs-number">3.0</span><span class="hljs-string">` `</span><span class="hljs-keyword">or</span> later)<br></code></pre></td></tr></table></figure><ul><li>INSERT</li><li>UPDATE</li><li>DELETE</li><li>MERGE</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop</title>
    <link href="/2020/10/01/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/"/>
    <url>/2020/10/01/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>hadoop是一个分布式系统的基础架构，广义的hadoop指的是一整个大数据处理的生态系统</p><p>hadoop本体主要包括 分布式文件系统HDFS，分布式计算架构mapreduce，分布式调度系统yarn，和一些工具组件。</p><h3 id="1-hadoop-1-x和2-x的区别："><a href="#1-hadoop-1-x和2-x的区别：" class="headerlink" title="1.hadoop 1.x和2.x的区别："></a>1.hadoop 1.x和2.x的区别：</h3><p>在1.x时代，mapreduce同时处理资源调度和业务逻辑运算，在2.x版本，hadoop加入了yarn负责资源调度，mapreduce只负责计算。</p><h3 id="2-相关组件简介"><a href="#2-相关组件简介" class="headerlink" title="2.相关组件简介"></a>2.相关组件简介</h3><h4 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a><strong>HDFS</strong></h4><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201615.png" srcset="/img/loading.gif" alt=""></p><p>HDFS是一个主从架构，包含一个namenode和多个datanode。</p><p>Namenode是一个中心服务器，负责管理文件系统的名字空间(namespace)以及客户端对文件的访问。集群中的Datanode一般是一个节点一个，负责管理它所在节点上的存储。HDFS暴露了文件系统的名字空间，用户能够以文件的形式在上面存储数据。从内部看，一个文件其实被分成一个或多个数据块，这些块存储在一组Datanode上。Namenode执行文件系统的名字空间操作，比如打开、关闭、重命名文件或目录。它也负责确定数据块到具体Datanode节点的映射。Datanode负责处理文件系统客户端的读写请求。在Namenode的统一调度下进行数据块的创建、删除和复制。</p><p>HDFS将文件存储为大小一致的数据块，文件的所有数据块都会写入副本，储存在不同节点上，数据块大小和副本数都是可以配置的（默认大小：64MB，默认副本数：3）</p><p>Namenode全权管理数据块的复制，它周期性地从集群中的每个Datanode接收心跳信号和块状态报告(Blockreport)。接收到心跳信号意味着该Datanode节点工作正常。块状态报告包含了一个该Datanode上所有数据块的列表。</p><p>不同节点之间的通信，采用RPC调用</p><p>namenode和datanode采用心跳机制确认是否有效，若datanode宕机当值副本数低于设定值，namenode会检测需要进行复制的数据块，启动复制操作。</p><p>在进行复制的时候是流水线复制的，</p><p><em>流水线复制</em></p><p>​        当客户端向HDFS文件写入数据的时候，一开始是写到本地临时文件中。假设该文件的副本系数设置为3，当本地临时文件累积到一个数据块的大小时，客户端会从Namenode获取一个Datanode列表用于存放副本。然后客户端开始向第一个Datanode传输数据，第一个Datanode一小部分一小部分(4 KB)地接收数据，将每一部分写入本地仓库，并同时传输该部分到列表中第二个Datanode节点。第二个Datanode也是这样，一小部分一小部分地接收数据，写入本地仓库，并同时传给第三个Datanode。最后，第三个Datanode接收数据并存储在本地。因此，Datanode能流水线式地从前一个节点接收数据，并在同时转发给下一个节点，数据以流水线的方式从前一个Datanode复制到下一个。</p><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><p>Hadoop MapReduce是一个软件框架，用于轻松编写应用程序，这些应用程序以可靠，容错的方式并行处理大型硬件集群（数千个节点）上的大量数据（多TB数据集）。</p><p>MapReduce作业通常将输入数据集拆分为独立的块，这些任务由地图任务以完全并行的方式进行处理。该框架对地图的输出进行排序，然后将其输入到reduce任务中。通常，作业的输入和输出都存储在文件系统中。该框架负责安排任务，监视任务并重新执行失败的任务。</p><p>通常，计算节点和存储节点是相同的，即MapReduce框架和Hadoop分布式文件系统（请参阅HDFS体系结构指南）在同一组节点上运行。此配置使框架可以在已经存在数据的节点上有效地调度任务，从而在整个群集中产生很高的聚合带宽。</p><p>MapReduce框架由一个master <code>ResourceManager</code>，每个群集节点一个工作器NodeManager和每个应用程序MRAppMaster组成（请参阅YARN体系结构指南）。</p><p>最少地，应用程序通过适当的接口和/或抽象类的实现来指定输入/输出位置和供应图，并减少功能。这些以及其他作业参数构成作业配置。</p><p>然后，Hadoop作业客户端将作业（jar /可执行文件等）和配置提交给ResourceManager，然后由ResourceManager负责将软件/配置分发给工作人员，安排任务并对其进行监视，为工作提供状态和诊断信息，客户。</p><h4 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h4><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201628.gif" srcset="/img/loading.gif" alt=""></p><p>YARN 的组件：</p><ul><li><p>ResourceManager <strong>全局的资源管理器</strong></p></li><li><p>ApplicationMaster <strong>单个应用程序的管理</strong></p></li><li><p>NodeManager <strong>每个节点上的资源和任务管理器</strong></p></li><li><p>Container <strong>每一个节点上的资源的封装</strong></p></li><li><p>一个分布式应用程序代替一个 MapReduce 作业 </p></li></ul><p>在 YARN 架构中，一个全局 ResourceManager 以主要后台进程的形式运行，它通常在专用机器上运行，在各种竞争的应用程序之间仲裁可用的集群资源。ResourceManager 会追踪集群中有多少可用的活动节点和资源，协调用户提交的哪些应用程序应该在何时获取这些资源。ResourceManager 是惟一拥有此信息的进程，所以它可通过某种共享的、安全的、多租户的方式制定分配（或者调度）决策（例如，依据应用程序优先级、队列容量、ACLs、数据位置等）。</p><p>在用户提交一个应用程序时，一个称为 ApplicationMaster 的轻量型进程实例会启动来协调应用程序内的所有任务的执行。这包括监视任务，重新启动失败的任务，推测性地运行缓慢的任务，以及计算应用程序计数器值的总和。这些职责以前分配给所有作业的单个 JobTracker。ApplicationMaster 和属于它的应用程序的任务，在受 NodeManager 控制的资源容器中运行。</p><p>NodeManager 是 TaskTracker 的一种更加普通和高效的版本。没有固定数量的 map 和 reduce slots，NodeManager 拥有许多动态创建的资源容器。容器的大小取决于它所包含的资源量，比如内存、CPU、磁盘和网络 IO。目前，仅支持内存和 CPU (YARN-3)。未来可使用 cgroups 来控制磁盘和网络 IO。一个节点上的容器数量，由配置参数与专用于从属后台进程和操作系统的资源以外的节点资源总量（比如总 CPU 数和总内存）共同决定。</p><p>用户向yarn提交任务后的流程:</p><ol><li>用户向YARN中提交应用程序，其中包括ApplicationMaster程序、启动ApplicationMaster的命令、用户程序等。</li><li>ResourceManager为该应用程序分配第一个Container，并与对应的NodeManager通信，要求它在这个Container中启动应用程序的ApplicationMaster。</li><li>ApplicationMaster首先向ResourceManager注册，这样用户就可以直接通过ResourceManager查看应用程序的运行状态，然后它将为各个任务申请资源，并监控它的运行状态，直到运行结束，即重复步骤4~7。</li><li>ApplicationMaster采用轮询的方式通过RPC协议向ResourceManager申请和领取资源。</li><li>一旦ApplicationMaster申请到资源后，便与对应的NodeManager通信，要求它启动任务。</li><li>NodeManager为任务设置好运行环境（包括环境变量、JAR包、二进制程序等）后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。</li><li>各个任务通过某个RPC协议向ApplicationMaster汇报自己的状态和进度，以让ApplicationMaster随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。</li><li>应用程序运行完成后，ApplicationMaster向ResourceManager注销并关闭自己。</li></ol><h3 id="3-hadoop-三大发行版"><a href="#3-hadoop-三大发行版" class="headerlink" title="3.hadoop 三大发行版"></a>3.hadoop 三大发行版</h3><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><ul><li>社区版，企业实际使用并不多。最原始（基础）版本。这是学习hadoop的基础。</li></ul><h4 id="cloudera"><a href="#cloudera" class="headerlink" title="cloudera"></a>cloudera</h4><ul><li>CDH是Cloudera的Hadoop发行版，完全开源，比Apache Hadoop在兼容性，安全 性，稳定性上有所增强。</li></ul><h4 id="Hortonworks"><a href="#Hortonworks" class="headerlink" title="Hortonworks"></a>Hortonworks</h4><ul><li>Hortonworks 的主打产品是Hortonworks Data Platform (HDP)，也同样是100%开 源的产品，HDP除常见的项目外还包含了Ambari，一款开源的安装和管理系统</li></ul><h3 id="4-hadoop生态"><a href="#4-hadoop生态" class="headerlink" title="4.hadoop生态"></a>4.hadoop生态</h3><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201712.jpg" srcset="/img/loading.gif" alt=""></p><p>主要组件：</p><p>1）HDFS<br>一个提供高可用的获取应用数据的分布式文件系统。<br>2）MapReduce<br>一个并行处理大数据集的编程模型。<br>3）<strong>HBase</strong><br>一个可扩展的分布式数据库，支持大表的结构化数据存储。是一个建立在 HDFS 之上的，面向列的 <a href="https://link.zhihu.com/?target=https%3A//links.jianshu.com/go%3Fto%3Dhttp%3A%2F%2Fc.biancheng.net%2Fnosql%2F">NoSQL</a> 数据库，用于快速读/写大量数据。<br>4）<strong>Hive</strong><br>一个建立在 Hadoop 上的数据仓库基础构架。它提供了一系列的工具；可以用来进行数据提取转化加载（ETL），这是一种可以存储、查询和分析存储在 Hadoop 中的大规模数据的机制。<br>Hive 定义了简单的类 SQL 查询语言，称为 HQL，它允许不熟悉 MapReduce 的开发人员也能编写数据查询语句，然后这些语句被翻译为 Hadoop 上面的 MapReduce 任务。<br>5）Mahout<br>可扩展的机器学习和数据挖掘库。它提供的 MapReduce 包含很多实现方法，包括聚类算法、回归测试、统计建模。<br>6）Pig<br>一个支持并行计算的高级的数据流语言和执行框架。它是 MapReduce 编程的复杂性的抽象。Pig 平台包括运行环境和用于分析 Hadoop 数据集的脚本语言（PigLatin）。其编译器将 PigLatin 翻译成 MapReduce 程序序列。<br>7）Zookeeper<br>—个应用于分布式应用的高性能的协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括配置维护、域名服务、分布式同步、组服务等。<br>8）Ambari<br>一个基于 Web 的工具，用来供应、管理和监测 Hadoop 集群，包括支持 HDFS、MapReduceAHive、HCatalog、HBase、ZooKeeperAOozie、Pig 和 Sqoop 。<br>Ambari 也提供了一个可视的仪表盘来查看集群的健康状态，并且能够使用户可视化地查看 MapReduce、Pig 和 Hive 应用来诊断其性能特征。<br>Hadoop 的生态圈还包括以下几个框架，用来与其他企业融合。<br>1）Sqoop<br>一个连接工具，用于在关系数据库、数据仓库和 Hadoop 之间转移数据。Sqoop 利用数据库技术描述架构，进行数据的导入/导出；利用 MapReduce 实现并行化运行和容错技术。<br>2）Flume<br>提供了分布式、可靠、高效的服务，用于收集、汇总大数据，并将单台计算机的大量数据转移到 HDFS。它基于一个简单而灵活的架构，并提供了数据流的流。它利用简单的可扩展的数据模型，将企业中多台计算机上的数据转移到 Hadoop。</p><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><p>Row key 行键 字典序排序</p><p>Columns Family 列族</p><p>Cell 相当于一行</p><p>TimeStamp </p><p>HDFS 备份机制</p><p>zookeeper 访问机制</p><p>参考：<a href="https://hadoop.apache.org/docs" target="_blank" rel="noopener">hadoop官网文档</a> ,<a href="https://www.ibm.com/developerworks/cn/data/library/bd-yarn-intro/index.html" target="_blank" rel="noopener">IBM</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务</title>
    <link href="/2020/09/20/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2020/09/20/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是分布式事务"><a href="#什么是分布式事务" class="headerlink" title="什么是分布式事务"></a><strong>什么是分布式事务</strong></h3><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。</p><p>简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。</p><p>本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>在分布式系统中，一致性（Consistency）、可用性（Availability）和分区容忍性（Partition Tolerance）3 个要素最多只能同时满足两个，不可兼得。其中，分区容忍性又是不可或缺的。</p><h3 id="一致性原则"><a href="#一致性原则" class="headerlink" title="一致性原则"></a>一致性原则</h3><p>弱一致性：写入一个新值后，可以读的出来也可以读不出来，对数据完整性要求不高的场景。</p><p>最终一致性：写入一个新值后，在某个时间窗口可以读出来（消息中间件场景）</p><p>强一致性：新数据写入后，一定是一致的。</p><h3 id="Base理论"><a href="#Base理论" class="headerlink" title="Base理论"></a>Base理论</h3><p>核心思想：</p><ul><li><strong>基本可用</strong>（Basically Available）：指分布式系统在出现故障时，允许损失部分的可用性来保证核心可用。</li><li><strong>软状态</strong>（Soft State）：指允许分布式系统存在中间状态，该中间状态不会影响到系统的整体可用性。</li><li><strong>最终一致性</strong>（Eventual Consistency）：指分布式系统中的所有副本数据经过一定时间后，最终能够达到一致的状态。</li></ul><h3 id="XA协议"><a href="#XA协议" class="headerlink" title="XA协议"></a>XA协议</h3><p>待补充。。。</p><h3 id="TCC模型"><a href="#TCC模型" class="headerlink" title="TCC模型"></a>TCC模型</h3><p>三个阶段，分别是try，commit，cancel</p><p>需要原来的服务调用接口支持三个逻辑：分布式事务的管理，由事务管理器处理</p><p><strong>然后你原本的一个接口，要改造为3个逻辑，Try-Confirm-Cancel</strong>。</p><ul><li><p>先是服务调用链路依次执行Try逻辑，完成业务检查，准备业务资源</p></li><li><p>如果都正常的话，TCC分布式事务框架推进执行Confirm逻辑，完成整个事务，执行业务逻辑，try中预留了资源，Confirm可以成功</p></li><li><p>如果某个服务的Try逻辑有问题，TCC分布式事务框架感知到之后就会推进执行各个服务的Cancel逻辑，撤销之前执行的各种操作，释放</p></li></ul><p>执行过程中挂掉，可以设置超时，然后通过日志重新执行。</p><h2 id="全局ID生成器"><a href="#全局ID生成器" class="headerlink" title="全局ID生成器"></a>全局ID生成器</h2><p>snowflake是twitter开源的分布式ID生成算法，其<strong>核心思想为，</strong>一个long型的ID：</p><ul><li>41bit作为毫秒数</li><li>10bit作为机器编号</li><li>12bit作为毫秒内序列号</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志系统</title>
    <link href="/2020/08/29/java/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/08/29/java/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="JAVA日志框架"><a href="#JAVA日志框架" class="headerlink" title="JAVA日志框架"></a>JAVA日志框架</h2><h3 id="日志门面框架和日志实现框架的区别"><a href="#日志门面框架和日志实现框架的区别" class="headerlink" title="日志门面框架和日志实现框架的区别"></a>日志门面框架和日志实现框架的区别</h3><p>目前的日志框架有JDK自带的<code>logging</code>，<code>log4j1</code>、<code>log4j2</code>、<code>logback</code> ，这些框架都自己定制了日志 API ，并且有相应的实现；目前用于实现日志统一的框架 <code>Apache commons-logging</code>、<code>slf4j</code> ，遵循面向接口编程的原则，这两大框架可以让用户在程序运行期间去选择具体的日志实现系统（<code>log4j1\log4j2\logback</code>等）来记录日志，是统一抽象出来的一些接口。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195735.png" srcset="/img/loading.gif" alt="img"></p><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>FATAL — 表示需要立即被处理的系统级错误。</li><li>ERROR — 该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。当ERROR错误发生时，已经影响了用户的正常访问。</li><li>WARN — 该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。</li><li>INFO — 该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。</li><li>DEBUG or TRACE — 这两种日志具体的规范应该由项目组自己定义，该级别日志的主要作用是对系统每一步的运行状态进行精确的记录。</li></ul><h2 id="java原生日志系统JUL工作原理"><a href="#java原生日志系统JUL工作原理" class="headerlink" title="java原生日志系统JUL工作原理"></a>java原生日志系统JUL工作原理</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis study</title>
    <link href="/2020/07/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/"/>
    <url>/2020/07/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="redis-study"><a href="#redis-study" class="headerlink" title="redis study"></a>redis study</h1><p>redis的一些笔记（个人向）</p><p>详细文档参见 <a href="http://redisdoc.com/string/index.html" target="_blank" rel="noopener">http://redisdoc.com/string/index.html</a></p><h2 id="redis原理"><a href="#redis原理" class="headerlink" title="redis原理"></a>redis原理</h2><p>单线程，用队列处理并发访问，由于是内存型数据库 用来当作缓存，读写比较快。单机10左右tps</p><h3 id="与memcache比较"><a href="#与memcache比较" class="headerlink" title="与memcache比较"></a>与memcache比较</h3><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200156.jpg" srcset="/img/loading.gif" alt=""></p><p>redis的优势：可以持久化，数据类型多样，支持事务</p><h2 id="redis-数据类型"><a href="#redis-数据类型" class="headerlink" title="redis 数据类型"></a>redis 数据类型</h2><ul><li><p>string</p><p><strong>常用命令:</strong> set,get,decr,incr,mget 等。</p><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SET key value<br></code></pre></td></tr></table></figure><p>redis string 二进制安全，可以存放任何数据</p><p>主要由SDS结构体实现，而不是直接用 \0表示字符串结尾，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sdshdr</span> &#123;</span><br><span class="hljs-keyword">int</span> len;<span class="hljs-comment">//记录buf数组大小</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">free</span>;<span class="hljs-comment">//记录buf数组还有多少可用空间</span><br><span class="hljs-keyword">char</span> buf[];<span class="hljs-comment">//字符串实体，保存字符串的内容</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>hash</p><p><strong>常用命令：</strong> hget,hset,hgetall 等。</p><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HSET key field value<br></code></pre></td></tr></table></figure></li><li><p>list</p><p><strong>常用命令:</strong> lpush,rpush,lpop,rpop,lrange等</p><p>底层实现是一个链表</p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lpush key value<br></code></pre></td></tr></table></figure></li><li><p>set</p><p><strong>常用命令：</strong> sadd,spop,smembers,sunion 等</p><p>Redis的Set是string类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sadd key member<br></code></pre></td></tr></table></figure></li><li><p>zset(有序集合)</p><p><strong>常用命令：</strong> zadd,zrange,zrem,zcard等</p><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zadd key score member<br></code></pre></td></tr></table></figure></li></ul><h2 id="Redis-过期时间"><a href="#Redis-过期时间" class="headerlink" title="Redis 过期时间"></a>Redis 过期时间</h2><p>在设置redis时可以设置过期时间</p><h3 id="删除方式：定期删除-惰性删除"><a href="#删除方式：定期删除-惰性删除" class="headerlink" title="删除方式：定期删除+惰性删除"></a>删除方式：定期删除+惰性删除</h3><ul><li><strong>定期删除</strong>：redis默认是每隔 100ms 就<strong>随机抽取</strong>一些设置了过期时间的key，检查其是否过期，如果过期就删除。注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载！</li><li><strong>惰性删除</strong> ：定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存里，除非你的系统去查一下那个 key，才会被redis给删除掉。这就是所谓的惰性删除，也是够懒的哈！</li></ul><h2 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h2><p>由于删除方式的原因，容易导致大量过期的key堆积未被删除，容易导致过期key堆积在内存中，使得内存不足，或超出上限。</p><p>这时候需要有内存淘汰机制来及时清理内存。</p><p><strong>noeviction:</strong> 当内存不足以容纳新写入数据时，新写入操作会报错。</p><p><strong>allkeys-lru：</strong>当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。</p><p><strong>allkeys-random：</strong>当内存不足以容纳新写入数据时，在键空间中，随机移除某个 key，这个一般没人用吧，为啥要随机。</p><p><strong>volatile-lru</strong>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key（这个一般不太合适）。</p><p><strong>volatile-random</strong>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 key。</p><p><strong>volatile-ttl</strong>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 key 优先移除。</p><p>4.0版本后增加以下两种：</p><ol><li><strong>volatile-lfu</strong>：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰</li><li><strong>allkeys-lfu</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的key</li></ol><ul><li>valatile 过期数据</li><li>allkeys 所有数据</li><li>lru 最少使用</li><li>lfu 最不经常使用</li></ul><h2 id="redis-持久化"><a href="#redis-持久化" class="headerlink" title="redis 持久化"></a>redis 持久化</h2><ol><li><p><strong>快照（snapshotting）持久化（RDB）</strong></p><p>redis 默认持久化方式</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lsl">save <span class="hljs-number">900</span> <span class="hljs-number">1</span>           #在<span class="hljs-number">900</span>秒(<span class="hljs-number">15</span>分钟)之后，如果至少有<span class="hljs-number">1</span>个<span class="hljs-type">key</span>发生变化，Redis就会自动触发BGSAVE命令创建快照。<br><br>save <span class="hljs-number">300</span> <span class="hljs-number">10</span>          #在<span class="hljs-number">300</span>秒(<span class="hljs-number">5</span>分钟)之后，如果至少有<span class="hljs-number">10</span>个<span class="hljs-type">key</span>发生变化，Redis就会自动触发BGSAVE命令创建快照。<br><br>save <span class="hljs-number">60</span> <span class="hljs-number">10000</span>        #在<span class="hljs-number">60</span>秒(<span class="hljs-number">1</span>分钟)之后，如果至少有<span class="hljs-number">10000</span>个<span class="hljs-type">key</span>发生变化，Redis就会自动触发BGSAVE命令创建快照。<br></code></pre></td></tr></table></figure></li><li><p><strong>只追加文件（append-only file,AOF）</strong></p></li></ol><p>与快照持久化相比，AOF持久化 的实时性更好，因此已成为主流的持久化方案。默认情况下Redis没有开启AOF（append only file）方式的持久化，可以通过appendonly参数开启：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">appendonly</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof。</p><p>在Redis的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">appendfsync</span> always    <span class="hljs-comment">#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度</span><br>appendfsync everysec  <span class="hljs-comment">#每秒钟同步一次，显示地将多个写命令同步到硬盘</span><br>appendfsync <span class="hljs-literal">no</span>        <span class="hljs-comment">#让操作系统决定何时进行同步</span><br></code></pre></td></tr></table></figure><p>为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec选项 ，让Redis每秒同步一次AOF文件，Redis性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，Redis还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。</p><p>Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 <code>aof-use-rdb-preamble</code> 开启）。</p><h3 id="redis-事务"><a href="#redis-事务" class="headerlink" title="redis 事务"></a>redis 事务</h3><p>​     单线程和事务关系的思考：（为什么redis单线程还需要事务）</p><p>单线程只能保证单个命令是原子的，如果需要多个命令是原子性的，需要提供事务来实现。</p><p>MULTI 开启事务</p><p>EXEC 提交事务</p><p>DISCARD 丢弃事务</p><p>WATCH  watch 为redis提供了CAS 功能，在进行操作前监视那些键值。</p><h3 id="缓存雪崩和缓存穿透"><a href="#缓存雪崩和缓存穿透" class="headerlink" title="缓存雪崩和缓存穿透"></a>缓存雪崩和缓存穿透</h3><p>缓存雪崩：缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><ul><li>设定随机失效时间</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p>解决方案：有很多种方法可以有效地解决缓存穿透问题，最常见的是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h3 id="架构方面的数据一致性"><a href="#架构方面的数据一致性" class="headerlink" title="架构方面的数据一致性"></a>架构方面的数据一致性</h3><p>写时，先删缓存再写数据库</p><p>读时，先读缓存，缓存不存在，再读数据库，然后写缓存。 </p>]]></content>
    
    
    
    <tags>
      
      <tag>Java redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitMQ笔记</title>
    <link href="/2020/06/01/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitMQ/"/>
    <url>/2020/06/01/%E4%B8%AD%E9%97%B4%E4%BB%B6/rabbitMQ/</url>
    
    <content type="html"><![CDATA[<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>使用消息队列的原因</p><p>不同进程（process）之间传递消息时，两个进程之间耦合程度过高，改动一个进程，引发必须修改另一个进程，为了隔离这两个进程，在两进程间抽离出一层（一个模块），所有两进程之间传递的消息，都必须通过消息队列来传递，单独修改某一个进程，不会影响另一个；</p><p>不同进程（process）之间传递消息时，为了实现标准化，将消息的格式规范化了，并且，某一个进程接受的消息太多，一下子无法处理完，并且也有先后顺序，必须对收到的消息进行排队，因此诞生了事实上的消息队列；</p><p>rabbitMQ是使用erlang开发的一种基于AMQP协议的消息系统</p><ul><li>Broker:它提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输,</li><li>Exchange：消息交换机,它指定消息按什么规则,路由到哪个队列。 </li><li>Queue:消息的载体,每个消息都会被投到一个或多个队列。 </li><li>Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来. </li><li>Routing Key:路由关键字,exchange根据这个关键字进行消息投递。 </li><li>vhost:虚拟主机,一个broker里可以有多个vhost，用作不同用户的权限分离。 </li><li>Producer:消息生产者,就是投递消息的程序. </li><li>Consumer:消息消费者,就是接受消息的程序. </li><li>Channel:消息通道,在客户端的每个连接里,可建立多个channel.</li></ul><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195709.png" srcset="/img/loading.gif" alt=""></p><p>RabbitMQ队列模型</p><p>简单队列:   一个生产者对应一个消费者</p><p>work模式:  简单队列只要消息从队列中获取，无论消费者获取到消息后是否成功消费，比如遇到状况：断电，都认为是消息已经成功消费；work模式消费者从队列中获取消息后，服务器会将该消息标记为不可用状态，等待消费者反馈，如果消费这一直没有反馈，则该消息一直处于不可用状态。channel.basicQos(1); 能者多劳，否则平均分配</p><h2 id="消息分发机制"><a href="#消息分发机制" class="headerlink" title="消息分发机制"></a>消息分发机制</h2><h2 id="简单队列"><a href="#简单队列" class="headerlink" title="简单队列"></a>简单队列</h2><p>一个生产者对应一个消费者，简单队列只要消息从队列中获取，无论消费者获取到消息后是否成功消费，比如遇到状况：断电，都认为是消息已经成功消费。</p><h2 id="work模式"><a href="#work模式" class="headerlink" title="work模式"></a>work模式</h2><p>work模式：一个队列对应多个消费者</p><p>分发方式：</p><ul><li><p>公平方式 channel.basicQos(1); 保证一个消费者同一时刻只处理一个消息</p></li><li><p>轮询方式 将第n个消息发给n取余后的消费者，消费能力不同时会阻塞。</p></li></ul><p>消费者从队列中获取消息后，服务器会将该消息标记为不可用状态，等待消费者反馈，如果消费这一直没有反馈，则该消息一直处于不可用状态。channel.basicQos(1); 能者多劳，否则平均分配</p><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>一个消费者将消息首先发送到交换器，交换器绑定到多个队列，然后被监听该队列的消费者所接收并消费。</p><h3 id="交换器类型"><a href="#交换器类型" class="headerlink" title="交换器类型"></a>交换器类型</h3><ul><li><p><strong>fanout</strong></p><p>  fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。生产者发送到Exchange的所有消息都会路由到绑定的Queue，并最终被两个消费者消费。</p></li><li><p><strong>direct</strong></p><p>  direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。（在实际使用RabbitMQ的过程中并没有binding key这个参数，只有routing key，为了区分我们把交换机和队列绑定时传的参数叫binding key，把发送消息时带的这个参数叫routing key）</p></li><li><p><strong>topic</strong></p><p>前面讲到direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但direct是完全匹配，而通过topic可以进行模糊匹配</p></li></ul><h3 id="消息可靠性和分布式可靠性机制"><a href="#消息可靠性和分布式可靠性机制" class="headerlink" title="消息可靠性和分布式可靠性机制"></a>消息可靠性和分布式可靠性机制</h3><p>不同角色丢失消息：</p><p>生产者：（推荐）可以开启confirm模式，在生产者那里设置开启confirm模式之后，你每次写的消息都会分配一个唯一的id，然后如果写入了rabbitmq中，rabbitmq会给你回传一个ack消息，告诉你说这个消息ok了。如果rabbitmq没能处理这个消息，会回调你一个nack接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息id的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>mq：设置mq的消息持久化，在消息写入后就进行持久化，可以设置交换器，队列和消息的持久化，开启了持久化的交换器只能与对应持久的队列绑定</p><p>消费者：关闭自动ack功能，自动ack只要消费者不抛异常则认为消费，存在的情况：可能接受消息后直接挂了，也认为被消费，可以采用手动ack来实现，代码处理完之后再进行ack，确保消息被正确消费。（存在重复消费的问题，需要在代码中实现消息的幂等性）</p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件 MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rocketMQ</title>
    <link href="/2020/05/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketMQ/"/>
    <url>/2020/05/30/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketMQ/</url>
    
    <content type="html"><![CDATA[<p>架构示意图</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200214.png" srcset="/img/loading.gif" alt="img"></p><h2 id="组件介绍："><a href="#组件介绍：" class="headerlink" title="组件介绍："></a>组件介绍：</h2><h3 id="NameServer："><a href="#NameServer：" class="headerlink" title="NameServer："></a>NameServer：</h3><blockquote><p>主要负责对于源数据的管理，包括了对于<strong>Topic</strong>和路由信息的管理。</p></blockquote><p><strong>NameServer</strong>是一个功能齐全的服务器，其角色类似Dubbo中的Zookeeper，但NameServer与Zookeeper相比更轻量。主要是因为每个NameServer节点互相之间是独立的，没有任何信息交互。</p><p><strong>NameServer</strong>压力不会太大，平时主要开销是在维持心跳和提供Topic-Broker的关系数据。</p><p>但有一点需要注意，Broker向NameServer发心跳时， 会带上当前自己所负责的所有<strong>Topic</strong>信息，如果<strong>Topic</strong>个数太多（万级别），会导致一次心跳中，就Topic的数据就几十M，网络情况差的话， 网络传输失败，心跳失败，导致NameServer误认为Broker心跳失败。</p><p><strong>NameServer</strong> 被设计成几乎无状态的，可以横向扩展，节点之间相互之间无通信，通过部署多台机器来标记自己是一个伪集群。</p><p>每个 Broker 在启动的时候会到 NameServer 注册，Producer 在发送消息前会根据 Topic 到 <strong>NameServer</strong> 获取到 Broker 的路由信息，Consumer 也会定时获取 Topic 的路由信息。</p><p>所以从功能上看NameServer应该是和 ZooKeeper 差不多，据说 RocketMQ 的早期版本确实是使用的 ZooKeeper ，后来改为了自己实现的 NameServer 。</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><blockquote><p>消息中转角色，负责<strong>存储消息</strong>，转发消息。</p></blockquote><ul><li><strong>Broker</strong>是具体提供业务的服务器，单个Broker节点与所有的NameServer节点保持长连接及心跳，并会定时将<strong>Topic</strong>信息注册到NameServer，顺带一提底层的通信和连接都是<strong>基于Netty实现</strong>的。</li><li><strong>Broker</strong>负责消息存储，以Topic为纬度支持轻量级的队列，单机可以支撑上万队列规模，支持消息推拉模型。</li><li>官网上有数据显示：具有<strong>上亿级消息堆积能力</strong>，同时可<strong>严格保证消息的有序性</strong>。</li></ul><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><blockquote><p>消息生产者，负责产生消息，一般由业务系统负责产生消息。</p></blockquote><ul><li><strong>Producer</strong>由用户进行分布式部署，消息由<strong>Producer</strong>通过多种负载均衡模式发送到<strong>Broker</strong>集群，发送低延时，支持快速失败。</li><li><strong>RocketMQ</strong> 提供了三种方式发送消息：同步、异步和单向</li><li><strong>同步发送</strong>：同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信。</li><li><strong>异步发送</strong>：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。</li><li><strong>单向发送</strong>：单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><blockquote><p>消息消费者，负责消费消息，一般是后台系统负责异步消费。</p></blockquote><ul><li><p><strong>Consumer</strong>也由用户部署，支持PUSH和PULL两种消费模式，支持<strong>集群消费</strong>和<strong>广播消息</strong>，提供<strong>实时的消息订阅机制</strong>。</p></li><li><p><strong>Pull</strong>：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以 Pull 称为主动消费型。</p></li><li><p><strong>Push</strong>：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现。所以 Push 称为被动消费类型，但从实现上看还是从消息服务器中拉取消息，不同于 Pull 的是 Push 首先要注册消费监听器，当监听器处触发后才开始消费消费。  </p></li></ul><h2 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h2><blockquote><p>Topic</p></blockquote><p><strong>消息主题</strong>，消息的逻辑分类，可以理解为抽象的消息类型，所有的操作都是基于topic进行的</p><blockquote><p>Tag</p></blockquote><p><strong>标签</strong>，topic的细化，对同一个topic里面的消息进行更进一步的分类，方便消费者进行过滤，如压测数据会添加对应的压测的标签</p><blockquote><p>Message</p></blockquote><p><strong>消息</strong>，表示消息的主要内容，在rocketMQ中每条消息主要包括下面内容：</p><ul><li>Message Id</li></ul><p>消息的全局唯一标识，一般在发送过程中由rocketMQ自动生成</p><ul><li>Message Key</li></ul><p>消息的业务标识，由生产者设置，标识业务逻辑</p><hr><p>疑问点：</p><p>tag和messageKey的区别</p><hr><blockquote><p>message body</p></blockquote><p>消息的主要内容，需要进行消息序列化</p><blockquote><p>Messagequeue</p></blockquote><p>消息队列，在实际消息承载的组件是由消息队列承担的，默认一个topic 会分配4个queue，分布在不同的broker上</p><blockquote><p>group</p></blockquote><p>分组信息，可以分为Producer Group<code>和</code>Consumer Group，一个topic可以有多个group。</p><p>集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</p><p>广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</p><blockquote><p>offset</p></blockquote><p>偏移量，由于采用的是队列的形式，消费消息完成后，需要一个标识来表示消费完成的位置，consumer可以根据offset继续消费。</p><blockquote><p>ordered message</p></blockquote><p>消息有序指的是一类消息消费时，能按照发送的顺序来消费。例如：一个订单产生了三条消息分别是订单创建、订单付款、订单完成。消费时要按照这个顺序消费才能有意义，但是同时订单之间是可以并行消费的。RocketMQ可以严格的保证消息有序。</p><p>顺序消息分为全局顺序消息与分区顺序消息，全局顺序是指某个Topic下的所有消息都要保证顺序；部分顺序消息只要保证每一组消息被顺序消费即可。</p><ul><li>全局顺序 对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费。 适用场景：性能要求不高，所有的消息严格按照 FIFO 原则进行消息发布和消费的场景</li><li>分区顺序 对于指定的一个 Topic，所有消息根据 sharding key 进行区块分区。 同一个分区内的消息按照严格的 FIFO 顺序进行发布和消费。 Sharding key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Key 是完全不同的概念。 适用场景：性能要求高，以 sharding key 作为分区字段，在同一个区块中严格的按照 FIFO 原则进行消息发布和消费的场景。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>中间件 MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码解析</title>
    <link href="/2020/04/30/%E6%A1%86%E6%9E%B6/spring%E6%BA%90%E7%A0%81/"/>
    <url>/2020/04/30/%E6%A1%86%E6%9E%B6/spring%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring源码阅读"><a href="#Spring源码阅读" class="headerlink" title="Spring源码阅读"></a>Spring源码阅读</h2><p>ApplicationContext 相关类图</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112034537.png" srcset="/img/loading.gif" alt=""></p><p>Resource类图:</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112034527.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>框架学习 Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2020/02/20/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/02/20/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ol><li><strong>开闭原则</strong> 对扩展开放，对修改封闭</li><li><strong>里氏代换原则</strong> 任何基类可以出现的地方，子类一定可以出现。</li><li><strong>依赖倒转原则</strong> 抽象不应该依赖于细节，细节应该依赖于抽象</li><li><strong>接口隔离原则</strong> 使用多个专门的接口，而不使用单一的总接口</li><li><strong>迪米特法则，又称最少知道原则（Demeter Principle）</strong> 一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</li><li><strong>合成复用原则</strong> 尽量使用对象组合，而不是继承来达到复用的目的</li><li><strong>单一职责原则</strong> 一个类只负责一个功能领域中的相应职责</li></ol><h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><p>三大类：</p><p>创建型模式</p><p>单例，工厂（3种），建造者，原型</p><p>结构型模式</p><p>适配器，桥接，装饰，外观，代理，享元，组合</p><p>行为型模式</p><p>责任链，命令模式，解释器，迭代器，中介者，备忘录，状态，策略，模板方法，访问者</p><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>简单工厂模式 是一个工厂对象根据收到的消息决定要创建的实例的类型。</p><p><em>优点</em>：工厂类中包含了必要的逻辑，根据用户需要实例化对应的类。</p><p><em>缺点</em>：容易违反高内聚低耦合的原则，增加一个类需要修改工厂代码，所有的产品都由同一个工厂创建，工厂类职责较重，业务逻辑较为复杂，具体产品与工厂类之间的耦合度高，严重影响了系统的灵活性和扩展性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FoodFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Food <span class="hljs-title">makeFood</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"noodle"</span>)) &#123;<br>            Food noodle = <span class="hljs-keyword">new</span> LanZhouNoodle();<br>            noodle.addSpicy(<span class="hljs-string">"more"</span>);<br>            <span class="hljs-keyword">return</span> noodle;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"chicken"</span>)) &#123;<br>            Food chicken = <span class="hljs-keyword">new</span> HuangMenChicken();<br>            chicken.addCondiment(<span class="hljs-string">"potato"</span>);<br>            <span class="hljs-keyword">return</span> chicken;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>定义一个创建对象的工厂接口，让子类决定实例化哪个类，将创建工作推迟到子类中。</p><p>具体实现 工厂方法模式提供一个抽象工厂接口来声明抽象工厂方法，而由其子类来具体实现工厂方法，创建具体的产品对象。</p><p><em>优点</em>：符合开-闭原则（扩展开放，修改封闭），解决了简单工厂存在的问题，增加一个产品的实现时，不需要修改父类工厂类的逻辑，只要增加一个子类的实现即可。<br><em>缺点</em>：一个具体工厂类只能创建一种具体产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FoodFactory</span> </span>&#123;<br>    <span class="hljs-function">Food <span class="hljs-title">makeFood</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChineseFoodFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FoodFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Food <span class="hljs-title">makeFood</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"A"</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ChineseFoodA();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"B"</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ChineseFoodB();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmericanFoodFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FoodFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Food <span class="hljs-title">makeFood</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"A"</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AmericanFoodA();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">"B"</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AmericanFoodB();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>区别：普通工厂产出是一个产品（实例），抽象工厂产出是一个抽象（接口）。区别在于，若添加一个新的产品，前者是修改工厂，后者是创建新工厂（符合“闭合原则”）。<br>概述：创建其他工厂的工厂。</p><p>三者关系，简单工厂是对工厂方法的缩减，将具体实现全部集中到工厂类中，抽象工厂是对工厂方法的增强，可以添加多种产品的实现。减少工厂数量，扩展较不方便。</p><p>代码参考<a href="https://github.com/MosesRen/Pattern-Design" target="_blank" rel="noopener">github</a></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>只产生一个实例永久驻留，减少资源开销。</p><p>使用场景：</p><p>确保系统中对应的类只有一个实例存在。</p><p>实现：</p><ul><li>声明为private来隐藏构造器</li><li>private static Singleton实例</li><li>声明为public来暴露实例获取方法</li></ul><p>实现方式：</p><ol><li><p>懒汉式</p><p>使用static 定义静态成员变量或静态代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用synchronized保证线程安全</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125; <br><span class="hljs-comment">//改进型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span>(Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>           instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125; <br><span class="hljs-comment">//双重判定</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span>(Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                instance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>饿汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Singleton instance = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>Initialization Demand Holder (IoDH)模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Initialization on Demand Holder  </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;  <br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HolderClass</span> </span>&#123;  <br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();  <br>    &#125;  <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> HolderClass.instance;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在IoDH中，我们在单例类中增加一个静态(static)内部类，在该内部类中创建单例对象，再将该单例对象通过getInstance()方法返回给外部使用，由于静态单例对象没有作为Singleton的成员变量直接实例化，因此类加载时不会实例化Singleton，第一次调用getInstance()时将加载内部类HolderClass，在该内部类中定义了一个static类型的变量instance，此时会首先初始化这个成员变量，由Java虚拟机来保证其线程安全性，确保该成员变量只能初始化一次。由于getInstance()方法没有任何线程锁定，因此其性能不会造成任何影响。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原理：将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝自己来实现创建过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>,<span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">8836367807392087516L</span>;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br>    <span class="hljs-comment">//浅拷贝</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Customer <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> (Customer)<span class="hljs-keyword">super</span>.clone();<br>    &#125;<br>    <span class="hljs-comment">//深拷贝</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Customer <span class="hljs-title">deepClone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//序列化输出</span><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">//反序列化</span><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        <span class="hljs-keyword">return</span> (Customer) objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式的核心在于如何一步步构建一个包含多个组成部件的完整对象，使用相同的构建过程构建不同的产品，在软件开发中，如果我们需要创建复杂对象并希望系统具备很好的灵活性和可扩展性可以考虑使用建造者模式。</p><p>代码参考<a href="https://github.com/MosesRen/Pattern-Design" target="_blank" rel="noopener">github</a></p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>可以将一个类的接口和另一个类的接口匹配起来，而无须修改原来的适配者接口和抽象目标类接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Target</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> Adaptee adaptee; <span class="hljs-comment">//维持一个对适配者对象的引用  </span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Adapter</span><span class="hljs-params">(Adaptee adaptee)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.adaptee=adaptee;  <br>    &#125;  <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">request</span><span class="hljs-params">()</span> </span>&#123;  <br>        adaptee.specificRequest(); <span class="hljs-comment">//转发调用  </span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>适配器继承或依赖已有的对象，实现想要的目标接口。</p><p>个人理解：继承老的接口，并重写调用方法，在调用方法中调用新增的接口</p><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>将抽象部分与实现部分分离，使它们都可以独立的变化。</p><p>个人理解：一个抽象类有一个接口类对象，和一个抽象方法，都有各自不同的实现，在使用时将不同的对象和不同方法实现之间解耦</p><p>代码参考<a href="https://github.com/MosesRen/Pattern-Design" target="_blank" rel="noopener">github</a></p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>1、组合模式，就是在一个对象中包含其他对象，这些被包含的对象可能是终点对象（不再包含别的对象），也有可能是非终点对象（其内部还包含其他对象，或叫组对象），我们将对象称为节点，即一个根节点包含许多子节点，这些子节点有的不再包含子节点，而有的仍然包含子节点，以此类推。</p><p>2、所谓组合模式，其实说的是对象包含对象的问题，通过组合的方式（在对象内部引用对象）来进行布局，我认为这种组合是区别于继承的，而另一层含义是指树形结构子节点的抽象（将叶子节点与数枝节点抽象为子节点），区别于普通的分别定义叶子节点与数枝节点的方式。</p><p>它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> String dept;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> salary;<br>   <span class="hljs-keyword">private</span> List&lt;Employee&gt; subordinates;<br> <br>   <span class="hljs-comment">//构造函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(String name,String dept, <span class="hljs-keyword">int</span> sal)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.name = name;<br>      <span class="hljs-keyword">this</span>.dept = dept;<br>      <span class="hljs-keyword">this</span>.salary = sal;<br>      subordinates = <span class="hljs-keyword">new</span> ArrayList&lt;Employee&gt;();<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Employee e)</span> </span>&#123;<br>      subordinates.add(e);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Employee e)</span> </span>&#123;<br>      subordinates.remove(e);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getSubordinates</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">return</span> subordinates;<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> (<span class="hljs-string">"Employee :[ Name : "</span>+ name <br>      +<span class="hljs-string">", dept : "</span>+ dept + <span class="hljs-string">", salary :"</span><br>      + salary+<span class="hljs-string">" ]"</span>);<br>   &#125;   <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发</title>
    <link href="/2020/01/23/java/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2020/01/23/java/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>主要的问题：</p><ol><li>什么是多线程</li><li>如何实现多线程</li><li>多线程的问题及解决方法</li></ol><h2 id="1-什么是多线程"><a href="#1-什么是多线程" class="headerlink" title="1.什么是多线程"></a>1.什么是多线程</h2><ol><li><p><strong>进程与线程</strong>：进程是资源分配的最小单位，线程是程序执行的最小单位（资源调度的最小单位）</p><p><em>一个程序至少有一个进程,一个进程至少有一个线程</em>。</p><p>进程，是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。它的执行需要系统分配资源创建实体之后，才能进行。</p><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如<a href="https://www.baidu.com/s?wd=程序计数器&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">程序计数器</a>,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</p><p>通俗一点说，进程就是程序的一次执行，而线程可以理解为进程中的执行的一段程序片段。</p><p><strong>区别</strong></p><p>1）地址空间和其它资源（如打开文件）：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。</p><p>2）通信：进程间通信IPC(Inter-Process Communication)，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。</p><p>3）调度和切换：线程上下文切换比进程上下文切换要快得多。</p></li><li><p>线程的状态转换</p></li></ol><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195845.png" srcset="/img/loading.gif" alt=""></p><h3 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h3><p>sleep的作用是当前执行的线程让出CPU资源，但不释放同步资源，等待CPU重新分配后继续执行。</p><p>wait指当前线程暂时让出同步资源锁，只有调用了notify()的线程才可</p><p>sleep可以在任意地方调用，wait只能在同步方法和同步块中调用。</p><p>sleep是Thread类的方法，wait是object类的方法</p><h3 id="并发程序的同步方式"><a href="#并发程序的同步方式" class="headerlink" title="并发程序的同步方式"></a>并发程序的同步方式</h3><p>进程：无名管道(pipe)、有名管道(FIFO)、信号、共享内存、消息队列、信号量、套接字(socket)<br>线程：互斥量、读写锁、自旋锁、线程信号、条件变量</p><h2 id="2-如何实现多线程"><a href="#2-如何实现多线程" class="headerlink" title="2.如何实现多线程"></a>2.如何实现多线程</h2><ul><li><p>继承Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">thread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">thread</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        thread thread1 = <span class="hljs-keyword">new</span> thread(<span class="hljs-string">"1"</span>);<br>        thread thread2 = <span class="hljs-keyword">new</span> thread(<span class="hljs-string">"2"</span>);<br>        thread1.start();<br>        thread2.start();<br>        System.out.println(<span class="hljs-string">"main"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">thread</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> thread(<span class="hljs-string">"1"</span>)).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> thread(<span class="hljs-string">"2"</span>)).start();<br>        System.out.println(<span class="hljs-string">"main"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行时区别，要将runnable对象传入一个Thread对象的构造函数内</p></li><li><p>实现Callable接口和Future，FutureTask</p><p>可以在线程执行完毕后获取返回的结果。</p><p>Future 是线程池提交了callable任务后的返回的对象</p><p>采用Future实现多线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">myCallable</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建线程池</span><br>        ExecutorService es = Executors.newSingleThreadExecutor();<br>        Future&lt;String&gt; future1 = es.submit(<span class="hljs-keyword">new</span> myCallable(<span class="hljs-string">"1"</span>));<br>        Future&lt;String&gt; future2 = es.submit(<span class="hljs-keyword">new</span> myCallable(<span class="hljs-string">"2"</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">"return future1:"</span>+future1.get());<br>            System.out.println(<span class="hljs-string">"return future2:"</span>+future2.get());<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">"main"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FutureTask 接口实现了RunnableFuture接口，而RunnableFuture接口继承了Runnable 和Future接口因此FutureTask也可以直接提交给Executor执行。 当然也可以调用线程直接执行（FutureTask.run()）</p><p>采用futuretask实现多线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">myCallable</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        FutureTask futureTask1= <span class="hljs-keyword">new</span> FutureTask(<span class="hljs-keyword">new</span> myCallable(<span class="hljs-string">"1"</span>));<br>        FutureTask futureTask2= <span class="hljs-keyword">new</span> FutureTask(<span class="hljs-keyword">new</span> myCallable(<span class="hljs-string">"2"</span>));<br>        <span class="hljs-keyword">new</span> Thread(futureTask1).start();<br>        <span class="hljs-keyword">new</span> Thread(futureTask2).start();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">"1:"</span>+futureTask1.get());<br>            System.out.println(<span class="hljs-string">"2:"</span>+futureTask2.get());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">"main"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-线程间同步与线程安全"><a href="#3-线程间同步与线程安全" class="headerlink" title="3.线程间同步与线程安全"></a>3.线程间同步与线程安全</h2><p>区别进程里面的 <strong><em>同步/异步 阻塞/非阻塞</em></strong> 概念：</p><p><strong>1.同步与异步</strong><br>同步和异步关注的是<strong>消息通信机制</strong> (synchronous communication/ asynchronous communication)<br>所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p><p>而异步则是相反，<strong>调用在发出之后，这个调用就直接返回了，所以没有返回结果</strong>。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><p><strong>2.阻塞非阻塞</strong></p><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果（消息，返回值）时的状态.</strong></p><p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p><h3 id="Java-线程间同步"><a href="#Java-线程间同步" class="headerlink" title="Java 线程间同步"></a>Java 线程间同步</h3><p>由于多个线程可能会共享相同的内存空间和资源，因此在进行多线程时，要保证多个线程合理访问资源，防止造成冲突和错误。</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>需要线程满足执行控制和内存可见</p><p>执行控制：线程按照人为的设想进行并发和要求执行。</p><p>内存可见：线程对内存的操作和修改对其他线程是可见的。</p><h3 id="线程同步方法"><a href="#线程同步方法" class="headerlink" title="线程同步方法"></a>线程同步方法</h3><ul><li><p><strong>Synchronized同步</strong></p><p>Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p><p>synchronized：可见性，原子性</p><p>需要注意的地方，synchronized是对象锁，对整个对象的同步代码进行加锁，未获得锁的线程，所有对同步代码块的访问的请求都被阻塞。无论该线程请求的是不是加锁的线程所访问的代码块，所有同步代码块都被加锁。</p><p>普通方法：只有获取了该对象的锁的可以访问，不影响其他对象的访问。</p><p>静态方法：只有获取了类的锁的线程可访问，所有对象均被block。</p><p>其他未被Synchronized修饰的方法，可以直接访问。</p><p>Synchronized关键字不能继承。 父类使用了 synchronized的方法，子类在继承的时候默认是不同步的</p><p>在定义接口方法时不能使用synchronized关键字</p><p>构造方法不能使用synchronized关键字，但可以使用synchronized代码块来进行同步。 </p><p>Synchronized也可以对类进行同步控制。</p><ul><li>同步方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**<br> * Description:<br> * User: jehuRen<br> * Date: 2019-08-26<br> * Time: 14:56<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">myRunnable</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.name);<br>        System.out.println(Thread.currentThread().getId());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Runnable runnable = <span class="hljs-keyword">new</span> myRunnable(<span class="hljs-string">"1"</span>);<br>        <span class="hljs-keyword">new</span> Thread(runnable).start();<br>        <span class="hljs-keyword">new</span> Thread(runnable).start();<br>        System.out.println(<span class="hljs-string">"main"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>同步代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//synchronized 块：通过 synchronized关键字来声明synchronized 块。语法如下：  </span><br><span class="hljs-keyword">synchronized</span>(syncObject) &#123;  <br><span class="hljs-comment">//允许访问控制的代码  </span><br>&#125;  <br><span class="hljs-comment">//synchronized 块是这样一个代码块，其中的代码必须获得对象 syncObject （如前所述，可以是类实例或类）的锁方能执行</span><br></code></pre></td></tr></table></figure><p>synchronized实现机制：</p><p>基于操作系统的mutex lock互斥锁来实现的，是重量级锁，后面会详细介绍</p></li><li><p><strong>使用volatile进行同步</strong></p><ol><li>volatile关键字为域变量的访问提供了一种免锁机制， </li><li>使用volatile修饰域相当于告诉虚拟机该域可能会被其他线程更新， </li><li>因此每次使用该域就要重新加载，而不是使用寄存器中的值，每次修改完之后要重新写入主内存 </li><li>volatile不会提供任何原子操作，它也不能用来修饰final类型的变量，volatile只提供可见性，不提供原子性 </li><li>volatile 可以禁止指令重排序，不缓存在cache中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span> </span>&#123; <br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span> </span>&#123; <br>         <span class="hljs-comment">//这里延迟1毫秒，使得结果明显 </span><br>         <span class="hljs-keyword">try</span> &#123; <br>             Thread.sleep(<span class="hljs-number">1</span>); <br>         &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>         &#125;<br>         count++; <br>     &#125; <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br><br>        <span class="hljs-comment">//同时启动1000个线程，去进行i++计算，看看实际结果 </span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123; <br>            <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123; <br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123; <br>                    Counter.inc(); <br>                &#125; <br>            &#125;).start(); <br>        &#125; <br>     <br>        <span class="hljs-comment">//这里每次运行的值都有可能不同,可能为1000 </span><br>        System.out.println(<span class="hljs-string">"运行结果:Counter.count="</span> + Counter.count); <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS(Compare And Swap)，即比较并交换。是解决多线程并行情况下使用锁造成性能损耗的一种机制，CAS操作包含三个操作数——内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。</p><p>java采用 sun.misc.unsafe类里的CAS实现的，unsafe的实现是基于操作系统底层机器指令实现的。java.util.concurrent.atomic里面的原子类和AQS是采用CSA操作实现的。</p><p>具体的实现：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">private static final Unsafe unsafe = Unsafe.getUnsafe();<br>//unsafe操作类<br>private static final long valueOffset;<br>//内存偏移<br>static &#123;<br>    try &#123;<br>        valueOffset = unsafe.objectFieldOffset<br>            (AtomicInteger.class.getDeclaredField("value"));<br>    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;<br>&#125;<br>//获取值的内存位置<br>//volatile保证值的可见性<br>private volatile int value;<br><br><br>public final int incrementAndGet() &#123;<br>    //用get出来的值+1，前面的方法是unsafe中实现的 i++。对value属性进行操作。<br>    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;<br>&#125;<br><br>//Unsafe中的。这个方法可以看到一直在做do-while，直到CAS成功（获取AtomicInteger对象上的value属性,然后CAS检查保证值是var5的时候将他变成var5+1）。<br>//其中getIntVolatile和compareAndSwapInt 都是native方法，用C写的。CAS底层貌似是使用了cpu的cpxchg(compare*change)。<br>public final int getAndAddInt(Object var1, long var2, int var4) &#123;<br>    int var5;<br>    do &#123;<br>        var5 = this.getIntVolatile(var1, var2);<br>    &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    return var5;<br>&#125;<br><br>//自旋CSA 采用unsafe的CAS 然后原子类自旋修改值，unsafe调用的是底层的系统原语的指令，所以可以保证操作的原子性。<br></code></pre></td></tr></table></figure></li><li><p><strong>锁实现线程同步</strong></p><p>在JavaSE5.0中新增了一个java.util.concurrent包来支持同步。 ReentrantLock类是可重入、互斥、实现了Lock接口的锁， 它与使用synchronized方法和快具有相同的基本行为和语义，并且扩展了其能力。</p><p>主要有：ReentrantLock可重入独占锁，ReentrantReadWriteLock读写锁（读共享，写独占），CountDownLatch（计数器），CyclicBarrier（回环栅栏），Samaphore（信号量）</p><p><strong><em>可重入锁实例</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReentrantLockDemo01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tickets = <span class="hljs-number">200</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            lock.lock(); <span class="hljs-comment">// 获取锁</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>                    TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">100</span>);<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">" "</span> + tickets--);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock(); <span class="hljs-comment">// 释放所</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ReentrantLockDemo01 reentrantLockDemo = <span class="hljs-keyword">new</span> ReentrantLockDemo01();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Thread thread = <span class="hljs-keyword">new</span> Thread(reentrantLockDemo, <span class="hljs-string">"thread"</span> + i);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><em>读写锁使用实例</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JUCtest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ReentrantReadWriteLock reentrantReadWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br>    <span class="hljs-keyword">private</span> Lock RWlock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tickets = <span class="hljs-number">200</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>        reentrantReadWriteLock.readLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">":"</span>+tickets);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            reentrantReadWriteLock.readLock().unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">()</span></span>&#123;<br>        reentrantReadWriteLock.writeLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">":"</span>+tickets--);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            reentrantReadWriteLock.writeLock().unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        JUCtest juCtest = <span class="hljs-keyword">new</span> JUCtest();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    juCtest.write();<br>                &#125;<br>            &#125;, <span class="hljs-string">"thread"</span> + i);<br>            thread.start();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                    juCtest.read();<br>                &#125;<br>            &#125;,<span class="hljs-string">"thread"</span>+i*<span class="hljs-number">10</span>);<br>            thread.start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CountDownLatch</strong></p><p>新建对象时设置计数的值</p><p>调用await()方法当前线程会挂起，等待count值减为0时继续。</p><p>调用countDown()方法可以将计数值减一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;   <br>         <span class="hljs-keyword">final</span> CountDownLatch latch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">2</span>);<br>          <br>         <span class="hljs-keyword">new</span> Thread()&#123;<br>             <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                 <span class="hljs-keyword">try</span> &#123;<br>                     System.out.println(<span class="hljs-string">"子线程"</span>+Thread.currentThread().getName()+<span class="hljs-string">"正在执行"</span>);<br>                    Thread.sleep(<span class="hljs-number">3000</span>);<br>                    System.out.println(<span class="hljs-string">"子线程"</span>+Thread.currentThread().getName()+<span class="hljs-string">"执行完毕"</span>);<br>                    latch.countDown();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>             &#125;;<br>         &#125;.start();<br>          <br>         <span class="hljs-keyword">new</span> Thread()&#123;<br>             <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                 <span class="hljs-keyword">try</span> &#123;<br>                     System.out.println(<span class="hljs-string">"子线程"</span>+Thread.currentThread().getName()+<span class="hljs-string">"正在执行"</span>);<br>                     Thread.sleep(<span class="hljs-number">3000</span>);<br>                     System.out.println(<span class="hljs-string">"子线程"</span>+Thread.currentThread().getName()+<span class="hljs-string">"执行完毕"</span>);<br>                     latch.countDown();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>             &#125;;<br>         &#125;.start();<br>          <br>         <span class="hljs-keyword">try</span> &#123;<br>             System.out.println(<span class="hljs-string">"等待2个子线程执行完毕..."</span>);<br>            latch.await();<br>            System.out.println(<span class="hljs-string">"2个子线程已经执行完毕"</span>);<br>            System.out.println(<span class="hljs-string">"继续执行主线程"</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CyclicBarrier</strong></p><p>字面意思回环栅栏，通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，CyclicBarrier可以被重用。我们暂且把这个状态就叫做barrier，当调用await()方法之后，线程就处于barrier了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = <span class="hljs-number">4</span>;<br>        CyclicBarrier barrier  = <span class="hljs-keyword">new</span> CyclicBarrier(N,<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">"当前线程"</span>+Thread.currentThread().getName());   <br>            &#125;<br>        &#125;);<br>         <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>            <span class="hljs-keyword">new</span> Writer(barrier).start();<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Writer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>        <span class="hljs-keyword">private</span> CyclicBarrier cyclicBarrier;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Writer</span><span class="hljs-params">(CyclicBarrier cyclicBarrier)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.cyclicBarrier = cyclicBarrier;<br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">"线程"</span>+Thread.currentThread().getName()+<span class="hljs-string">"正在写入数据..."</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">5000</span>);      <span class="hljs-comment">//以睡眠来模拟写入数据操作</span><br>                System.out.println(<span class="hljs-string">"线程"</span>+Thread.currentThread().getName()+<span class="hljs-string">"写入数据完毕，等待其他线程写入完毕"</span>);<br>                cyclicBarrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<span class="hljs-keyword">catch</span>(BrokenBarrierException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">"所有线程写入完毕，继续处理其他任务..."</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>semaphore</strong></p><p>Semaphore翻译成字面意思为 信号量，Semaphore可以控同时访问的线程个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。可以看成一个互斥锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = <span class="hljs-number">8</span>;            <span class="hljs-comment">//工人数</span><br>        Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">5</span>); <span class="hljs-comment">//机器数目</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>            <span class="hljs-keyword">new</span> Worker(i,semaphore).start();<br>    &#125;<br>     <br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num;<br>        <span class="hljs-keyword">private</span> Semaphore semaphore;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num,Semaphore semaphore)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.num = num;<br>            <span class="hljs-keyword">this</span>.semaphore = semaphore;<br>        &#125;<br>         <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                semaphore.acquire();<br>                System.out.println(<span class="hljs-string">"工人"</span>+<span class="hljs-keyword">this</span>.num+<span class="hljs-string">"占用一个机器在生产..."</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                System.out.println(<span class="hljs-string">"工人"</span>+<span class="hljs-keyword">this</span>.num+<span class="hljs-string">"释放出机器"</span>);<br>                semaphore.release();           <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用局部变量实现线程同步</strong></p><p>同步机制是为了同步多个线程对相同资源的并发访问，是为了多个线程之间进行通信的有效方式；而ThreadLocal是隔离多个线程的数据共享，从根本上就不在多个线程之间共享变量，这样当然不需要对多个线程进行同步了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//只改Bank类，其余代码与上同</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span></span>&#123;<br>    <span class="hljs-comment">//使用ThreadLocal类管理共享变量account</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Integer&gt; account = <span class="hljs-keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> Integer <span class="hljs-title">initialValue</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>&#123;<br>        account.set(account.get()+money);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAccount</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> account.get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用阻塞队列实现线程同步</strong></p></li><li><p>前面5种同步方式都是在底层实现的线程同步，但是我们在实际开发当中，应当尽量远离底层结构。 使用javaSE5.0版本中新增的java.util.concurrent包将有助于简化开发。 本小节主要是使用<strong>LinkedBlockingQueue<E></strong>来实现线程的同步 </p><p><strong>LinkedBlockingQueue 类常用方法</strong><br>LinkedBlockingQueue() : 创建一个容量为Integer.MAX_VALUE的LinkedBlockingQueue </p><p>​    put(E e) : 在队尾添加一个元素，如果队列满则阻塞<br>​    size() : 返回队列中的元素个数<br>​    take() : 移除并返回队头元素，如果队列空则阻塞 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xhj.thread;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.LinkedBlockingQueue;<br><br><span class="hljs-comment">/**<br> * 用阻塞队列实现线程同步 LinkedBlockingQueue的使用<br> * <br> * <span class="hljs-doctag">@author</span> XIEHEJUN<br> * <br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockingSynchronizedThread</span> </span>&#123;<br>    <span class="hljs-comment">/**<br>     * 定义一个阻塞队列用来存储生产出来的商品<br>     */</span><br>    <span class="hljs-keyword">private</span> LinkedBlockingQueue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Integer&gt;();<br>    <span class="hljs-comment">/**<br>     * 定义生产商品个数<br>     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">/**<br>     * 定义启动线程的标志，为0时，启动生产商品的线程；为1时，启动消费商品的线程<br>     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkBlockThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> new_flag = flag++;<br>            System.out.println(<span class="hljs-string">"启动线程 "</span> + new_flag);<br>            <span class="hljs-keyword">if</span> (new_flag == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                    <span class="hljs-keyword">int</span> b = <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">255</span>);<br>                    System.out.println(<span class="hljs-string">"生产商品："</span> + b + <span class="hljs-string">"号"</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        queue.put(b);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                        e.printStackTrace();<br>                    &#125;<br>                    System.out.println(<span class="hljs-string">"仓库中还有商品："</span> + queue.size() + <span class="hljs-string">"个"</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">2</span>; i++) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">int</span> n = queue.take();<br>                        System.out.println(<span class="hljs-string">"消费者买去了"</span> + n + <span class="hljs-string">"号商品"</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                        e.printStackTrace();<br>                    &#125;<br>                    System.out.println(<span class="hljs-string">"仓库中还有商品："</span> + queue.size() + <span class="hljs-string">"个"</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BlockingSynchronizedThread bst = <span class="hljs-keyword">new</span> BlockingSynchronizedThread();<br>        LinkBlockThread lbt = bst.<span class="hljs-keyword">new</span> LinkBlockThread();<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(lbt);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(lbt);<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用原子变量实现线程同步</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> AtomicInteger account = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AtomicInteger <span class="hljs-title">getAccount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        account.addAndGet(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="无锁，偏向锁，轻量级锁，重量级锁（synchronized优化）"><a href="#无锁，偏向锁，轻量级锁，重量级锁（synchronized优化）" class="headerlink" title="无锁，偏向锁，轻量级锁，重量级锁（synchronized优化）"></a>无锁，偏向锁，轻量级锁，重量级锁（synchronized优化）</h3><p><strong>java 对象头内容</strong></p><p>32位JVM对象头:Mark Word（标记字段）、Klass Pointer（类型指针）</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195913.png" srcset="/img/loading.gif" alt=""></p><p><strong>Mark Word</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p><p><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p><strong>Monitor(监视器)</strong></p><p>Monitor record是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p><p><strong>无锁，偏向锁，轻量级锁和重量级锁</strong></p><p>偏向锁：偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p><p>轻量级锁：是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p><p>重量级锁：若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p><p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p><h3 id="锁的区分（按照某一方面的特性）"><a href="#锁的区分（按照某一方面的特性）" class="headerlink" title="锁的区分（按照某一方面的特性）"></a>锁的区分（按照某一方面的特性）</h3><ul><li><p><strong>公平锁和非公平锁</strong></p><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p></li><li><p><strong>自旋锁和非自旋锁</strong></p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。自旋锁的实现原理同样也是CAS。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p></li><li><p><strong>共享锁和排他锁</strong></p><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p></li></ul><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p>AbstractQueuedSynchronizer(AQS)，抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它。</p><p>AQS是一个抽象类，一些锁的实现依赖于内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。</p><p>AQS维护了一个volatile int state（代表共享资源）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）</p><p>AQS的实现依赖内部的同步队列（FIFO双向队列），如果当前线程获取同步状态失败，AQS会将该线程以及等待状态等信息构造成一个Node，将其加入同步队列的尾部，同时阻塞当前线程，当同步状态释放时，唤醒队列的头节点。<br>首先来看AQS最主要的三个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<span class="hljs-comment">//头结点</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<span class="hljs-comment">//尾结点</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> state;<span class="hljs-comment">//同步状态变量</span><br></code></pre></td></tr></table></figure><p>假设state=0表示同步状态可用（如果用于锁，则表示锁可用），state=1表示同步状态已被占用（锁被占用）</p><p><strong>获取同步状态</strong></p><p>假设线程A要获取同步状态（这里想象成锁，方便理解），初始状态下state=0,所以线程A可以顺利获取锁，A获取锁后将state置为1。在A没有释放锁期间，线程B也来获取锁，此时因为state=1，表示锁被占用，所以将B的线程信息和等待状态等信息构成出一个Node节点对象，放入同步队列，head和tail分别指向队列的头部和尾部<strong>（此时队列中有一个空的Node节点作为头点，head指向这个空节点，空Node的后继节点是B对应的Node节点，tail指向它）</strong>，同时阻塞线程B(这里的阻塞使用的是LockSupport.park()方法)。后续如果再有线程要获取锁，都会加入队列尾部并阻塞。</p><p><strong>释放同步状态</strong></p><p>当线程A释放锁时，即将state置为0，此时A会唤醒头节点的后继节点（所谓唤醒，其实是调用LockSupport.unpark(B)方法），即B线程从LockSupport.park()方法返回，此时B发现state已经为0，所以B线程可以顺利获取锁，B获取锁后B的Node节点随之出队。</p><p>(注 LockSupport 实际调用的是unsafe的park和unpark方法)</p><p>主要方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">getState()<span class="hljs-comment">//获取状态</span><br>setState()<span class="hljs-comment">//设置状态</span><br>compareAndSetState()<span class="hljs-comment">//比较并设置状态，CAS</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span><span class="hljs-comment">//尝试获取互斥锁</span><br><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span><span class="hljs-comment">//尝试释放互斥锁</span><br><span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span><span class="hljs-comment">//尝试获取共享锁</span><br><span class="hljs-keyword">boolean</span> <span class="hljs-title">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span><span class="hljs-comment">//尝试释放共享锁</span><br><span class="hljs-keyword">boolean</span> <span class="hljs-title">isHeldExclusively</span><span class="hljs-params">()</span><span class="hljs-comment">//判断是否独占</span></span><br></code></pre></td></tr></table></figure><p>AQS主要使用了模板模式，使用时只要实现模板中的方法即可，自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。</p><h2 id="4-原子类"><a href="#4-原子类" class="headerlink" title="4.原子类"></a>4.原子类</h2><p><strong>基本类型</strong></p><p>使用原子的方式更新基本类型</p><ul><li>AtomicInteger：整形原子类</li><li>AtomicLong：长整型原子类</li><li>AtomicBoolean：布尔型原子类</li></ul><p><strong>数组类型</strong></p><p>使用原子的方式更新数组里的某个元素</p><ul><li>AtomicIntegerArray：整形数组原子类</li><li>AtomicLongArray：长整形数组原子类</li><li>AtomicReferenceArray：引用类型数组原子类</li></ul><p><strong>引用类型</strong></p><ul><li>AtomicReference：引用类型原子类</li><li>AtomicStampedReference：原子更新引用类型里的字段原子类</li><li>AtomicMarkableReference ：原子更新带有标记位的引用类型</li></ul><p><strong>对象的属性修改类型</strong></p><ul><li>AtomicIntegerFieldUpdater：原子更新整形字段的更新器</li><li>AtomicLongFieldUpdater：原子更新长整形字段的更新器</li><li>AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。</li></ul><h2 id="5-ThreadLocal"><a href="#5-ThreadLocal" class="headerlink" title="5.ThreadLocal"></a>5.ThreadLocal</h2><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。<strong>如果想实现每一个线程都有自己的专属本地变量该如何解决呢？</strong> JDK中提供的<code>ThreadLocal</code>类正是为了解决这样的问题。 <strong>ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</strong></p><p><strong>如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get（） 和 set（） 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</strong></p><p><code>Thread</code> 类中有一个 <code>threadLocals</code> 和 一个 <code>inheritableThreadLocals</code> 变量，它们都是 <code>ThreadLocalMap</code> 类型的变量,我们可以把 <code>ThreadLocalMap</code> 理解为<code>ThreadLocal</code> 类实现的定制化的 <code>HashMap</code>。默认情况下这两个变量都是null，只有当前线程调用 <code>ThreadLocal</code> 类的 <code>set</code>或<code>get</code>方法时才创建它们，实际上调用这两个方法的时候，我们调用的是<code>ThreadLocalMap</code>类对应的 <code>get()</code>、<code>set()</code>方法。</p><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用,而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候会 key 会被清理掉，而 value 不会被清理掉。这样一来，<code>ThreadLocalMap</code> 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后 最好手动调用<code>remove()</code>方法</p><p>强弱引用问题，在GC里面详细介绍。</p><h2 id="6-并发容器"><a href="#6-并发容器" class="headerlink" title="6.并发容器"></a>6.并发容器</h2><ul><li><strong>ConcurrentHashMap:</strong> 线程安全的HashMap</li><li><strong>CopyOnWriteArrayList:</strong> 线程安全的List，在读多写少的场合性能非常好，远远好于Vector.</li><li><strong>ConcurrentLinkedQueue:</strong> 高效的并发队列，使用链表实现。可以看做一个线程安全的 LinkedList，这是一个非阻塞队列。</li><li><strong>BlockingQueue:</strong> 这是一个接口，JDK内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。</li><li><strong>ConcurrentSkipListMap:</strong> 跳表的实现。这是一个Map，使用跳表的数据结构进行快速查找。</li></ul><h2 id="7-线程池"><a href="#7-线程池" class="headerlink" title="7.线程池"></a>7.线程池</h2><p>线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195924.png" srcset="/img/loading.gif" alt="ThreadPoolExecutor"></p><p><strong>好处：</strong></p><ul><li><strong>降低资源消耗。</strong> 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度。</strong> 当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性。</strong> 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><p><strong>线程池创建方式</strong></p><p>直接创建ThreadPoolExcutor对象</p><p>使用<strong>Executors</strong>工具类创建对应的线程池</p><p>线程池主要的参数：</p><ul><li><strong>corePoolSize：</strong>核心池的大小，这个参数与后面讲述的线程池的实现原理有非常大的关系。</li><li><strong>maximumPoolSize：</strong>线程池最大线程数，它表示在线程池中最多能创建多少个线程；</li><li><strong>keepAliveTime</strong>：表示线程没有任务执行时最多保持多久时间会终止。</li><li><strong>unit：</strong>参数keepAliveTime的时间单位，有7种取值。</li><li><strong>workQueue</strong>：一个阻塞队列，用来存储等待执行的任务，可选择类型，影响性能<ul><li>ArrayBlockingQueue;基于数组的先进先出队列，有界</li><li>LinkedBlockingQueue;基于链表的先进先出队列，无界</li><li>PriorityBlockingQueue 排序队列 无界 按照自然顺序排序，也可以冲写compareTo方法。</li><li>SynchronousQueue;无缓冲的等待队列，无界</li></ul></li><li><strong>threadFactory</strong>：线程工厂，主要用来创建线程；</li><li><strong>handler</strong>：表示当拒绝处理任务时的策略，有以下四种取值：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadPoolExecutor.AbortPolicy;<span class="hljs-comment">//丢弃任务并抛出RejectedExecutionException异常。 （默认）</span><br>ThreadPoolExecutor.DiscardPolicy;<span class="hljs-comment">//也是丢弃任务，但是不抛出异常。 </span><br>ThreadPoolExecutor.DiscardOldestPolicy;<span class="hljs-comment">//丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br>ThreadPoolExecutor.CallerRunsPolicy;<span class="hljs-comment">//由调用线程处理该任务</span><br></code></pre></td></tr></table></figure><p><strong>主要的线程池类型：</strong></p><ul><li><p><strong>FixedThreadPool</strong> ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。（固定大小）</p></li><li><p><strong>SingleThreadExecutor：</strong> 方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。（单个）</p></li><li><p><strong>CachedThreadPool：</strong> 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。（动态调整）</p></li></ul><p>三种线程池  四种拒绝策略 三种等待队列</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="/2020/01/20/%E6%A1%86%E6%9E%B6/Springboot/"/>
    <url>/2020/01/20/%E6%A1%86%E6%9E%B6/Springboot/</url>
    
    <content type="html"><![CDATA[<h2 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h2><p>Springboot 启动流程</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201009.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>框架学习 Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lombok注解详解</title>
    <link href="/2020/01/15/java/lombok/"/>
    <url>/2020/01/15/java/lombok/</url>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>一般我们使用的注解的@Retention一般为RUNTIME，对于这种注解，我们只在运行时加载，通过反射获取对应的注解值</p><p>lombok的注解采用@Retention的元注解为SOURCE，它会在编译时进行解析，采用的方式是Pluggable Annotation Processing API</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">举例来说，现在有一个实现了Pluggable Annotation Processing API的程序A，那么使用javac编译时的具体流程如下：<br><br><span class="hljs-number">1.</span> javac编译器对源码进行分析，生成一个抽象的语法树（AST)<br><br><span class="hljs-number">2.</span> javac编译器运行A程序<br><br><span class="hljs-number">3.</span> A程序完成逻辑，一般是修改此语法树<br><br><span class="hljs-number">4.</span> javac使用修改后的语法树生成可执行的字节码文件<br><br>Lomok便是通过Pluggable Annotation Processing API来实现代码生成的。<br></code></pre></td></tr></table></figure><p>关于javac</p><h3 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a>注解详解</h3><p><code>val</code>：用在局部变量前面，相当于将变量声明为final</p><p><code>@NonNull</code>：给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出NPE（NullPointerException）</p><p><code>@Cleanup</code>：自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码来关闭流</p><p><code>@Getter/@Setter</code>：用在属性上，再也不用自己手写setter和getter方法了，还可以指定访问范围</p><p><code>@ToString</code>：用在类上，可以自动覆写toString方法，当然还可以加其他参数，例如@ToString(exclude=”id”)排除id属性，或者@ToString(callSuper=true, includeFieldNames=true)调用父类的toString方法，包含所有属性</p><p><code>@EqualsAndHashCode</code>：用在类上，自动生成equals方法和hashCode方法</p><p><code>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</code>：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有@NonNull属性作为参数的构造函数，如果指定staticName = “of”参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多</p><p><code>@Data</code>：注解在类上，相当于同时使用了<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter</code>、<code>@Setter</code>和<code>@RequiredArgsConstrutor</code>这些注解，对于<code>POJO类</code>十分有用</p><p><code>@Value</code>：用在类上，是@Data的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法</p><p><code>@Builder</code>：用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用<code>Person.builder().name(&quot;Adam Savage&quot;).city(&quot;San Francisco&quot;).job(&quot;Mythbusters&quot;).job(&quot;Unchained Reaction&quot;).build();</code>更多说明参考<a href="https://projectlombok.org/features/Builder.html" target="_blank" rel="noopener">Builder</a></p><p><code>@SneakyThrows</code>：自动抛受检异常，而无需显式在方法上使用throws语句</p><p><code>@Synchronized</code>：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性<code>$lock</code>或<code>$LOCK</code>，而java中的synchronized关键字锁对象是this，锁在this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误</p><p><code>@Getter(lazy=true)</code>：可以替代经典的Double Check Lock样板代码</p><p><code>@Log</code>：根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类</p><ul><li><code>@CommonsLog</code> Creates log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</li><li><code>@Log</code> Creates log = java.util.logging.Logger.getLogger(LogExample.class.getName());</li><li><code>@Log4j</code> Creates log = org.apache.log4j.Logger.getLogger(LogExample.class);</li><li><code>@Log4j2</code> Creates log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</li><li><code>@Slf4j</code> Creates log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</li><li><code>@XSlf4j</code> Creates log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis Genrator</title>
    <link href="/2020/01/10/%E6%A1%86%E6%9E%B6/mybatisGenerator/"/>
    <url>/2020/01/10/%E6%A1%86%E6%9E%B6/mybatisGenerator/</url>
    
    <content type="html"><![CDATA[<p>MyBatis Generator是一个可以用来生成Mybatis dao,entity,Mapper文件的一个工具,在项目的过程中可以省去很多重复的工作,我们只要在MyBatis Generator的配置文件中配置好要生成的表名与包名，然后运行一条命令就会生成一堆文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span><br>  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span><br><span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置生成器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项<br>    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        <br>    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.<br>    注意，两个属性只能选址一个;<br>    <br>    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用<br>&lt;properties resource="" url="" /&gt;<br> --&gt;</span><br> <br> <span class="hljs-comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包<br>    location属性指明加载jar/zip包的全路径<br>&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;<br>  --&gt;</span><br>  <br><span class="hljs-comment">&lt;!-- <br>    context:生成一组对象的环境 <br>    id:必选，上下文id，用于在生成错误时提示<br>    defaultModelType:指定生成对象的样式<br>        1，conditional：类似hierarchical；<br>        2，flat：所有内容（主键，blob）等全部生成在一个对象中；<br>        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)<br>    targetRuntime:<br>        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；<br>        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；<br>    introspectedColumnImpl：类全限定名，用于扩展MBG<br>--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mysql"</span> <span class="hljs-attr">defaultModelType</span>=<span class="hljs-string">"hierarchical"</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">"MyBatis3Simple"</span> &gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；<br>        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖<br>     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"autoDelimitKeywords"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 生成的Java文件的编码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"javaFileEncoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 格式化java代码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"javaFormatter"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 格式化XML代码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"xmlFormatter"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"beginningDelimiter"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"`"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"endingDelimiter"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"`"</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 必须要有的，使用这个配置链接数据库<br>        @<span class="hljs-doctag">TODO:</span>是否可以扩展<br>     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span> <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">"jdbc:mysql:///pss"</span> <span class="hljs-attr">userId</span>=<span class="hljs-string">"root"</span> <span class="hljs-attr">password</span>=<span class="hljs-string">"admin"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- java类型处理器 <br>        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；<br>        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； <br>    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- <br>            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型<br>            false：默认,<br>                scale&gt;0;length&gt;18：使用BigDecimal;<br>                scale=0;length[10,18]：使用Long；<br>                scale=0;length[5,9]：使用Integer；<br>                scale=0;length&lt;5：使用Short；<br>         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"forceBigDecimals"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>    <br>    <br>    <span class="hljs-comment">&lt;!-- java模型创建器，是必须要的元素<br>        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类<br>        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；<br>        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录<br>     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">"com._520it.mybatis.domain"</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">"src/main/java"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  for MyBatis3/MyBatis3Simple<br>            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；<br>         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"constructorBased"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"enableSubPackages"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- for MyBatis3 / MyBatis3Simple<br>            是否创建一个不可变的类，如果为true，<br>            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类<br>         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"immutable"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 设置一个根对象，<br>            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项<br>            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：<br>                1，属性名相同，类型相同，有相同的getter/setter方法；<br>         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"rootClass"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"trimStrings"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>    <br>    <br>    <span class="hljs-comment">&lt;!-- 生成SQL map的XML文件生成器，<br>        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），<br>            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置<br>        targetPackage/targetProject:同javaModelGenerator<br>     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">"com._520it.mybatis.mapper"</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">"src/main/resources"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"enableSubPackages"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>    <br>    <br>    <span class="hljs-comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 <br>        targetPackage/targetProject:同javaModelGenerator<br>        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：<br>            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；<br>            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；<br>            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；<br>        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER<br>    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">"com._520it.mybatis.mapper"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"ANNOTATEDMAPPER"</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">"src/main/java"</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"enableSubPackages"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查<br>        &lt;property name="rootInterface" value=""/&gt;<br>         --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素<br>        选择的table会生成一下文件：<br>        1，SQL map文件<br>        2，生成一个主键类；<br>        3，除了BLOB和主键的其他字段的类；<br>        4，包含BLOB的类；<br>        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；<br>        6，Mapper接口（可选）<br>    <br>        tableName（必要）：要生成对象的表名；<br>        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会<br>            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：<br>            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；<br>            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；<br>            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；<br>            4，否则，使用指定的大小写格式查询；<br>        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；<br>        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；<br>        <br>        可选：<br>        1，schema：数据库的schema；<br>        2，catalog：数据库的catalog；<br>        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName<br>        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；<br>        5，enableInsert（默认true）：指定是否生成insert语句；<br>        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；<br>        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；<br>        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；<br>        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；<br>        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；<br>        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；<br>        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；<br>        13，modelType：参考context元素的defaultModelType，相当于覆盖；<br>        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）<br>        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性<br>        <br>        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；<br>     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">"userinfo"</span> &gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"constructorBased"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"ignoreQualifiersAtRuntime"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"immutable"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"modelOnly"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 <br>        &lt;property name="rootClass" value=""/&gt;<br>         --&gt;</span><br>         <br>        <span class="hljs-comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性<br>        &lt;property name="rootInterface" value=""/&gt;<br>        --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog <br>        &lt;property name="runtimeCatalog" value=""/&gt;<br>        --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema <br>        &lt;property name="runtimeSchema" value=""/&gt;<br>        --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename <br>        &lt;property name="runtimeTableName" value=""/&gt;<br>        --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；<br>            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；<br>         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"selectAllOrderByClause"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"age desc,username asc"</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"useActualColumnNames"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>        <br>        <br>        <span class="hljs-comment">&lt;!-- generatedKey用于生成生成主键的方法，<br>            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选<br>            column:主键的列名；<br>            sqlStatement：要生成的selectKey语句，有以下可选项：<br>                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()<br>                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()<br>                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1<br>                Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()<br>                HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()<br>                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1<br>                MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()<br>                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()<br>                SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY<br>                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性<br>        &lt;generatedKey column="" sqlStatement=""/&gt;<br>         --&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- <br>            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，<br>            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；<br>            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是<br>            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；<br>            <br>            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，<br>            如果使用了columnOverride元素，该属性无效；<br>            <br>        &lt;columnRenamingRule searchString="" replaceString=""/&gt;<br>         --&gt;</span><br>         <br>         <br>         <span class="hljs-comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；<br>            column:要重新设置的列名；<br>            注意，一个table元素中可以有多个columnOverride元素哈~<br>          --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">columnOverride</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"username"</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"property"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"userName"</span>/&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名<br>            &lt;property name="javaType" value=""/&gt;<br>             --&gt;</span><br>             <br>            <span class="hljs-comment">&lt;!-- jdbcType用于指定该列的JDBC类型 <br>            &lt;property name="jdbcType" value=""/&gt;<br>             --&gt;</span><br>             <br>            <span class="hljs-comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名<br>                注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler<br>                只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述<br>            &lt;property name="jdbcType" value=""/&gt;<br>            --&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false<br>            &lt;property name="delimitedColumnName" value=""/&gt;<br>             --&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">columnOverride</span>&gt;</span><br>         <br>         <span class="hljs-comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 <br>            column:指定要忽略的列的名字；<br>            delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false<br>            <br>            注意，一个table元素中可以有多个ignoreColumn元素<br>         &lt;ignoreColumn column="deptId" delimitedColumnName=""/&gt;<br>         --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java 开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习</title>
    <link href="/2020/01/10/%E6%A1%86%E6%9E%B6/Spring/"/>
    <url>/2020/01/10/%E6%A1%86%E6%9E%B6/Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring主要框架"><a href="#Spring主要框架" class="headerlink" title="Spring主要框架"></a>Spring主要框架</h2><p>核心模块：</p><ul><li><strong>spring-core</strong>模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li><strong>context</strong>模块建立在由<strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于JNDI注册的方式访问对象。Context模块继承自Bean模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过Servelet容器）等功能。Context模块也支持Java EE的功能，比如EJB、JMX和远程调用等。<strong>ApplicationContext</strong>接口是Context模块的焦点。<strong>spring-context-support</strong>提供了对第三方库集成到Spring上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li><strong>spring-expression</strong>模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是JSP2.1规范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><h2 id="Spring-容器启动过程"><a href="#Spring-容器启动过程" class="headerlink" title="Spring 容器启动过程"></a>Spring 容器启动过程</h2><ul><li><p>1、资源定位：找到配置文件（载入配置文件/Springboot采用自动扫描）</p></li><li><p>2、BeanDefinition载入和解析（解析成BeanDefiniton）</p></li><li><p>3、BeanDefinition注册（添加到map(key,Definition)）</p></li><li><p>4、bean的实例化和依赖注入(getBean()方法进行实例化)</p><p>实例化的时间点：</p><p>BeanFactory作为工厂类：在第一次使用的时候实例化</p><p>applicationContext作为容器：如果为singleton，则在容器启动的时候初始化bean并将bean放在缓存（单例池）中</p><p>如果为singleton，并且设置lazy-init(延迟加载)为true，则在第一次使用的时候实例化bean</p><p>如果为prototype</p></li></ul><h2 id="Spring-主要功能"><a href="#Spring-主要功能" class="headerlink" title="Spring 主要功能"></a>Spring 主要功能</h2><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p><strong>IOC</strong>: 控制反转<br>即控制权的转移，将我们创建对象的方式反转了,以前对象的创建是由我们开发人员自己维护,包括依赖关系也是自己注入。使用了spring之后，对象的创建以及依赖关系可以由spring完成创建以及注入，反转控制就是反转了对象的创建方式，从我们自己创建反转给了程序创建(spring)</p><p><strong>DI</strong>:  Dependency Injection  依赖注入<br>spring这个容器中，替你管理着一系列的类，前提是你需要将这些类交给spring容器进行管理，然后在你需要的时候，不是自己去定义，而是直接向spring容器索取，当spring容器知道你的需求之后，就会去它所管理的组件中进行查找，然后直接给你所需要的组件.<br>实现IOC思想需要DI做支持。<br>注入方式:   1.set方式注入    2.构造方法注入   3.字段注入<br>注入类型:   1.值类型注入      2.引用类型注入</p><p><strong>IOC 容器</strong></p><p>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。是Spring框架的核心。Spring提供了两种不同的容器：Spring BeanFactory 容器（它是最简单的容器，给 DI 提供了基本的支持）和Spring ApplicationContext 容器（该容器添加了更多的企业特定的功能，例如从一个属性文件中解析文本信息的能力，发布应用程序事件给感兴趣的事件监听器的能力。）。</p><p><strong>对象的创建时间</strong>：正常在容器初始化的时候进行创建，设置了lazy-init时，在getbean的时候进行创建。</p><h4 id="Spring-BeanFactory-容器"><a href="#Spring-BeanFactory-容器" class="headerlink" title="Spring BeanFactory 容器"></a>Spring BeanFactory 容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在Bean中配置bean的内容</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainApp</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      XmlBeanFactory factory = <span class="hljs-keyword">new</span> XmlBeanFactory<br>                             (<span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">"Beans.xml"</span>));<br>       <span class="hljs-comment">//使用ClassPathResource去读取XML文件，再调用XmlBeanFactory去生成BeanFactory</span><br>      HelloWorld obj = (HelloWorld) factory.getBean(<span class="hljs-string">"helloWorld"</span>);<span class="hljs-comment">//获取bean对象</span><br>      obj.getMessage();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Application Context 是 BeanFactory 的子接口，也被成为 Spring 上下文。</p><p>Application Context 是 spring 中较高级的容器。ApplicationContext 包含 BeanFactory 所有的功能。</p><ul><li><strong>FileSystemXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你需要提供给构造器 XML 文件的完整路径。</li><li><strong>ClassPathXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</li><li><strong>WebXmlApplicationContext</strong>：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br>第一步生成工厂对象。加载完指定路径下 bean 配置文件后，利用框架提供的 FileSystemXmlApplicationContext API 去生成工厂 bean。FileSystemXmlApplicationContext 负责生成和初始化所有的对象，比如，所有在 XML bean 配置文件中的 bean。<br><br>第二步利用第一步生成的上下文中的 getBean() 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID 来返回一个真正的对象。一旦得到这个对象，就可以利用这个对象来调用任何方法。<br>*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainApp</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      ApplicationContext context = <span class="hljs-keyword">new</span> FileSystemXmlApplicationContext<br>            (<span class="hljs-string">"Beans.xml"</span>);<br>      HelloWorld obj = (HelloWorld) context.getBean(<span class="hljs-string">"helloWorld"</span>);<br>      obj.getMessage();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Spring-配置元数据"><a href="#Spring-配置元数据" class="headerlink" title="Spring 配置元数据"></a>Spring 配置元数据</h4><p>配置元数据：bean 定义包含称为<strong>配置元数据</strong>的信息，下述容器也需要知道配置元数据：</p><ul><li>如何创建一个 bean</li><li>bean 的生命周期的详细信息</li><li>bean 的依赖关系</li></ul><p>提供配置元数据给Spring的方法：</p><ul><li>基于 XML 的配置文件</li><li>基于注解的配置</li><li>基于 Java 的配置</li></ul><h4 id="Spring-bean作用域："><a href="#Spring-bean作用域：" class="headerlink" title="Spring bean作用域："></a><strong>Spring bean作用域：</strong></h4><p>singleton(容器中只有一个实例存在，单例模式实现)，prototype(每次都返回一个新的实例)，request(每次Http请求创建新的bean)，session(同一个HTTP Session共享一个Bean，不同Session使用不同的Bean),global-session(global session作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。)，默认为singleton，可采用@Scope注解或者xml里面的scope属性进行修改。</p><p><strong>Bean生命周期</strong></p><p>Bean的生命周期可以表达为：Bean的定义——Bean的初始化——Bean的使用——Bean的销毁</p><p>在bean初始化前后进行操作<br>第一种：通过@PostConstruct 和 @PreDestroy 方法 实现初始化和销毁bean之前进行的操作<br>第二种是：通过 在xml中定义init-method 和  destory-method方法<br>第三种是： 通过bean实现InitializingBean和 DisposableBean接口</p><p>Constructor &gt; @PostConstruct &gt; InitializingBean &gt; init-method</p><p><strong>后置处理器</strong></p><p>BeanPostProcessor,实现postProcessBeforeInitialization和postProcessAfterInitialization方法来实现bean初始化之前和之后的逻辑。</p><h4 id="beanFactory-和FactoryBean"><a href="#beanFactory-和FactoryBean" class="headerlink" title="beanFactory 和FactoryBean"></a>beanFactory 和FactoryBean</h4><p>beanFactory是Spring容器的一个组件，负责来构建Bean的一个工厂，而FactoryBean则表示，要创建的这个bean是一个工厂类，用来生产其他bean的。</p><h4 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h4><p>基于构造函数进行注入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- Definition for textEditor bean --&gt;<br>&lt;bean id="textEditor" class="com.tutorialspoint.TextEditor"&gt;<br>   &lt;constructor-arg ref="spellChecker"/&gt;<br>&lt;/bean&gt;<br><br>&lt;!-- Definition for spellChecker bean --&gt;<br>&lt;bean id="spellChecker" class="com.tutorialspoint.SpellChecker"&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>也可以使用p-namespace注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">"bar"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"x.y.Bar"</span>/&gt;<br>&lt;bean id=<span class="hljs-string">"baz"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"x.y.Baz"</span>/&gt;<br>&lt;bean id=<span class="hljs-string">"foo"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"x.y.Foo"</span> c:bar-ref=<span class="hljs-string">"bar"</span> c:baz-ref=<span class="hljs-string">"baz"</span> c:email=<span class="hljs-string">"foo@bar.com"</span>/&gt;<br></code></pre></td></tr></table></figure><p>基于设值函数进行注入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">   &lt;!-- Definition for textEditor bean --&gt;<br>   &lt;bean id="textEditor" class="com.tutorialspoint.TextEditor"&gt;<br>      &lt;property name="spellChecker" ref="spellChecker"/&gt;<br>   &lt;/bean&gt;<br>//基于值注入<br>   &lt;!-- Definition for spellChecker bean --&gt;<br>   &lt;bean id="spellChecker" class="com.tutorialspoint.SpellChecker"&gt;<br>   &lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>也可以使用p-namespace注入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id="john-classic" class="com.example.Person"<br>   p:name="John Doe"<br>   p:spouse-ref="jane"/&gt;<br>&lt;/bean&gt;<br><br>&lt;bean name="jane" class="com.example.Person"<br>   p:name="John Doe"/&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h4 id="Spring-中的事件处理"><a href="#Spring-中的事件处理" class="headerlink" title="Spring 中的事件处理"></a>Spring 中的事件处理</h4><p><strong>ContextRefreshedEvent</strong> ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。<br><strong>ContextStartedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。<br><strong>ContextStoppedEvent</strong> 当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作<br> <strong>ContextClosedEvent</strong> 当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。<br><strong>RequestHandledEvent</strong> 这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</p><p>通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。</p><p>若Bean实现了ApplicationListener 接口，并注册了，则在对应事件发生时，会通知该bean，即该Bean会监听事件。</p><p><strong>自定义事件：</strong>通过继承ApplicationEvent接口自定义事件，同时还需要实现ApplicationEventPublisherAware接口来触发自定义的事件。</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP 即 Aspect Oriented Program 面向切面编程，将相同逻辑的重复代码横向抽取出来，使用动态代理技术将这些重复代码织入到目标对象方法中，实现和原来一样的功能。</p><p>Spring AOP实现原理，如果目标类是接口则使用JDK动态代理技术，否则则使用Cglib进行代理</p><p>AspectJ是<strong>语言级别</strong>的AOP实现，扩展了Java语言，定义了AOP语法，能够在<strong>编译期</strong>提供横切代码的织入，所以它有<strong>专门的编译器</strong>用来生成遵守Java字节码规范的Class文件。</p><p><strong>相关术语：</strong></p><p>1、<strong>Advice</strong> 表示通知。是切面的具体实现方法：前置增强、后置增强、环绕增强、异常抛出增强、最终增强等类型<br>2、<strong>切入点</strong> 筛选出的连接点<br>3、<strong>连接点</strong> 允许进行通知的地方，方法的前后等<br>4、<strong>切面</strong> 切入点和通知的结合就是切面，在特定的切入点上实现特定的功能。<br>5、<strong>目标对象</strong> 就是要被通知的对象，也就是真正的业务逻辑<br>6、<strong>AOP代理</strong> AOP框架创建的对象，包含通知。<br>7、<strong>织入</strong> 把切面应用到目标对象上构建新的代理对象的过程</p><p>Spring提供了3种类型的AOP支持：</p><ul><li><p>基于代理的经典SpringAOP</p><ul><li>需要实现接口，手动创建代理（目前已经不建议使用）</li></ul></li><li><p>纯POJO切面</p><ul><li>使用XML配置，aop命名空间</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;aop:config&gt;<br>   &lt;aop:aspect id="myAspect" ref="aBean"&gt;<br>      &lt;aop:pointcut id="businessService"<br>         expression="execution(* com.xyz.myapp.service.*.*(..))"/&gt;<br>      &lt;!-- a before advice definition --&gt;<br>      &lt;aop:before pointcut-ref="businessService" <br>         method="doRequiredTask"/&gt;<br>      &lt;!-- an after advice definition --&gt;<br>      &lt;aop:after pointcut-ref="businessService" <br>         method="doRequiredTask"/&gt;<br>      &lt;!-- an after-returning advice definition --&gt;<br>      &lt;!--The doRequiredTask method must have parameter named retVal --&gt;<br>      &lt;aop:after-returning pointcut-ref="businessService"<br>         returning="retVal"<br>         method="doRequiredTask"/&gt;<br>      &lt;!-- an after-throwing advice definition --&gt;<br>      &lt;!--The doRequiredTask method must have parameter named ex --&gt;<br>      &lt;aop:after-throwing pointcut-ref="businessService"<br>         throwing="ex"<br>         method="doRequiredTask"/&gt;<br>      &lt;!-- an around advice definition --&gt;<br>      &lt;aop:around pointcut-ref="businessService" <br>         method="doRequiredTask"/&gt;<br>   ...<br>   &lt;/aop:aspect&gt;<br>&lt;/aop:config&gt;<br>&lt;bean id="aBean" class="..."&gt;<br>...<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure></li><li><p>@AspectJ注解驱动的切面</p><ul><li>使用注解的方式，这是最简洁和最方便的！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//xml文件里开启对应的aspectj注解</span><br>&lt;aop:aspectj-autoproxy/&gt;<br><span class="hljs-comment">//切面逻辑</span><br><span class="hljs-meta">@Aspect</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SleepHelper</span> </span>&#123;   <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SleepHelper</span><span class="hljs-params">()</span></span>&#123;         <br> <br>    &#125;   <br>    <br>    <span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">"execution(* *.sleep())"</span>)   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleeppoint</span><span class="hljs-params">()</span></span>&#123;&#125;   <br> <br> <br>    <span class="hljs-meta">@Before</span>(<span class="hljs-string">"sleeppoint()"</span>)   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeSleep</span><span class="hljs-params">()</span></span>&#123;   <br> <br>        System.out.println(<span class="hljs-string">"睡觉前要脱衣服!"</span>);   <br> <br>    &#125;   <br> <br>      <br>    <span class="hljs-meta">@AfterReturning</span>(<span class="hljs-string">"sleeppoint()"</span>)   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterSleep</span><span class="hljs-params">()</span></span>&#123;   <br> <br>        System.out.println(<span class="hljs-string">"睡醒了要穿衣服！"</span>);   <br> <br>    &#125;   <br> <br>&#125;<br></code></pre></td></tr></table></figure><p>Spring只使用了aspectJ的注解，并不需要引入aspecJ的其他依赖。</p></li></ul><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">execution(<span class="hljs-tag">&lt;<span class="hljs-name">修饰符模式</span>&gt;</span>? <span class="hljs-tag">&lt;<span class="hljs-name">返回类型模式</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">方法名模式</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">参数模式</span>&gt;</span>) <span class="hljs-tag">&lt;<span class="hljs-name">异常模式</span>&gt;</span>?)<br></code></pre></td></tr></table></figure><p>除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。</p><p>修饰符模式指的是public、private、protected，异常模式指的是NullPointException等。</p><p><strong>通配符</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">*`通配符，该通配符主要用于匹配单个单词，或者是以某个词为前缀或后缀的单词。<br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">.. 通配符，该通配符表示<span class="hljs-number">0</span>个或多个项，主要用于declaring-type-<span class="hljs-built_in">pattern</span>和param-<span class="hljs-built_in">pattern</span>中，如果用于declaring-type-<span class="hljs-built_in">pattern</span>中，则表示匹配当前包及其子包，如果用于param-<span class="hljs-built_in">pattern</span>中，则表示匹配<span class="hljs-number">0</span>个或多个参数。<br></code></pre></td></tr></table></figure><p>可以使用&amp;&amp;、||、!、三种运算符来组合切点表达式，表示与或非的关系。</p><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h3><p>流程说明：</p><p>（1）客户端（浏览器）发送请求，直接请求到DispatcherServlet（前端控制器）。</p><p>（2）DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler。</p><p>（3）解析到对应的Handler后，开始由HandlerAdapter适配器处理。</p><p>（4）HandlerAdapter会根据Handler来调用真正的处理器开处理请求，并处理相应的业务逻辑。</p><p>（5）处理器处理完业务后，会返回一个ModelAndView对象，Model是返回的数据对象，View是个逻辑上的View。</p><p>（6）ViewResolver会根据逻辑View查找实际的View。</p><p>（7）DispaterServlet把返回的Model传给View。</p><p>（8）通过View返回给请求者（浏览器）</p><h3 id="SpringMVC-拦截器和过滤器"><a href="#SpringMVC-拦截器和过滤器" class="headerlink" title="SpringMVC 拦截器和过滤器"></a>SpringMVC 拦截器和过滤器</h3><p>Fliter依赖Servlet，Interceptor 依赖框架</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p><em>@Autowired Spring</em> 容器查找并注入一个bean对象 按类去匹配</p><p>@Required 注释应用于 bean 属性的 setter 方法</p><p><em>@Qualifier</em> 指定注入一个bean对象 按名字去匹配</p><p><em>@Resource</em><br>(1) @Resource后面没有任何内容，默认通过name属性去匹配bean，找不到再按type去匹配<br>(2) 指定了name或者type则根据指定的类型去匹配bean<br>(3) 指定了name和type则根据指定的name和type去匹配bean，任何一个不匹配都将报错</p><p><em>@Configuration</em>  带有 @Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源</p><p>@import 注解允许从另一个配置类中加载 @Bean 定义。</p><p><em>@Bean</em>  @Bean 注解告诉 Spring，一个 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。 </p><p><em>@Scope</em>(“”)设置bean的作用域</p><p><em>@Component/@Repository/@Service/@Controller</em><br>Component 通用bean<br>Repository 对应数据访问层Bean<br>Service 对应业务逻辑层bean<br>Controller 对应表现层的Bean</p><p>@refrence与@resource </p><p>@ComponentScan 启动组件扫描，默认扫描同一包下的组件</p><p>前者是dubbo注解，后者是spring 的。后者@resource很简单就是注入资源，与@Autowired比较接近，只不过是按照变量名（beanid）注入。@reference也是注入，但是一般用来注入分布式的远程服务对象，需要配合dubbo配置使用。他们的区别就是一个是本地spring容器，另一个是把远程服务对象当做spring容器中的对象一样注入。</p><h2 id="java注解"><a href="#java注解" class="headerlink" title="java注解"></a>java注解</h2><p>注解定义，注解是什么</p><p>源代码的元数据，代码标签，</p><p>附属品依赖于其他元素（方法，类，属性）</p><p>本身没有任何作用，由外部程序解析产生作用</p><p>注解携带的信息，对于不同修饰的对象有不同的意义，对于类而言，注解相当于类实现的一个接口，对于方法而言，注解相当于一个变量，对于属性而言，注解相当于一个值。</p><h2 id="Spring-设计模式"><a href="#Spring-设计模式" class="headerlink" title="Spring 设计模式"></a>Spring 设计模式</h2><ul><li><p>工厂模式</p><p>使用beanFactory，ApplicationContext创建对象</p></li><li><p>单例模式</p><p>默认的bean都是创建单例的，bean的其他作用域，prototype，request，session，global-session</p></li><li><p>代理模式</p><p>SpringAOP使用的是动态代理，如果需要代理的对象是基于接口的，则使用JDK代理，如果是没有实现接口的对象则使用cglib进行代理。</p></li><li><p>模板模式</p><p>spring提供了jdbcTemplate使用了模板模式。</p></li><li><p>观察者模式</p><p>spring的event机制和监听机制是观察者模式的实现</p></li><li><p>适配器</p></li><li><p>装饰者</p></li></ul><h2 id="Spring-三级缓存"><a href="#Spring-三级缓存" class="headerlink" title="Spring 三级缓存"></a>Spring 三级缓存</h2>]]></content>
    
    
    
    <tags>
      
      <tag>框架学习 Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML类图</title>
    <link href="/2020/01/01/%E5%85%B6%E4%BB%96/UML%E7%B1%BB%E5%9B%BE/"/>
    <url>/2020/01/01/%E5%85%B6%E4%BB%96/UML%E7%B1%BB%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="UML类图的元素"><a href="#UML类图的元素" class="headerlink" title="UML类图的元素"></a>UML类图的元素</h3><h4 id="1-类"><a href="#1-类" class="headerlink" title="1.类"></a>1.类</h4><p>类包括：类的属性和类的方法（抽象方法用斜体表示）</p><p>还有作用域 + public -private # protected</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201424.png" srcset="/img/loading.gif" alt=""></p><h4 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h4><p>接口是特殊的类，只可以被实现，不可以被实例化。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201429.png" srcset="/img/loading.gif" alt=""></p><h4 id="3-类之间的关系"><a href="#3-类之间的关系" class="headerlink" title="3.类之间的关系"></a>3.类之间的关系</h4><h5 id="实线三角指向父类（泛化）"><a href="#实线三角指向父类（泛化）" class="headerlink" title="实线三角指向父类（泛化）"></a><strong>实线三角指向父类</strong>（泛化）</h5><p>代码实现:子类继承父类</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201434.png" srcset="/img/loading.gif" alt=""></p><h5 id="虚线三角指向接口（实现）"><a href="#虚线三角指向接口（实现）" class="headerlink" title="虚线三角指向接口（实现）"></a><strong>虚线三角指向接口</strong>（实现）</h5><p>代码实现：接口实现</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201446.png" srcset="/img/loading.gif" alt=""></p><h5 id="空心菱形能分离而独立存在-聚合"><a href="#空心菱形能分离而独立存在-聚合" class="headerlink" title="空心菱形能分离而独立存在(聚合)"></a><strong>空心菱形能分离而独立存在(聚合)</strong></h5><p>代码实现：成员变量，个体可以独立于整体存在，菱形在整体对象一侧。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201451.png" srcset="/img/loading.gif" alt=""></p><h5 id="实心菱形精密关联不可分，组合"><a href="#实心菱形精密关联不可分，组合" class="headerlink" title="实心菱形精密关联不可分，组合"></a><strong>实心菱形精密关联不可分，组合</strong></h5><p>代码实现：成员变量，个体依赖于整体存在，菱形在整体侧。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201500.png" srcset="/img/loading.gif" alt=""></p><hr><h5 id="实线箭头指向关联"><a href="#实线箭头指向关联" class="headerlink" title="实线箭头指向关联"></a><strong>实线箭头指向关联</strong></h5><p>代码实现：成员变量，可以有多对多和一对一，一对多的关系，是一个类可以拥有另一个类的方法和特性</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201505.png" srcset="/img/loading.gif" alt=""></p><h5 id="虚线箭头指向依赖"><a href="#虚线箭头指向依赖" class="headerlink" title="虚线箭头指向依赖"></a><strong>虚线箭头指向依赖</strong></h5><p>代码实现：一个类使用另一个类作为局部变量，方法的参数或者调用的</p><p>箭头指向被调用的对象</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201509.png" srcset="/img/loading.gif" alt=""></p><p>聚合和组合的联系与区别：</p><p>都是关联关系，都可以表示整体与部分的关系，而聚合的部分对象是可以独立于整体存在的，组合的部分对象是无法独立于对象存在的，只有组成了整体，部分才有意义。</p>]]></content>
    
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo学习</title>
    <link href="/2019/12/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/dubbo/"/>
    <url>/2019/12/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/dubbo/</url>
    
    <content type="html"><![CDATA[<h2 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC 框架，它提供了三大核心能力：</p><ul><li><p>面向接口的远程方法调用</p></li><li><p>智能容错和负载均衡</p></li><li><p>服务自动注册和发现</p></li></ul><p>简单来说 Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。</p><h2 id="RPC原理"><a href="#RPC原理" class="headerlink" title="RPC原理"></a>RPC原理</h2><p>RPC定义：远程过程调用，是一种网络协议，他允许运行于一台计算机的程序去调用运行于另一台计算机的程序。而开发人员无需为这个过程额外编写代码。（对于java而言可以理解为调用远程服务器上的方法）。类似于java的RMI(远程方法调用)</p><p>RPC调用过程时序图</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200904.png" srcset="/img/loading.gif" alt=""></p><h3 id="soa架构"><a href="#soa架构" class="headerlink" title="soa架构"></a>soa架构</h3><p>dubbo和soa架构(Service Oriented Architecture 面向服务的架构)的流行有很大的关系</p><p>soa架构图</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200911.png" srcset="/img/loading.gif" alt=""></p><p><strong>上述节点简单说明：</strong></p><ul><li><strong>Provider：</strong> 暴露服务的服务提供方</li><li><strong>Consumer：</strong> 调用远程服务的服务消费方</li><li><strong>Registry：</strong> 服务注册与发现的注册中心</li><li><strong>Monitor：</strong> 统计服务的调用次数和调用时间的监控中心</li><li><strong>Container：</strong> 服务运行容器</li></ul><p><strong>调用关系说明：</strong></p><ol><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h3 id="dubbo架构"><a href="#dubbo架构" class="headerlink" title="dubbo架构"></a>dubbo架构</h3><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200928.jpg" srcset="/img/loading.gif" alt=""></p><p>每层具体结构解析</p><ol><li>服务接口层（Service）：该层是与实际业务逻辑相关的，根据服务提供方和服务消费方的业务设计对应的接口和实现。</li><li>配置层（Config）：对外配置接口，以ServiceConfig和ReferenceConfig为中心，可以直接new配置类，也可以通过spring解析配置生成配置类。</li><li>服务代理层（Proxy）：服务接口透明代理，生成服务的客户端Stub和服务器端Skeleton，以ServiceProxy为中心，扩展接口为ProxyFactory。</li><li>服务注册层（Registry）：封装服务地址的注册与发现，以服务URL为中心，扩展接口为RegistryFactory、Registry和RegistryService。可能没有服务注册中心，此时服务提供方直接暴露服务。</li><li>集群层（Cluster）：封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster、Directory、Router和LoadBalance。将多个服务提供方组合为一个服务提供方，实现对服务消费方来透明，只需要与一个服务提供方进行交互。</li><li>监控层（Monitor）：RPC调用次数和调用时间监控，以Statistics为中心，扩展接口为MonitorFactory、Monitor和MonitorService。</li><li>远程调用层（Protocol）：封将RPC调用，以Invocation和Result为中心，扩展接口为Protocol、Invoker和Exporter。Protocol是服务域，它是Invoker暴露和引用的主功能入口，它负责Invoker的生命周期管理。Invoker是实体域，它是Dubbo的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起invoke调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</li><li>信息交换层（Exchange）：封装请求响应模式，同步转异步，以Request和Response为中心，扩展接口为Exchanger、ExchangeChannel、ExchangeClient和ExchangeServer。</li><li>网络传输层（Transport）：抽象mina和netty为统一接口，以Message为中心，扩展接口为Channel、Transporter、Client、Server和Codec。</li><li>数据序列化层（Serialize）：可复用的一些工具，扩展接口为Serialization、 ObjectInput、ObjectOutput和ThreadPool。</li></ol><h3 id="负载均衡策略："><a href="#负载均衡策略：" class="headerlink" title="负载均衡策略："></a>负载均衡策略：</h3><ol><li><h4 id="Random-LoadBalance-默认，基于权重的随机负载均衡机制"><a href="#Random-LoadBalance-默认，基于权重的随机负载均衡机制" class="headerlink" title="Random LoadBalance(默认，基于权重的随机负载均衡机制)"></a>Random LoadBalance(默认，基于权重的随机负载均衡机制)</h4></li><li><h4 id="RoundRobin-LoadBalance-不推荐，基于权重的轮询负载均衡机制"><a href="#RoundRobin-LoadBalance-不推荐，基于权重的轮询负载均衡机制" class="headerlink" title="RoundRobin LoadBalance(不推荐，基于权重的轮询负载均衡机制)"></a>RoundRobin LoadBalance(不推荐，基于权重的轮询负载均衡机制)</h4></li><li><h4 id="LeastActive-LoadBalance-最少活跃调用数负载均衡机制"><a href="#LeastActive-LoadBalance-最少活跃调用数负载均衡机制" class="headerlink" title="LeastActive LoadBalance(最少活跃调用数负载均衡机制)"></a>LeastActive LoadBalance(最少活跃调用数负载均衡机制)</h4></li><li><h4 id="ConsistentHash-LoadBalance-一致性hash均衡策略"><a href="#ConsistentHash-LoadBalance-一致性hash均衡策略" class="headerlink" title="ConsistentHash LoadBalance(一致性hash均衡策略)"></a>ConsistentHash LoadBalance(一致性hash均衡策略)</h4></li></ol><h3 id="Dubbo服务调用过程"><a href="#Dubbo服务调用过程" class="headerlink" title="Dubbo服务调用过程"></a>Dubbo服务调用过程</h3><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200936.jpg" srcset="/img/loading.gif" alt=""></p><p>首先服务消费者通过代理对象 Proxy 发起远程调用，接着通过网络客户端 Client 将编码后的请求发送给服务提供方的网络层上，也就是 Server。Server 在收到请求后，首先要做的事情是对数据包进行解码。然后将解码后的请求发送至分发器 Dispatcher，再由分发器将请求派发到指定的线程池上，最后由线程池调用具体的服务。这就是一个远程调用请求的发送与接收过程。至于响应的发送与接收过程，这张图中没有表现出来。对于这两个过程，我们也会进行详细分析。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java 中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统一致性协议</title>
    <link href="/2019/12/04/%E5%85%B6%E4%BB%96/%E4%B8%80%E8%87%B4%E6%80%A7%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/"/>
    <url>/2019/12/04/%E5%85%B6%E4%BB%96/%E4%B8%80%E8%87%B4%E6%80%A7%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>为了解决分布式系统的一致性问题，在长期的探索研究过程中，涌现出了一大批经典的一致性协议和算法，其中最著名的就是二阶段提交协议、三阶段提交协议和Paxos算法。</p><h2 id="2PC与3PC"><a href="#2PC与3PC" class="headerlink" title="2PC与3PC"></a>2PC与3PC</h2><p>在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。<strong>因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的ACID特性，就需要引入一个称为”协调者“的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为“参与者”。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交</strong>。基于这个思想，衍生出了二阶段提交和三阶段提交两种协议。</p><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><p>2PC，是Two-Phase Commit的缩写，即二阶段提交，是计算机网络尤其是在数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务处理过程中能够保持原子性和一致性而设计的一种算法。通常，二阶段提交协议也被认为是一种强一致性协议，用来保证分布式系统数据的一致性。</p><h4 id="2PC执行流程"><a href="#2PC执行流程" class="headerlink" title="2PC执行流程"></a>2PC执行流程</h4><p>二阶段提交协议是将事务的提交过程拆分成了两个阶段来进行处理，其执行流程如下：</p><h5 id="阶段一：提交事务请求"><a href="#阶段一：提交事务请求" class="headerlink" title="阶段一：提交事务请求"></a>阶段一：提交事务请求</h5><blockquote><p>1、事务询问</p><p>协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者响应。</p><p>2、执行事务</p><p>各参与者节点执行事务操作，并将Undo和Redo信息记入事务日志中。</p><p>3、各参与者向协调者反馈事务询问的响应</p><p>如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者No响应，表示事务不可以执行。</p></blockquote><h5 id="阶段二：执行事务提交"><a href="#阶段二：执行事务提交" class="headerlink" title="阶段二：执行事务提交"></a>阶段二：执行事务提交</h5><p>协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：</p><p><strong>执行事务提交：假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务提交</strong>。</p><blockquote><p>1、 发送提交请求</p><p>协调者向所有参与者节点发出Commit请求。</p><p>2、事务提交</p><p>参与者接收到Commit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</p><p>3、 反馈事务提交结果</p><p>参与者在完成事务提交之后，向协调者发送Ack消息。</p><p>4、完成事务</p><p>协调者接收到所有参与者反馈的Ack消息后，完成事务。</p></blockquote><p><strong>中断事务：假如任何一个参与者向协调者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务</strong>。</p><blockquote><p>1、发送回滚请求</p><p>协调者向所有参与者节点发出Rollback请求。</p><p>2、事务回滚</p><p>参与者接收到Rollback请求后，会利用其在阶段一中记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</p><p>3、反馈事务回滚结果</p><p>参与者在完成事务回滚之后，向协调者发送Ack消息。</p><p>4、中断事务</p><p>协调者接收到所有参与者反馈的Ack消息后，完成事务中断。</p></blockquote><p>简单地讲，二阶段提交将一个事务的处理过程分为了投票和执行两个阶段，其核心是对每个事务都采用先尝试后提交的处理方式，因此也可以将二阶段提交看作一个强一致性的算法。</p><h4 id="2PC存在的问题"><a href="#2PC存在的问题" class="headerlink" title="2PC存在的问题"></a>2PC存在的问题</h4><p>1、同步阻塞</p><p>在执行过程中，所有参与该事务操作的逻辑都处理于阻塞状态。即节点之间在等待对方的相应消息时，它将什么也做不了。特别是，当一个节点在已经占有了某项资源的情况下，为了等待其他节点的响应消息而陷入阻塞状态时，当第三个节点尝试访问该节点占有的资源时，这个节点也将连带陷入阻塞状态。</p><p>2、 单点问题</p><p>一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在阶段二中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完成事务操作。</p><p>3、 数据不一致</p><p>当协调者向所有的参与者发送Commit请求之后发生了局部网络异常或者是协调者在尚未发送完Commit请求之前自身发生了崩贵，导致最终只有部分参与者收到了Commit请求，于是整个分布式系统便出现了数据不一致性现象。</p><p>3、太过保守</p><p>二阶段提交没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</p><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><p>3PC，是Three-Phase Commit的缩写，即三阶段提交，是2PC的改进版。由CanCommit、PreCommit和doCommit三个阶段组成的事务处理协议。</p><h4 id="3PC执行流程"><a href="#3PC执行流程" class="headerlink" title="3PC执行流程"></a>3PC执行流程</h4><h5 id="阶段一：CanCommit"><a href="#阶段一：CanCommit" class="headerlink" title="阶段一：CanCommit"></a>阶段一：CanCommit</h5><blockquote><p>1、事务询问。</p><p>协调者向所有的参与者发送一个包含事务内容的canCommit请求，询问是否可以执行事务提交操作，并开始等待各参与者的响应。</p><p>2、各参与者向协调者反馈事务询问的响应。</p><p>参与者在接收到来自协调者的canCommit请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈Yes响应，并进入预备状态，否则反馈No响应。</p></blockquote><h5 id="阶段二：PreCommit"><a href="#阶段二：PreCommit" class="headerlink" title="阶段二：PreCommit"></a>阶段二：PreCommit</h5><p>协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：</p><p><strong>执行事务预提交；假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</strong></p><blockquote><p>1、发送预提交请求</p><p>协调者向所有参与者节点出preCommit的请求，并进入prepared阶段。</p><p>2、事务预提交</p><p>参与者接收到preCommit请求后，会执行事务操作，并将Undo和Redo信息记录到事务日志中。</p><p>3、各参与者向协调者反馈事务执行的响应</p><p>如果参与者成功执行了事务操作，那么就会反馈给协调者Ack响应，同时等待最终的指令：提交（commit）或中止（abort）。</p></blockquote><p><strong>中断事务：假如任何一个参与者向协调者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有者的反馈响应，那么就会中断事务。</strong>。</p><blockquote><p>1、发送中断请求</p><p>协调者向所有参与者节点发生abort请求。</p><p>2、中断事务</p><p>无论是收到来自协调者的abort请求，或者是在等待协调者请求过程中出现超时，参与者都会中断事务。</p></blockquote><h5 id="阶段三：doCommit"><a href="#阶段三：doCommit" class="headerlink" title="阶段三：doCommit"></a>阶段三：doCommit</h5><p>该阶段将进行真正的事务提交，会存在以下两种可能的情况。</p><p><strong>执行提交</strong></p><blockquote><p>1、发送提交请求</p><p>进入这一阶段，假如协调者处于正常状态，并且它接收到了来自所有参与者的Ack响应，那么它将从“预提交”状态转换到“提交”状态，并向所有参与者发送doCommit请求。</p><p>2、事务提交</p><p>参与者接收到doCommit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</p><p>3、反馈事务提交结果</p><p>参与者在完成事务提交之后，向协调者发送Ack消息。</p><p>4、完成事务</p><p>协调者接收到所有参与者反馈的Ack消息后，完成事务。</p></blockquote><p><strong>中断事务</strong></p><p>进入这一阶段，假设协调者处于正常工作状态，并且有任意一个参与者向协调者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应。</p><blockquote><p>1、发送中断请求</p><p>协调者向所有的参与者节点发送abort请求。</p><p>2、事务回滚</p><p>参与者接收到abort请求后，会利用其在阶段二中记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</p><p>3、反馈事务回滚结果</p><p>参与者在完成事务会滚之后，向协调者发送Ack消息。</p><p>4、中断事务</p><p>协调者接收到所有参与者反馈的Ack消息后，中断事务。</p></blockquote><p>在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者abort请求时，在等待超时之后，会继续进行事务的提交。即当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到协调者的doCommit或者abort请求，但事务仍然会提交。</p><h4 id="3PC存在的问题"><a href="#3PC存在的问题" class="headerlink" title="3PC存在的问题"></a>3PC存在的问题</h4><p>三阶段提交协议与两阶段提交协议有两个主要的不同：</p><ul><li>增加了一个询问阶段，询问阶段可以确保尽可能早的发现无法执行操作而需要中止的行为，但是它并不能发现所有的这种行为，只会减少这种情况的发生。</li><li>在准备阶段以后，协调者和参与者执行的任务中都增加了超时，一旦超时，协调者和参与者都继续提交事务，默认为成功，这也是根据概率统计上超时后默认成功的正确性最大。</li></ul><p>三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到preCommit消息后，如果网络出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致性。</p><h2 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h2><p>Paxos算法是一种基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>在古希腊的有一个叫做Paxos的小岛，岛上采用会议的形式来通过法令，议会中的议员通过信使进行消息的传递。值得注意的是，议员和信使都是兼职的，他们随时有可能会离开议会厅，并且信使可能会重复的传递信息，也可能一去不复返。因此，议会协议要保证在这个情况下法令仍然能够正确的产生，并且不会出现冲突。</p></blockquote><p>首先将议员的角色分为Proposer，Acceptor，和Learner（允许身兼数职）。Proposer提出提案，提案信息包括提案编号和提议的value；Acceptor收到提案后可以接受（accept）提案，如果提案获得多数Acceptors的接受，则称该提案被批准（chosen）；Learner只能“学习”被批准的提案。划分角色后，就可以更精确的定义问题：</p><ol><li>决议（value）只有在被Proposers提出后才能被批准（未经批准的决议称为“提案”（proposal）；</li><li>在一次Paxos算法的执行实例中，只批准（chosen）一个value；</li><li>learners只能获得被批准（chosen）的value。</li></ol><p>由上面的三个语义可演化为下面几个约束：</p><blockquote><p>P1：一个Acceptor必须接受（accept）第一次收到的提案。</p><p>P2：一旦一个具有value v的提案被批准（chosen），那么之后批准（chosen）的提案必须具有value v。</p><p>P2a：一旦一个具有value v的提案被批准（chosen），那么之后任何Acceptor再次接受（accept）的提案必须具有value v。</p><p>P2b：一旦一个具有value v的提案被批准（chosen），那么以后任何Proposer提出的提案必须具有value v。</p><p>P2c：如果一个编号为n的提案具有value v，那么存在一个多数派，要么他们中所有人都没有接受（accept）编号小于n的任何提案，要么他们已经接受（accept）的所有编号小于n的提案中编号最大的那个提案具有value v。</p><p>P1a：当且仅当Acceptor没有回应过编号大于n的prepare请求时，Acceptor接受（accept）编号为n的提案。</p></blockquote><h3 id="Paxos算法内容"><a href="#Paxos算法内容" class="headerlink" title="Paxos算法内容"></a>Paxos算法内容</h3><h4 id="决议的提出与批准"><a href="#决议的提出与批准" class="headerlink" title="决议的提出与批准"></a>决议的提出与批准</h4><p>阶段一（决议提出）</p><blockquote><p>1、Proposer选择一个提案编号M，然后向Acceptors的某个超过半数的子集成员发送编号为M的prepare请求。</p><p>2、如果一个Acceptor接收到一个编号为M的pepare请求，且编号M大于该Acceptor已经响应的所有prepare请求的编号，那么它就会将它已经批准过的最大编号的提案作为响应反馈给Proposer，同时该Acceptor会承诺不会再批准任何编号小于M的提案。</p></blockquote><p>阶段二（批准阶段）</p><blockquote><p>1、如果Proposer收到来自半数以上的Acceptor对其发出的编号为M的prepare请求的响应，那么它就会发送一个针对[M，V]提案的accept请求给Acceptor。注意，V的值就是收到响应中编号最大的提案的值，如果响应中不包含任何提案，那么它就是任意值。</p><p>2、如果Acceptor收到这个针对[M,V]提案的Accept请求，只要该Acceptor尚未对编号大于M的prepare请求做出响应，它就可以通过这个提案。</p></blockquote><h4 id="提案的获取"><a href="#提案的获取" class="headerlink" title="提案的获取"></a>提案的获取</h4><p>如何让Learner获取提案，大体可以有以下几种方案：</p><ul><li><p>方案一</p><p>Learner获取一个已经被选定的提案的前提是，该提案已经被半数以上的Acceptor批准了。因此，最简单的做法就是一旦Acceptor批准了一个提案，就将该提案发送给所有的Learner。这种做法虽然可以让Learner尽快地获取被选定的提案，但是却需要让每个Acceptor与所有Learner逐个进行一次通信，通信的次数至少为二者个数的乘积。</p></li><li><p>方案二</p><p>我们可以让所有的Acceptor将它们对提案的批准情况，统一发送给一个特定的Learner（这样的Learner称为“主Learner”），假定Learner之间可以通过消息通信来互相感知提案的选定情况。当主Learner被通知一个提案被选定时，它会负责通知其他的Learner。</p><p>方案二虽然需要多一个步骤才能将提案通知到所有的Learner，但其通信次数却大大减少了，通常只是Acceptor和Learner的个数总和。但同时，该方案引入了一个新的不稳定因素；主Learner随时可能出现故障。</p></li><li><p>方案三</p><p>将主Learner的范围扩大，即Acceptor可以将批准的提案发送给一个特定的Learner集合，该集合中的每个Learner都可以在一个提案被选定后通知所有其他的Learner。这个Learner集合中的Learner个数越多，可靠性就越好，但同时网络通信的复杂度也就越高。</p></li></ul><h4 id="通过选取主Proposer保证算法的活性"><a href="#通过选取主Proposer保证算法的活性" class="headerlink" title="通过选取主Proposer保证算法的活性"></a>通过选取主Proposer保证算法的活性</h4><p>假设存在这样一种极端情况，有两个Proposer依次提出了一系列编号递增的议案，但是最终都无法被选定，具体流程如下：</p><blockquote><p>Proposer P1提出了一个编号为M1的提案，并完成了上述阶段一的流程。但与此同时，另外一个Proposer P2提出了一个编号为M2（M2&gt;M1）的提案，同样也完成了阶段一的流程，于是Acceptor已经承诺不再批准编号小于M2的提案了。因此，当P1进入阶段二的时候，其发出的accept请求将被Acceptor忽略，于是P1再次进入阶段一并提出了一个编号为M3，（M3&gt;M2）的提案，而这又导致P2在第二阶段的accept请求被忽略，以此类推，提案的选定过程将陷入死循环。</p></blockquote><p>为了保证Paxos算法流程的可持续性，以避免陷入上述提到的“死循环”，就必须选择一个主Proposer，并规定只有主Proposer才能提出议案。这样一来，只要主Proposer和过半的Acceptor能够正常进行网络通信，那么但凡主Proposer提出一个编号更高的提案被提出或正在接受批准，那么它会丢弃当前这个编号较小的提案，并最终能够选出一个编号足够大的提案。因此，如果系统中有足够多的组建（包括Proposer、Acceptor和其他网络通信组建）能够正常工作，那么通过选择一个主Proposer，整套Paxos算法流程就能够保持活性。</p><h2 id="ZAB-协议"><a href="#ZAB-协议" class="headerlink" title="ZAB 协议"></a>ZAB 协议</h2><p>待补充。。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2FPaxos%E7%AE%97%E6%B3%95%23%E5%86%B3%E8%AE%AE%E7%9A%84%E5%8F%91%E5%B8%83">Paxos算法-维基百科</a></p><p>从Paxos到Zookeeper分布式一致性原理与实践</p>]]></content>
    
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM &amp; GC</title>
    <link href="/2019/10/10/java/JVMandGC/"/>
    <url>/2019/10/10/java/JVMandGC/</url>
    
    <content type="html"><![CDATA[<h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><p><strong>线程私有的：</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区</li><li>直接内存 (非运行时数据区的一部分)</li></ul><p>1.8以后方法区改为了元空间，并放在了直接内存中。</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p><h3 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3><p>与程序计数器一样，Java 虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</p><p>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。</p><ul><li>StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 异常。</li><li>OutOfMemoryError： 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出 OutOfMemoryError 异常。</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作GC 堆<strong>（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。进一步划分的目的是更好地回收内存，或者更快地分配内存。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p><h4 id="方法区和永久代的关系："><a href="#方法区和永久代的关系：" class="headerlink" title="方法区和永久代的关系："></a>方法区和永久代的关系：</h4><p>JVM规范定义有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。 </p><h4 id="为什么要将永久代-PermGen-替换为元空间-MetaSpace-呢"><a href="#为什么要将永久代-PermGen-替换为元空间-MetaSpace-呢" class="headerlink" title="为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?"></a>为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?</h4><p>整个永久代有一个 JVM 本身设置固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，并且永远不会得到 java.lang.OutOfMemoryError。你可以使用 <code>-XX：MaxMetaspaceSize</code> 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。<code>-XX：MetaspaceSize</code> 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p><h3 id="元空间-MetaSpace"><a href="#元空间-MetaSpace" class="headerlink" title="元空间 (MetaSpace)"></a>元空间 (MetaSpace)</h3><p>类的版本、字段、方法、接口等描述信息，类元信息</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>常量池信息（用于存放编译期生成的各种字面量和符号引用）运行时常量池分配在元空间中，字符串常量池放在堆中</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195946.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="java-符号引用和直接引用"><a href="#java-符号引用和直接引用" class="headerlink" title="java 符号引用和直接引用"></a>java 符号引用和直接引用</h3><p>符号引用一般放在常量池中，在编译时，会用符号引用占位，一般用限定符表示，在实际解析的时候才会转化为真正的对象地址。</p><p>直接引用：</p><p>1：直接指向目标的指针。（个人理解为：指向对象，类变量和类方法的指针）</p><p>2：相对偏移量。（指向实例的变量，方法的指针）</p><p>3：一个间接定位到对象的句柄。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>分配的堆外内存，元空间，（字符串常量池分配在堆中）</p><h2 id="Hotspot虚拟机对象"><a href="#Hotspot虚拟机对象" class="headerlink" title="Hotspot虚拟机对象"></a>Hotspot虚拟机对象</h2><p>在hotspot虚拟机中，对象的存储布局可以包括三部分：对象头，实例数据，对齐填充</p><p>对象头包括：</p><p>1.对象自身运行时数据：hashcode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等</p><p>2.类型指针：对象指向他的类型元数据的指针</p><p>3.实例数据</p><h2 id="JVM对象创建过程"><a href="#JVM对象创建过程" class="headerlink" title="JVM对象创建过程"></a>JVM对象创建过程</h2><p>以HotSpot虚拟机为例</p><h3 id="类的加载，连接和初始化"><a href="#类的加载，连接和初始化" class="headerlink" title="类的加载，连接和初始化"></a>类的加载，连接和初始化</h3><p>在使用某个类之前，JVM会确保这个类被加载，连接和初始化。</p><p><strong>加载</strong> </p><p>将类的二进制文件读取到内存中，放入方法区内（1.8为元空间）并在堆区创建一个java.lang.Class对象(符号引用？)</p><p><strong>连接</strong></p><ul><li>验证 检查加载的二进制码是否符合类的规范，包括结构，语法，字节码是否合法，兼容性检查等</li><li>准备 为类的静态变量分配内存，并将其初始化为默认值。（默认值）</li><li>解析 将符号引用替换为直接引用</li></ul><p><strong>初始化</strong></p><p>在初始化阶段，JVM执行类初始化语句，为类的静态变量赋予初始值。在程序中，静态变量的初始化有两种途径：一是在静态变量的声明处进行初始化；二是在静态代码块中进行初始化。静态变量的声明语句，以及静态代码块都被看作类初始化语句，JVM会按照初始化语句在类文件中的的书写顺序依次执行它们。</p><p><strong>Java虚拟机初始化一个类包含以下步骤：</strong></p><p>1.假如这个类还没有被加载和连接，那么先进行加载和连接。</p><p>2.假如类中存在直接父类，并且这个父类还没有被初始化，那么就先初始化直接父类。</p><p>3.假如类中存在初始化语句，那么就依次执行。</p><p><strong>初始化时机,主要有以下这些场景会出发类的初始化</strong>（主动使用类或接口时才会出发）</p><p>01.创建类的实例。包括new关键字来创建，或者通过反射、克隆及反序列化方式来创建实例。</p><p>02.调用类的静态方法。</p><p>03.访问某个类或接口的静态变量，或者对该静态变量赋值。</p><p>04.使用反射机制来创建某个类或接口对应的java.lang.Class对象。例如Class.forName(“Test”)操作，如果系统还未初始化Test类，这波操作会导致该Test类被初始化，并返回Test类对应的java.lang.Class对象。</p><p>05.初始化一个类的子类，该子类所有的父类都会被初始化。</p><p>06.JVM启动时被标明为启动类的类（直接使用java.exe命令运行某个主类）。例如对于“java Test”命令，Test类就是启动类（主类），JVM会先初始化这个主类。</p><p>之后就是类的初始化，执行类的构造方法。</p><p>finilize() 拯救对象，只触发一次</p><h3 id="类加载器和双亲委派模型"><a href="#类加载器和双亲委派模型" class="headerlink" title="类加载器和双亲委派模型"></a>类加载器和双亲委派模型</h3><p><strong>类加载器</strong>：</p><p>启动类加载器（<code>Bootstrap ClassLoader</code>）：由<code>C++</code>语言实现（针对<code>HotSpot</code>）,负责将存放在<code>&lt;JAVA_HOME&gt;\lib</code>目录或<code>-Xbootclasspath</code>参数指定的路径中的类库加载到内存中。</p><p>其他类加载器：由<code>Java</code>语言实现，继承自抽象类<code>ClassLoader</code>。如：</p><ul><li>扩展类加载器（<code>Extension ClassLoader</code>）：负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录或<code>java.ext.dirs</code>系统变量指定的路径中的所有类库。</li><li>应用程序类加载器（<code>Application ClassLoader</code>）。负责加载用户类路径（<code>classpath</code>）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。</li></ul><p>双亲委派模型工作过程是：如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即<code>ClassNotFoundException</code>），子加载器才会尝试自己去加载。</p><p><strong>自定义类加载器</strong></p><p>继承ClassLoader类然后覆盖气findClass(String name)方法，指定类名称，返回对类的引用。</p><h2 id="垃圾回收的判断算法"><a href="#垃圾回收的判断算法" class="headerlink" title="垃圾回收的判断算法"></a>垃圾回收的判断算法</h2><p>引用计数法和可达性分析 GCroots对象</p><h3 id="引用计数法："><a href="#引用计数法：" class="headerlink" title="引用计数法："></a>引用计数法：</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。存在的问题：循环引用</p><h3 id="可达性分析："><a href="#可达性分析：" class="headerlink" title="可达性分析："></a>可达性分析：</h3><p>从一些GC roots 的对象为起点，从这些结点向下搜索，结点走过的路径为引用链，如果一个对象到GC roots没有引用链的话，证明这个对象是不可用的，可进行垃圾回收的。</p><p>GC roots的对象：</p><pre><code>+ 栈中引用的对象+ 静态属性引用的对象+ 常量引用的对象+ 本地方法栈引用的对象+ 内部引用，系统类加载器+ 同步锁持有的对象</code></pre><h3 id="java-的引用分析"><a href="#java-的引用分析" class="headerlink" title="java 的引用分析"></a>java 的引用分析</h3><p>引用的类别：强引用，软引用，弱引用，虚引用</p><ul><li>强引用  是指创建一个对象并把这个对象赋给一个引用变量，类似“Object obj=new Object()”这类的引用，普遍存在的引用。</li><li>软引用  如果一个对象具有软引用，内存空间足够，垃圾回收器就不会回收它；采用softReference 创建</li><li>弱引用  弱引用也是用来描述非必需对象的，当JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。在java中，用java.lang.ref.WeakReference类来表示。</li><li>虚引用  果一个对象与虚引用关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。采用 java.lang.ref.PhantomReference表示。虚引用必须联合引用队列使用</li></ul><p>对于软引用和弱引用和虚引用，我们希望当一个对象被gc掉的时候通知用户线程，进行额外的处理时，就需要使用引用队列了。<code>ReferenceQueue</code>即这样的一个对象，当一个obj被gc掉之后，其相应的包装类，即ref对象会被放入queue中。我们可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理等。</p><p>软弱引用，在引用对象被回收后进入引用队列，虚引用在回收前加入引用队列？</p><p>软弱引用在回收后加入引用队列是为了在引用对象GC掉后通知进行</p><h2 id="方法区垃圾收集"><a href="#方法区垃圾收集" class="headerlink" title="方法区垃圾收集"></a>方法区垃圾收集</h2><p>常量的回收：当常量没有地方引用时回收</p><p>加载的类型的回收：</p><pre><code>+ 所有实例已经回收+ 类加载器已经回收+ Class没有被引用，没办法通过反射访问</code></pre><h2 id="收集算法"><a href="#收集算法" class="headerlink" title="收集算法"></a>收集算法</h2><p>分代收集理论：</p><ol><li>大部分对象都是朝生夕灭</li><li>熬过越多次垃圾收集的对象越难消亡</li></ol><p>根据这两个理论，垃圾收集器的原则，将java堆划分不同的区域，根据其年龄进行回收，提高垃圾收集的效率和开销</p><ul><li>标记清除 效率问题，碎片问题</li><li>复制算法 容量保证问题</li><li>标记整理 标记+复制</li><li>分代整理 <ul><li>新生代复制算法 </li><li>标记清除/整理算法</li></ul></li></ul><p>CMS+ParNew ParNew 多线程 新生代垃圾收集器，并行 CMS 老年代垃圾回收 标记清除（哈啰使用的垃圾收集器搭配）</p><h3 id="根节点枚举"><a href="#根节点枚举" class="headerlink" title="根节点枚举"></a>根节点枚举</h3><p>在OopMap中记录引用，垃圾收集器不需要去遍历GC roots</p><p>堆内存分配策略：</p><ul><li>对象优先在eden区上分配</li><li>大对象直接进入老年代</li><li>长期存活的对象进入老年代</li></ul><p>分代垃圾收集策略：</p><p>新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个 Survivor区。</p><p>大部分对象在eden区生成，当发生垃圾回收时，先将eden区存活对象复制到一个survivor0区，然后情况eden区。如果s0也放满了，将eden和s0去的存活对象，放到s1区，若s1无法存放s0和eden的对象时，则将对象放入老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收。</p><p>新生代的GC叫做minorGC，来年代的叫做Major GC即Full GC</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>新生代收集器使用的收集器：Serial、PraNew、Parallel Scavenge</p><p>老年代收集器使用的收集器：Serial Old、Parallel Old、CMS</p><p><strong>Serial收集器（复制算法)</strong></p><p>新生代单线程收集器，标记和清理都是单线程，优点是简单高效。</p><p><strong>Serial Old收集器(标记-整理算法)</strong></p><p>老年代单线程收集器，Serial收集器的老年代版本。</p><p>Serial 系列的收集器：优点没有线程交互的开销，简单高效，需要有一个停顿时间，stop the world</p><p><strong>ParNew收集器(复制算法)</strong></p><p>新生代收集器，可以认为是Serial收集器的多线程版本,在多核CPU环境下有着比Serial更好的表现。可以和CMS配合。新生代首选垃圾收集器</p><h3 id="Paralled系列"><a href="#Paralled系列" class="headerlink" title="Paralled系列"></a>Paralled系列</h3><p><strong>CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。Paralled更关注应用的吞吐量，所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。</strong></p><p><strong>Parallel Scavenge收集器(复制算法)</strong></p><p>并行收集器，追求高吞吐量，高效利用CPU。吞吐量一般为99%， 吞吐量= 用户线程时间/(用户线程时间+GC线程时间)。适合后台应用等对交互相应要求不高的场景。</p><p><strong>Parallel Old收集器(标记-整理算法)</strong></p><p>Parallel Scavenge收集器的老年代版本，并行收集器，吞吐量优先</p><p><strong>CMS</strong>（标记清除）</p><ul><li><strong>初始标记</strong> stop the world 标记直接与GCroot相连的对象</li><li><strong>并发标记</strong>（其他线程并行）所标记出来的对象开始逐步遍历这些对象（与GCRoot直接相连或与存活的青年代对象直接相关联的对象）的所引用的对象，并标记 这些对象</li><li><strong>并发预清理</strong>  减少重标记（Remark）步骤Stop-the-World的时间，由于前面的并发标记为并发的，因此因为会发生改变，改变的空间标记为脏块，将脏块重新标记，使空间变得clean。（可省）</li><li><strong>重新标记</strong>（系统停顿）由于预清理步骤并发，所以可能无法做到及时标记，所以需要一个stop the world 来完整标记所有对象。</li><li><strong>并发清理</strong>（其他线程并行）目的是移除所有不用的对象，并且重新声明内存空间的归属等候将来使</li><li><strong>并发重置</strong>（其他线程并行）CMS内部重置回收器状态，准备进入下一个并发回收周期</li></ul><p><strong>CMS的缺点</strong>：</p><ul><li>对 CPU 资源敏感；需要有足够CPU资源</li><li>无法处理浮动垃圾，由于并发标记，用户线程在垃圾清理时依然会产生垃圾，</li><li>用户线程仍然在运行，必须预留出空间给用户线程使用，需要更大的堆空间。</li><li>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Serial/old 单线程</p><p>ParNew 多线程 serial多线程版本，可以和CMS搭配使用 </p><p>Parallel scanvenge/old 多线程，吞吐量优先</p><p>CMS 真正并发的垃圾收集器</p><h2 id="G1垃圾收集器"><a href="#G1垃圾收集器" class="headerlink" title="G1垃圾收集器"></a>G1垃圾收集器</h2><h3 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h3><p>G1的内存结构和传统的内存空间划分有比较的不同。G1将内存划分成了多个大小相等的Region（1MB~32MB），Region逻辑上连续，物理内存地址不连续。同时每个Region被标记成E、S、O、H，分别表示Eden、Survivor、Old、Humongous。</p><p>其中E、S属于年轻代，O与H属于老年代。</p><p>Humongous表示大对象，一般当分配的对象大小大于等于region的一般是认为是H对象。</p><p><strong>G1</strong> 内存分成小的region 每个reion有各自的分代属性，大小一致 分代不连续，搜索引用时要全盘扫描。</p><h5 id="Card-Table"><a href="#Card-Table" class="headerlink" title="Card Table:"></a>Card Table:</h5><ul><li>Card Table维护着所有的Card。Card Table的结构是一个字节数组，Card Table用这个数组映射着每一个Card</li><li>Card中对象的引用发生改变时，Card在Card Table数组中对应的值被标记为dirty，就称这个Card被脏化了</li><li>所以Card Table其实就是映射着内存中的对象，Young GC的时候只需要扫描状态是dirty的card</li></ul><h5 id="Remembered-Set-RSet"><a href="#Remembered-Set-RSet" class="headerlink" title="Remembered Set: RSet"></a>Remembered Set: RSet</h5><ul><li>每一个Region都有自己的RSet</li><li>RSet里面记录了引用——就是其他Region中指向本Region中所有对象的所有引用，也就是谁引用了我的对象</li><li>RSet其实是一个Hash Table，Key是其他的Region的起始地址，Value是一个集合，里面的元素是Card Table 数组中的index，既Card对应的Index，映射到对象的Card地址。<ul><li>比如A对象在regionA，B对象在regionB，且B.f = A，则在regionA的RSet中需要记录一对键值对，key是regionB的起始地址，Value的值能映射到B所在的Card的地址，所以要查找B对象，就可以通过RSet中记录的卡片来查找该对象</li></ul></li></ul><p><strong>G1 垃圾回收过程：</strong></p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射与代理</title>
    <link href="/2019/10/01/java/%E5%8F%8D%E5%B0%84%E4%B8%8E%E4%BB%A3%E7%90%86/"/>
    <url>/2019/10/01/java/%E5%8F%8D%E5%B0%84%E4%B8%8E%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><strong>反射机制的定义：</strong> </p><p>是在运行状态中，对于任意的一个类，都能够知道这个类的所有属性和方法，对任意一个对象都能够通过反射机制调用一个类的任意方法，这种动态获取类信息及动态调用类对象方法的功能称为java的反射机制。</p><p><strong>反射的作用：</strong></p><p>1、动态地创建类的实例，将类绑定到现有的对象中，或从现有的对象中获取类型。</p><p>2、应用程序需要在运行时从某个特定的程序集中载入一个特定的类</p><p>反射 一般使用 Class.forName()方法;</p><p>jdk提供了三种方式获取一个对象的Class，就User user来说</p><p>1.user.getClass()，这个是Object类里面的方法</p><p>2.User.class属性，任何的数据类型，基本数据类型或者抽象数据类型，都可以通过这种方式获取类</p><p>3.Class.forName(“”)，Class类提供了这样一个方法，让我们通过类名来获取到对象类</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 接口<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">/**<br> * 接口的实现类<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"----已经保存数据!----"</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**<br> * 代理对象,静态代理<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span></span>&#123;<br>    <span class="hljs-comment">//接收保存目标对象</span><br>    <span class="hljs-keyword">private</span> IUserDao target;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoProxy</span><span class="hljs-params">(IUserDao target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target=target;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"开始事务..."</span>);<br>        target.save();<span class="hljs-comment">//执行目标对象的方法</span><br>        System.out.println(<span class="hljs-string">"提交事务..."</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>静态代理总结:</strong><br>1.优点：可以做到在不修改目标对象的功能前提下,对目标功能扩展.<br>2.缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护.</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p><strong>动态代理有以下特点:</strong><br>1.代理对象,不需要实现接口<br>2.代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)<br>3.动态代理也叫做:JDK代理,接口代理</p><p><strong>JDK中生成代理对象的API</strong><br>代理类所在包:java.lang.reflect.Proxy<br>JDK实现代理只需要使用newProxyInstance方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> Object <span class="hljs-title">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</span></span><br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 创建动态代理对象<br> * 动态代理不需要实现接口,但是需要指定接口类型<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span></span>&#123;<br><br>    <span class="hljs-comment">//维护一个目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(Object target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target=target;<br>    &#125;<br><br>   <span class="hljs-comment">//给目标对象生成代理对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(),<br>                target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                        System.out.println(<span class="hljs-string">"开始事务2"</span>);<br>                        <span class="hljs-comment">//执行目标对象方法</span><br>                        Object returnValue = method.invoke(target, args);<br>                        System.out.println(<span class="hljs-string">"提交事务2"</span>);<br>                        <span class="hljs-keyword">return</span> returnValue;<br>                    &#125;<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * 测试类<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 目标对象</span><br>        IUserDao target = <span class="hljs-keyword">new</span> UserDao();<br>        <span class="hljs-comment">// 原始的类型 class cn.itcast.b_dynamic.UserDao】</span><br>        System.out.println(target.getClass());<br><br>        <span class="hljs-comment">// 给目标对象，创建代理对象</span><br>        IUserDao proxy = (IUserDao) <span class="hljs-keyword">new</span> ProxyFactory(target).getProxyInstance();<br>        <span class="hljs-comment">// class $Proxy0   内存中动态生成的代理对象</span><br>        System.out.println(proxy.getClass());<br><br>        <span class="hljs-comment">// 执行方法  </span><br>        proxy.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理的原理：</p><p>jdk代理主要通过反射机制实现，在代理过程中，动态的创建代理对象的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Proxy.newProxyInstance中调用生成代理类的逻辑 </span><br>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);<br></code></pre></td></tr></table></figure><h3 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h3><ul><li>JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.</li><li>Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)</li><li>Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> * 目标对象,没有实现任何接口<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"----已经保存数据!----"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * Cglib子类代理工厂<br> * 对UserDao在内存中动态构建一个子类对象<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span></span>&#123;<br>    <span class="hljs-comment">//维护目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//给目标对象创建一个代理对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1.工具类</span><br>        Enhancer en = <span class="hljs-keyword">new</span> Enhancer();<br>        <span class="hljs-comment">//2.设置父类</span><br>        en.setSuperclass(target.getClass());<br>        <span class="hljs-comment">//3.设置回调函数</span><br>        en.setCallback(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">//4.创建子类(代理对象)</span><br>        <span class="hljs-keyword">return</span> en.create();<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">"开始事务..."</span>);<br><br>        <span class="hljs-comment">//执行目标对象的方法</span><br>        Object returnValue = method.invoke(target, args);<br><br>        System.out.println(<span class="hljs-string">"提交事务..."</span>);<br><br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**<br> * 测试类<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//目标对象</span><br>        UserDao target = <span class="hljs-keyword">new</span> UserDao();<br><br>        <span class="hljs-comment">//代理对象</span><br>        UserDao proxy = (UserDao)<span class="hljs-keyword">new</span> ProxyFactory(target).getProxyInstance();<br><br>        <span class="hljs-comment">//执行代理对象的方法</span><br>        proxy.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java注解"><a href="#java注解" class="headerlink" title="java注解"></a>java注解</h2><p>注解的概念，相当于标签，提供给编译器和工具使用</p><h3 id="java元注解"><a href="#java元注解" class="headerlink" title="java元注解"></a>java元注解</h3><p>元注解的作用就是负责注解其他注解。</p><p>java中有四种元注解：@Retention、@Inherited、@Documented、@Target</p><p>@Retention<br>注解的保留位置（枚举RetentionPolicy），RetentionPolicy可选值：</p><p>SOURCE：注解仅存在于源码中，在class字节码文件中不包含<br>CLASS：默认的保留策略，注解在class字节码文件中存在，但运行时无法获得<br>RUNTIME：注解在class字节码文件中存在，在运行时可以通过反射获取到</p><p>@Inherited<br>声明子类可以继承此注解，如果一个类A使用此注解，则类A的子类也继承此注解</p><p>@Documented<br>声明注解能够被javadoc等识别（下面自定义注解处会有例子做介绍，点击查看）</p><p>@Target<br>用来声明注解范围（枚举ElementType），ElementType可选值：</p><p>TYPE：接口、类、枚举、注解<br>FIELD：字段、枚举的常量<br>METHOD：方法<br>PARAMETER：方法参数<br>CONSTRUCTOR：构造函数<br>LOCAL_VARIABLE：局部变量<br>ANNOTATION_TYPE：注解<br>PACKAGE：包</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2019/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95note/"/>
    <url>/2019/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95note/</url>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200234.jpeg" srcset="/img/loading.gif" alt=""></p><p>shell排序思想：用步长分成不同的组进行插入排序</p><p>快排思想，设立划分区间，然后进行分治</p><p>冒泡：逐个交换</p><p>归并：分组然后合并排序</p><p>基数排序：对不同关键字依次进行排序</p><p>堆排序：建立大根堆，然后交换堆顶和堆低，调整堆，重复。</p><p>不稳定：快希选一堆（快些选一堆）</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>可以采用动态规划解决的问题：</p><ul><li>具有最有子结构性质，即最优解包含的子问题的解也是最优解</li><li>无后效性，当前状态不受之后的影响</li><li>重叠子问题，子问题的解在下一阶段的决策会用到</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java单元测试</title>
    <link href="/2019/09/23/java/java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2019/09/23/java/java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>JUnit4是一个易学易用的Java单元测试框架，一般我们在写完一段代码或一个方的时候，都要测试一下这段代码和这个方法的逻辑是不是正确，输入一定的数据，返回的数据是不是我们想要的结果，即我们在写单个业务代码针对结果进行测试。这时Junit就派上了大用场了。</p><p><strong>在写完一个类或者方法后可以添加测试类进行测试</strong></p><p>Junit中集中基本注解，是必须掌握的</p><p>@BeforeClass – 表示在类中的任意public static void方法执行之前执行<br>@AfterClass – 表示在类中的任意public static void方法执行之后执行<br>@Before – 表示在任意使用@Test注解标注的public void方法执行之前执行<br>@After – 表示在任意使用@Test注解标注的public void方法执行之后执行<br>@Test – 使用该注解标注的public void方法会表示为一个测试方法</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111195756.png" srcset="/img/loading.gif" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库</title>
    <link href="/2019/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Database/"/>
    <url>/2019/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Database/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h2><p>DDL,DML,DQL,DCL</p><p>数据定义语言（Data Definition Language，DDL）</p><p>数据操作语言（Data Manipulation Language，DML）</p><p>数据查询语言（Data Query Language，DQL）</p><p>数据控制语言（Data Control Language，DCL）</p><h2 id="数据库三范式："><a href="#数据库三范式：" class="headerlink" title="数据库三范式："></a>数据库三范式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs wiki">第一范式：要求有主键，并且要求每一个字段原子性不可再分<br>第二范式：要求所有非主键字段完全依赖主键，不能产生部分依赖<br>第三范式：所有非主键字段和主键字段之间不能产生传递依赖<br></code></pre></td></tr></table></figure><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><p>1.主键是能确定一条记录的唯一标识，比如，一条记录包括身份正号，姓名，年龄。<br>2.外键用于与另一张表的关联。是能确定另一张表记录的字段，用于保持数据的一致性</p><p>主键的设计原则：</p><ul><li>对用户没有意义</li><li>单列，便于筛选和连接的操作</li><li>永远不要更新主键也不要包含动态变化的数据，如时间等</li><li>主键应由计算机自动生成</li></ul><p>数据库字段约束条件：</p><p>UNSIGNED ：无符号，值从0开始，无负数<br>ZEROFILL：零填充，当数据的显示长度不够的时候可以使用前补0的效果填充至指定长度,字段会自动添加UNSIGNED<br>NOT NULL：非空约束，表示该字段的值不能为空<br>DEFAULT：表示如果插入数据时没有给该字段赋值，那么就使用默认值<br>PRIMARY KEY：主键约束，表示唯一标识，不能为空，且一个表只能有一个主键。一般都是用来约束id<br>AUTO_INCREMENT：自增长，只能用于数值列，而且配合索引使用,默认起始值从1开始，每次增长1<br>UNIQUE KEY：唯一值，表示该字段下的值不能重复，null除外。比如身份证号是一人一号的，一般都会用这个进行约束<br>FOREIGN KEY：外键约束，目的是为了保证数据的完成性和唯一性，以及实现一对一或一对多关系</p><h2 id="mysql架构和简单流程"><a href="#mysql架构和简单流程" class="headerlink" title="mysql架构和简单流程"></a>mysql架构和简单流程</h2><h3 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h3><p>客户端：负责连接处理，认证等功能</p><p>核心服务：负责 查询解析，优化，缓存，一些内置函数，还有存储过程，触发器，视图等。</p><p>存储引擎：负责数据的存储，更新和检索，表的创建。</p><p>MySQL常用数据类型：</p><ol><li><p>数据类型</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>带符号最小值</th><th>带符号最大值</th><th>不带符号最小值</th><th>不带符号最大值</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128</td><td>127</td><td>0</td><td>255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768</td><td>32767</td><td>0</td><td>65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608</td><td>8388607</td><td>0</td><td>16777215</td></tr><tr><td>INT</td><td>4</td><td>-2147483648</td><td>2147483647</td><td>0</td><td>4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808</td><td>9223372036854775807</td><td>0</td><td>18446744073709551616</td></tr></tbody></table></li><li><p>字符串类型</p></li><li><p>日期时间类型</p></li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>5.5之前默认MyISAM，之后默认InnoDB</p><p>InnoDB：事务，行锁，外键约束，灾难恢复。MVCC（高并发事务）</p><p>MyISAM: 会保存数据的行数。</p><p>两种引擎的适用场景：</p><p>MyISAM 适合查询非常频繁的，不需要事务</p><p>InnoDB 社和更新插入频繁，需要可靠性，事务要求。</p><h2 id="ACID的实现"><a href="#ACID的实现" class="headerlink" title="ACID的实现"></a>ACID的实现</h2><p>事务的 ACID 是通过 InnoDB 日志和锁来保证。</p><p>事务的隔离性是通过数据库锁的机制实现的，</p><p>持久性通过 Redo Log（重做日志）来实现，</p><p>原子性和一致性通过 Undo Log 来实现。</p><p>Undo Log 的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为 Undo Log）。然后进行数据的修改。</p><p>如果出现了错误或者用户执行了 Rollback 语句，系统可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态。</p><p>和 Undo Log 相反，Redo Log 记录的是新数据的备份。在事务提交前，只要将 Redo Log 持久化即可，不需要将数据持久化。</p><p>当系统崩溃时，虽然数据没有持久化，但是 Redo Log 已经持久化。系统可以根据 Redo Log 的内容，将所有数据恢复到***的状态。</p><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>(全称)多版本并发控制</p><p>乐观锁的一种实现方式，广泛应用于数据库技术中，不仅mysql，PostgreSQL等也有该技术。</p><p>MVCC的实现，通过保存数据在某个时间点的快照来实现的。这意味着一个事务无论运行多长时间，在同一个事务里能够看到数据一致的视图。根据事务开始的时间不同，同时也意味着在同一个时刻不同事务看到的相同表里的数据可能是不同的。</p><p>用与实现读已提交和可重复度两个隔离级别</p><h4 id="InnoDB实现原理"><a href="#InnoDB实现原理" class="headerlink" title="InnoDB实现原理"></a>InnoDB实现原理</h4><p>对于使用<code>InnoDB</code>存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列（<code>row_id</code>并不是必要的，我们创建的表中有主键或者非NULL唯一键时都不会包含<code>row_id</code>列）：</p><ul><li><code>trx_id</code>：每次对某条聚簇索引记录进行改动时，都会把对应的事务id赋值给<code>trx_id</code>隐藏列。</li><li><code>roll_pointer</code>：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到<code>undo日志</code>中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><p>每次对记录进行改动，都会记录一条<code>undo日志</code>，每条<code>undo日志</code>也都有一个<code>roll_pointer</code>属性（<code>INSERT</code>操作对应的<code>undo日志</code>没有该属性，因为该记录并没有更早的版本），可以将这些<code>undo日志</code>都连起来，串成一个链表。</p><h4 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h4><p>作用：判断版本链中的哪个版本是当前事务可见的。</p><p>数据库会维护一个当前活跃的事务的列表（未提交）</p><h2 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">原子性，要么执行，要么不执行,要么执行成功 要么全部回滚<br>    <br>隔离性，所有操作全部执行完以前其它会话不能看到过程，保证并发时的数据修改正确<br><br>一致性，事务前后，数据总额一致，事务前后的意义一致，数据合法性检查<br><br>持久性，一旦事务提交，对数据的改变就是永久的，持久化功能。<br></code></pre></td></tr></table></figure><p>可能发生的问题：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">更新丢失：两个事务都对一个数据进行修改，T1先修改，T2覆盖了T1的修改，造成更新丢失。<br>脏读：事务B读取事务<span class="hljs-keyword">A</span>还没有提交的数据<br>不可重复读：一次事务内两次读取同一个数据不一致<br>幻读:事务<span class="hljs-keyword">A</span>修改了数据，事务B也修改了数据，这时在事务<span class="hljs-keyword">A</span>看来，明明修改了数据，咋不一样<br>//注：不可重复读偏向的是修改，而幻读侧重的是插入操作<br></code></pre></td></tr></table></figure><p>事务的隔离级别：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">（从高到低）<br><span class="hljs-keyword">Serializable</span> (串行化)：可避免脏读、不可重复读、幻读的发生。<br><span class="hljs-keyword">Repeatable</span> <span class="hljs-keyword">read</span> (可重复读)：可避免脏读、不可重复读的发生。<br><span class="hljs-keyword">Read</span> <span class="hljs-keyword">committed</span> (读已提交)：可避免脏读的发生。<br><span class="hljs-keyword">Read</span> <span class="hljs-keyword">uncommitted</span> (读未提交)：最低级别，任何情况都无法保证。<br></code></pre></td></tr></table></figure><p>InnoDB 默认的事务隔离级别是可重复读(repeatable-read)。</p><p>不同隔离级别的实现：</p><p><strong>读未提交时：</strong></p><p>事务在读数据的时候并未对数据加锁。</p><p>事务在修改数据的时候只对数据增加<em>行级共享锁</em>。</p><p><strong>读已提交时：</strong></p><p>事务对当前被读取的数据加 行级共享锁（当读到时才加锁），一旦读完该行，立即释放该行级共享锁；</p><p>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加 行级排他锁，直到事务结束才释放。</p><p><strong>可重复读时：</strong></p><p>事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加 行级共享锁，直到事务结束才释放；</p><p>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加 行级排他锁，直到事务结束才释放。</p><p><strong>串行化时：</strong></p><p>事务在读取数据时，必须先对其加 表级共享锁 ，直到事务结束才释放；</p><p>事务在更新数据时，必须先对其加 表级排他锁 ，直到事务结束才释放。</p><p>关于MVCC和幻读的一些理解(个人看法，待考证)</p><p>之前在在使用mvcc的情况下，RR隔离级别已经可以解决幻读的问题了，为什么还要用序列化解决幻读问题。</p><p>首先考虑这样一个场景，有两个事务，事务A 插入一条数据，事务B先查询是否有这条数据，然后再执行插入，那么在RR隔离级别下，B在查询时未发现有数据，此时A事务提交，数据插入，这时B再执行插入时，发现无法插入了，产生了幻读（明明查询没有数据，但是无法插入，像是幻觉。。。。），这时候RR已经无法解决了，只能通过序列化的形式来解决这个问题。</p><p>注：也有可能A事务为提交，但是由于写锁的存在，B还是无法执行插入。</p><h2 id="锁机制与InnoDB锁算法"><a href="#锁机制与InnoDB锁算法" class="headerlink" title="锁机制与InnoDB锁算法"></a>锁机制与InnoDB锁算法</h2><ul><li><p>MyISAM采用表级锁(table-level locking)。</p></li><li><p>InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁</p></li><li><p><strong>表级锁：</strong> MySQL中锁定 <strong>粒度最大</strong> 的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。</p></li><li><p><strong>行级锁：</strong> MySQL中锁定 <strong>粒度最小</strong> 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。</p><p><strong>锁算法</strong>：</p><ul><li>Record Lock: 对索引项加锁，锁定符合条件的行。其他事务不能修改和删除加锁项；</li><li>Gap Lock: 对索引项之间的“间隙”加锁，锁定记录的范围（比如对第一条记录前的间隙或最后一条将记录后的间隙加锁），不包含索引项本身。其他事务不能在锁范围内插入数据，这样就防止了别的事务新增幻影行。</li><li>Next-key Lock： 锁定索引项本身和索引范围。即Record Lock和Gap Lock的结合。可解决幻读问题。</li></ul></li></ul><p><strong>读写锁详解:</strong></p><p>共享锁和排他锁</p><p><strong>意向锁：</strong></p><p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p><ul><li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li></ul><p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p><p><strong>当前读和快照读</strong>：</p><p><strong>当前读</strong>：加锁读，读取记录的最新版本，会加锁保证其他并发事务不能修改当前记录，直至获取锁的事务释放锁；</p><p>显式加锁的读操作与插入/更新/删除等写操作。</p><p><strong>快照读</strong>：不加锁读，读取记录的快照版本，采用MVCC实现，RR隔离级别下 不显式加锁的select都采用快照读。</p><h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><p>MySQL索引使用的数据结构主要有<strong>BTree索引</strong> 和 <strong>哈希索引</strong> 。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。</p><p>其数据文件本身就是索引文件。相比MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按B+Tree组织的一个索引结构，树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。这被称为“聚簇索引（或聚集索引）”。而其余的索引都作为辅助索引，辅助索引的data域存储相应记录主键的值而不是地址。</p><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>聚簇索引：索引和数据存放在一起的为聚簇索引，否则为非聚簇索引，Innodb默认以主键创建聚簇索引。</p><p>唯一索引：建立索引的键值唯一表示一行数据，可以为空。</p><p>普通索引：就普通的索引</p><p>联合索引：（组合索引）多个键值组合在一起建立索引。</p><h4 id="组合索引最左前缀原则"><a href="#组合索引最左前缀原则" class="headerlink" title="组合索引最左前缀原则"></a>组合索引最左前缀原则</h4><p>​    当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+树是按照从左到右的顺序来建立搜索树的，b+树会<strong>优先比较最左的数据项来确定下一步的所搜方向</strong></p><h4 id="B树和B-树区别"><a href="#B树和B-树区别" class="headerlink" title="B树和B+树区别"></a>B树和B+树区别</h4><p>B+树只有叶子节点包含数据，且所有叶子节点由链表连接</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程是一组 Transact-SQL 语句，它们只需编译一次，以后即可多次执行。因为 Transact-SQL 语句不需要重新编译，所以执行存储过程可以提高性能。<br>　　触发器是一种特殊的存储过程，不由用户直接调用。创建触发器时，将其定义为在对特定表或列进行特定类型的数据修改时激发。</p><h2 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h2><p><strong>主从复制实现基本原理？</strong></p><p>​        1、复制是MySQL自带的一项功能，允许服务器将更改从一个服务器的一个实例复制到另一个实例。</p><p>​        2、主服务器将所有数据和结构更改记录到二进制日志中。</p><p>​        3、从属服务器从主服务器请求该二进制日志并在本地应用其内容。即通过把主库的binlog传送到从库，从新解析应用到从库。</p><p><strong>MySQL支持的复制类型</strong></p><p>​    （1）基于语句的复制：在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。</p><p>​            一旦发现没法精确复制时，会自动选择基于行的复制。</p><p>​    （2）基于行的复制：把改变的内容复制过去，而不是把命令在从服务器上执行一遍。从MySQL5.0开始支持。</p><p>​    （3）混合类型复制：默认采用基于语句的复制，一旦发现基于语句无法精确复制时，就会采用基于行的复制。</p><p>主从复制半同步模式：</p><p>master会等待至少一个slave 写入relay log 后返回ack后才会提交事务。在超时后会切换异步，在收到一个ack后再切回同步。</p><p>一些思考：</p><p>主从复制带来的延迟导致的脏读问题：</p><p>一般来说，主库作为写库，从库作为读库来进行读写分离，那么由于主从复制存在一定的延迟，在高并发下，读从库时会导致无法读到最新的数据。</p><p>主库事务提交后可以先写入redis过期时间设置为同步需要的时间（需要代码的对应逻辑）</p><h2 id="分页，分库，分表"><a href="#分页，分库，分表" class="headerlink" title="分页，分库，分表"></a>分页，分库，分表</h2><p>mysql 分页的操作可以采用 limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">limit</span>(curPage<span class="hljs-number">-1</span>)*pageSize,pageSize;<br></code></pre></td></tr></table></figure><p>curPage 为当前页，pageSize为每页行数</p><p>也可以使用offset进行索引（mysql5.0开始支持）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">LIMIT</span> columeNum <span class="hljs-keyword">OFFSET</span> startNum;<br></code></pre></td></tr></table></figure><p>offset表示开端的索引，从0开始</p><p>读写分离可以解决高并发的读问题，分库分表解决数据量过大的问题</p><p>切分方式：</p><p>垂直切分：（列切分）首先考虑垂直切分，从业务上可以拆分成不同的库，或者将一张大表拆分成多个表</p><p>水平切分：（行切分）如果一张表的行数据很大，那么在查询时会带来性能的下降（mysql大约500万条数据？待考证）</p><p>可以考虑根据某些列进行分库分表，例如根据主键或者ID进行分表，查询时可以根据键值确定对应的库和表。选取的键应该可以承载大数据，且分布均匀，分表后各个表大小相当，且较容易建立键中计算库和表的规则。</p><h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p>就正常的缓存机制，没有很特殊的地方，缓存查询的结果。</p><h2 id="数据库慢查询的优化"><a href="#数据库慢查询的优化" class="headerlink" title="数据库慢查询的优化"></a>数据库慢查询的优化</h2><ol><li>单次查询改为批量处理</li><li>分页改流式处理</li><li>减少返回的不必要的字段</li></ol><h2 id="binlog，redo-log和undo-log的区别"><a href="#binlog，redo-log和undo-log的区别" class="headerlink" title="binlog，redo log和undo log的区别"></a>binlog，redo log和undo log的区别</h2><p>redo log 和undo log 是innoDB引擎</p><p><strong>Undo + Redo事务的简化过程</strong><br> 假设有A、B两个数据，值分别为1,2.<br> A.事务开始.<br> B.记录A=1到undo log.<br> C.修改A=3.<br> D.记录A=3到redo log.<br> E.记录B=2到undo log.<br> F.修改B=4.<br> G.记录B=4到redo log.<br> H.将redo log写入磁盘。<br> I.事务提交</p><p>binlog 是mysql Service层的日志，记录每次操作的</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap</title>
    <link href="/2019/08/20/java/HashMap/"/>
    <url>/2019/08/20/java/HashMap/</url>
    
    <content type="html"><![CDATA[<h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><p>HashMap 主要用来存放键值对，它基于哈希表的Map接口实现，是常用的Java集合之一。</p><p>JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树，以减少搜索时间。</p><h2 id="HashMap分析"><a href="#HashMap分析" class="headerlink" title="HashMap分析"></a>HashMap分析</h2><h3 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h3><p>主要对<strong>key值</strong>的hashcode进行扰动减少碰撞，得到hash值，然后通过（n-1）&amp;hash 得到对象存放的位置（数组位置，n为数组长度），然后判断数组当前位置的key值与要存入的是否相同，若相同，则直接覆盖，否则，采用拉链法。</p><p>为什么高16位和低16位异或，之后的计算位置时只采用最低的几位，将高位参与运算，减少碰撞的概率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK1.8hash实现，右移16位一次</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h;<br>    <span class="hljs-comment">// key.hashCode()：返回散列值也就是hashcode</span><br>    <span class="hljs-comment">// ^ ：按位异或</span><br>    <span class="hljs-comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span><br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>  <span class="hljs-comment">//高16位和低16位相异或</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMap</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;, <span class="hljs-title">Cloneable</span>, <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">// 序列号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">362498820763181265L</span>;    <br>    <span class="hljs-comment">// 默认的初始容量是16</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>;   <br>    <span class="hljs-comment">// 最大容量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>; <br>    <span class="hljs-comment">// 默认的填充因子</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br>    <span class="hljs-comment">// 当桶(bucket)上的结点数大于这个值时会转成红黑树</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>; <br>    <span class="hljs-comment">// 当桶(bucket)上的结点数小于这个值时树转链表</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<br>    <span class="hljs-comment">// 桶中结构转化为红黑树对应的table的最小大小</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;<br>    <span class="hljs-comment">// 存储元素的数组，总是2的幂次倍</span><br>    <span class="hljs-keyword">transient</span> Node&lt;k,v&gt;[] table; <br>    <span class="hljs-comment">// 存放具体元素的集</span><br>    <span class="hljs-keyword">transient</span> Set&lt;map.entry&lt;k,v&gt;&gt; entrySet;<br>    <span class="hljs-comment">// 存放元素的个数，注意这个不等于数组的长度。</span><br>    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-comment">// 每次扩容和更改map结构的计数器</span><br>    <span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> modCount;   <br>    <span class="hljs-comment">// 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容</span><br>    <span class="hljs-keyword">int</span> threshold;<br>    <span class="hljs-comment">// 加载因子</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>CAPACITY</strong></p><p>采用 (n - 1) &amp; hash来定位，位运算提高计算的效率，等同于取余。</p><p>取余后均匀分布，减少hash冲突。</p></li><li><p><strong>loadFactor加载因子</strong></p><p>loadFactor加载因子是控制数组存放数据的疏密程度，loadFactor越趋近于1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p><p><strong>loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor的默认值为0.75f是官方给出的一个比较好的临界值</strong>。</p><p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p></li><li><p><strong>threshold</strong></p><p><strong>threshold = capacity * loadFactor</strong>，<strong>当Size&gt;=threshold</strong>的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是 <strong>衡量数组是否需要扩增的一个标准</strong>。</p></li></ul><h3 id="Node类源码"><a href="#Node类源码" class="headerlink" title="Node类源码"></a>Node类源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 继承自 Map.Entry&lt;K,V&gt;</span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash;<span class="hljs-comment">// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较</span><br>    <span class="hljs-keyword">final</span> K key;<span class="hljs-comment">//键</span><br>    V value;<span class="hljs-comment">//值</span><br>    <span class="hljs-comment">// 指向下一个节点</span><br>    Node&lt;K,V&gt; next;<br>    Node(<span class="hljs-keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-keyword">this</span>.hash = hash;<br>        <span class="hljs-keyword">this</span>.key = key;<br>        <span class="hljs-keyword">this</span>.value = value;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span>        </span>&#123; <span class="hljs-keyword">return</span> key; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span>      </span>&#123; <span class="hljs-keyword">return</span> value; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> key + <span class="hljs-string">"="</span> + value; &#125;<br>    <span class="hljs-comment">// 重写hashCode()方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">setValue</span><span class="hljs-params">(V newValue)</span> </span>&#123;<br>        V oldValue = value;<br>        value = newValue;<br>        <span class="hljs-keyword">return</span> oldValue;<br>    &#125;<br>    <span class="hljs-comment">// 重写 equals() 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">this</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Map.Entry) &#123;<br>            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;<br>            <span class="hljs-keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;<br>                Objects.equals(value, e.getValue()))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到HashMap重写了hashcode()方法和equals()方法</p><h3 id="树节点源码（转换为红黑树时使用）"><a href="#树节点源码（转换为红黑树时使用）" class="headerlink" title="树节点源码（转换为红黑树时使用）"></a>树节点源码（转换为红黑树时使用）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedHashMap</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>    TreeNode&lt;K,V&gt; parent;  <span class="hljs-comment">// 父</span><br>    TreeNode&lt;K,V&gt; left;    <span class="hljs-comment">// 左</span><br>    TreeNode&lt;K,V&gt; right;   <span class="hljs-comment">// 右</span><br>    TreeNode&lt;K,V&gt; prev;    <span class="hljs-comment">// needed to unlink next upon deletion</span><br>    <span class="hljs-keyword">boolean</span> red;           <span class="hljs-comment">// 判断颜色</span><br>    TreeNode(<span class="hljs-keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-keyword">super</span>(hash, key, val, next);<br>    &#125;<br>    <span class="hljs-comment">// 返回根节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> TreeNode&lt;K,V&gt; <span class="hljs-title">root</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="hljs-keyword">this</span>, p;;) &#123;<br>            <span class="hljs-keyword">if</span> ((p = r.parent) == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> r;<br>            r = p;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认构造函数。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all   other fields defaulted</span><br>&#125;<br><br><span class="hljs-comment">// 包含另一个“Map”的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<br>    putMapEntries(m, <span class="hljs-keyword">false</span>);<span class="hljs-comment">//下面会分析到这个方法</span><br>&#125;<br><br><span class="hljs-comment">// 指定“容量大小”的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>&#125;<br><br><span class="hljs-comment">// 指定“容量大小”和“加载因子”的构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal initial capacity: "</span> + initialCapacity);<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>        initialCapacity = MAXIMUM_CAPACITY;<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Illegal load factor: "</span> + loadFactor);<br>    <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>    <span class="hljs-keyword">this</span>.threshold = tableSizeFor(initialCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="putMapEntries方法："><a href="#putMapEntries方法：" class="headerlink" title="putMapEntries方法："></a>putMapEntries方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量添加元素 从另一个map里添加</span><br><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putMapEntries</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m, <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> s = m.size();<br>    <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 判断table是否已经初始化</span><br>        <span class="hljs-keyword">if</span> (table == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// pre-size</span><br>            <span class="hljs-comment">// 未初始化，s为m的实际元素个数</span><br>            <span class="hljs-keyword">float</span> ft = ((<span class="hljs-keyword">float</span>)s / loadFactor) + <span class="hljs-number">1.0F</span>;<br>            <span class="hljs-keyword">int</span> t = ((ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY) ?<br>                     (<span class="hljs-keyword">int</span>)ft : MAXIMUM_CAPACITY);<br>            <span class="hljs-comment">// 计算得到的t大于阈值，则初始化阈值</span><br>            <span class="hljs-keyword">if</span> (t &gt; threshold)<br>                threshold = tableSizeFor(t);<br>        &#125;<br>        <span class="hljs-comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s &gt; threshold)<br>            resize();<br>        <span class="hljs-comment">// 将m中的所有元素添加至HashMap中</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;<br>            K key = e.getKey();<br>            V value = e.getValue();<br>            putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, evict);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><p>put方法调用putVal方法来添加元素，putVal方法的流程如下</p><p>①如果定位到的数组位置没有元素 就直接插入。</p><p>②如果定位到的数组位置有元素就和要插入的key比较，如果key相同就直接覆盖，如果key不相同，就判断p是否是一个树节点，如果是就调用<code>e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value)</code>将元素添加进入。如果不是就遍历链表插入(插入的是链表尾部)。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201907.png" srcset="/img/loading.gif" alt=""></p><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt; e;<br>    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title">getNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt;[] tab; <br>    Node&lt;K,V&gt; first, e; <br>    <span class="hljs-keyword">int</span> n; <br>    K k;<br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 数组元素相等</span><br>        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>            ((k = first.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">return</span> first;<br>        <span class="hljs-comment">// 桶中不止一个节点</span><br>        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 在树中get</span><br>            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br>                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br>            <span class="hljs-comment">// 在链表中get</span><br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">return</span> e;<br>            &#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Resize方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-keyword">int</span> oldThr = threshold;<br>    <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span><br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-comment">// 没超过最大值，就扩充为原来的2倍</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-comment">// signifies using defaults</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-comment">// 计算新的resize上限</span><br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings</span>(&#123;<span class="hljs-string">"rawtypes"</span>,<span class="hljs-string">"unchecked"</span>&#125;)<br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>    table = newTab;<br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 把每个bucket都移动到新的buckets中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>            Node&lt;K,V&gt; e;<br>            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;<br>                oldTab[j] = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                <span class="hljs-keyword">else</span> &#123; <br>                    Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                    Node&lt;K,V&gt; next;<br>                    <span class="hljs-keyword">do</span> &#123;<br>                        next = e.next;<br>                        <span class="hljs-comment">// 原索引</span><br>                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                loHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                loTail.next = e;<br>                            loTail = e;<br>                        &#125;<br>                        <span class="hljs-comment">// 原索引+oldCap</span><br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                hiHead = e;<br>                            <span class="hljs-keyword">else</span><br>                                hiTail.next = e;<br>                            hiTail = e;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                    <span class="hljs-comment">// 原索引放到bucket里</span><br>                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                        loTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j] = loHead;<br>                    &#125;<br>                    <span class="hljs-comment">// 原索引+oldCap放到bucket里</span><br>                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                        hiTail.next = <span class="hljs-keyword">null</span>;<br>                        newTab[j + oldCap] = hiHead;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>本质上，LinkedHashMap = HashMap + 双向链表</p><p>比HashMap多维护一个双向链表用来表示每一个Entry的插入顺序（默认）或者访问顺序。</p><h2 id="currentHashMap"><a href="#currentHashMap" class="headerlink" title="currentHashMap"></a>currentHashMap</h2><p>问题：hashmap的死循环问题</p><p>头插法造成的问题，1.8的改进</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络相关知识</title>
    <link href="/2019/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/"/>
    <url>/2019/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="五层模型及对应的协议："><a href="#五层模型及对应的协议：" class="headerlink" title="五层模型及对应的协议："></a>五层模型及对应的协议：</h3><p>应用层：http.SMTP 数据单元 报文</p><p>传输层：tcp，udp</p><p>网络层：IP，相关的路由协议</p><p>数据链路层：PPP and 以太网</p><p>物理层：相关的物理协议</p><h3 id="TCP连接建立与断开"><a href="#TCP连接建立与断开" class="headerlink" title="TCP连接建立与断开"></a>TCP连接建立与断开</h3><p>过程图：</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200253.jpg" srcset="/img/loading.gif" alt=""></p><p>TCP建立的三次握手：</p><p>　　1、发送端发送一个SYN报文段（SYN位被置位），SYN中包含TCP目的端口和发送端的初始序列号（图中ISN(c)），同时携带着TCP选项数据。</p><p>　　2、接收端收到发送端连接请求后，接收端发送自己SYN报文段（包含ISN(s)），同时对发送端的SYN进行确认，如前所述，接收端发送的ACK是ISN(c)+1。此时ACK位与SYN位都被置位。接收端发送SYN+ACK到发送端。</p><p>　　3、发送端接收到接收端的SYN+ACK数据后，对ISN(s)进行确认，发送ACK为ISN(s)+1的报文段给接收端。</p><p>TCP断开的四次握手：</p><p>　　1、TCP协议规定通过发送一个FIN段（FIN被置位）来发起关闭操作，图3中发送端发送FIN段给接收端，告知它数据已发送完毕，请求断开TCP连接。同时FIN报文段还包含着对最近收到的数据进行ACK。</p><p>　　2、接收端接收端FIN报文段后，对FIN进行确认，发送ACK=k+1给发送端。</p><p>　　3、接收端将连接关闭发送给上层应用程序，由应用程序发起连接关闭操作。此时接收端由被动关闭连接壮成主动，并发送FIN报文段给发送端。报文的序列号为L（这里也可看出上一步骤中发送ACK序列号也为L，因为ACK不占用序列号，所以这里的FIN的序列号也为L）。</p><p>　　4、发送端接收到FIN后，发送回ACK给接收端后，TCP连接终止。如果FIN丢失，发送FIN的那端需要重新发送FIN，知道接收到ACK为止。</p><h3 id="为什么要三次握手四次挥手"><a href="#为什么要三次握手四次挥手" class="headerlink" title="为什么要三次握手四次挥手"></a>为什么要三次握手四次挥手</h3><h4 id="三次握手："><a href="#三次握手：" class="headerlink" title="三次握手："></a>三次握手：</h4><p>第一次，接收方确认自己的收消息没问题，第二次，发送发确认自己的发送消息和接受消息通路没有问题，第三次，接收方确认自己的发送通路没有问题。</p><p>状态的变化：客户端发送第一次消息时，进入到准备发送阶段，服务端接收到第一条消息后进入到准备接受阶段，并发送第二条消息，客户端接收到第二条消息后，正式建立连接，并发送确认消息，服务端接收到确认消息后，也正式建立连接，此时通道建立完成。</p><h3 id="滑动窗口和流量控制"><a href="#滑动窗口和流量控制" class="headerlink" title="滑动窗口和流量控制"></a>滑动窗口和流量控制</h3><p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口(cwnd)</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p><p>TCP的拥塞控制采用了四种算法，即 <strong>慢开始</strong> 、 <strong>拥塞避免</strong> 、<strong>快重传</strong> 和 <strong>快恢复</strong>。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p><ul><li><strong>慢开始：</strong> 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li><li><strong>拥塞避免：</strong> 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.</li><li><strong>快重传与快恢复：</strong> 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li></ul><p>拥塞控制示意图：</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200307.png" srcset="/img/loading.gif" alt=""></p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>普通访问：</p><p>①用户在自己的浏览器中输入要访问的网站域名。</p><p>②浏览器向本地DNS服务器请求对该域名的解析。</p><p>③本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。</p><p>④本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。</p><p>⑤浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址。</p><p>⑥浏览器向服务器请求内容。</p><p>⑦服务器将用户请求内容传送给浏览器。</p><p>使用CDN的访问过程</p><p>①当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</p><p>②CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</p><p>③用户向CDN的全局负载均衡设备发起内容URL访问请求。</p><p>④CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</p><p>⑤区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</p><p>⑥全局负载均衡设备把服务器的IP地址返回给用户。</p><p>⑦用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</p><p>　　DNS服务器根据用户IP地址，将域名解析成相应节点的缓存服务器IP地址，实现用户就近访问。使用CDN服务的网站，只需将其域名解析权交给CDN的GSLB设备，将需要分发的内容注入CDN，就可以实现内容加速了。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS是应用层协议，主要是将域名转换为ip地址</p><p>具体的查找过程和策略可以分为下面这几步：</p><p>先检查hosts，然后本地域名解析的缓存，再到tcp设置的DNS服务器，本地DNS请求根DNS，根DNS返回顶级域名服务器，顶级域名服务器若无法解析，则交给下一级的DNS服务器，重复操作，知道找到解析的主机为止。</p><p>（1）在浏览器中输入<a href="http://www.google.cn域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。" target="_blank" rel="noopener">www.google.cn域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a><br>（2）如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。<br>（3）如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。<br>（4）如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。<br>（5）如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(google.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找google.com域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.google.com主机。" target="_blank" rel="noopener">www.google.com主机。</a><br>（6）如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</p><p>Socket，tcp和HTTP的区别</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200313.png" srcset="/img/loading.gif" alt=""></p><p>socket是一个抽象层</p><h3 id="浏览器访问网页过程详解："><a href="#浏览器访问网页过程详解：" class="headerlink" title="浏览器访问网页过程详解："></a>浏览器访问网页过程详解：</h3><p>1.DNS解析，详见DNS过程</p><p>2.通过http协议交换数据</p><p>3.http转交给传输层，tcp建立连接，传输数据，断开连接。</p><p>4.tcp的报文会交给网络层程序，在网络上传输，路由选择</p><p>5.服务器接收到ip报文后，向上层层解析，一直到服务端的http，然后将相应结果通过http发送给客户端。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔面试记录</title>
    <link href="/2019/07/29/%E5%85%B6%E4%BB%96/%E7%AC%94%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/07/29/%E5%85%B6%E4%BB%96/%E7%AC%94%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>此篇博文主要用于记录，在准备秋招的笔试和面试过程中，遇到了一些自己认为该注意的点，不定期更新~<del></del>。</p><h2 id="一些知识点的记录："><a href="#一些知识点的记录：" class="headerlink" title="一些知识点的记录："></a>一些知识点的记录：</h2><p>continue 结束本次循环，进入下一轮</p><p>break 结束循环</p><p>“\n”换行 “\r”回车  </p><p>“%n” 平台无关换行</p><h3 id="import问题"><a href="#import问题" class="headerlink" title="import问题"></a>import问题</h3><p>在同一个包下，一个类访问另一个类的静态成员变量无需import 只要直接 类名.成员名即可</p><h3 id="ceil-和floor-区别"><a href="#ceil-和floor-区别" class="headerlink" title="ceil()和floor()区别"></a>ceil()和floor()区别</h3><p>ceil()对整形变量向左取整，返回类型为double型。不小于x的最大整数，如ceil(1.5) =2</p><p>floor()对整形变量向左取整，返回类型为double型。不大于x的最大整数，如floor(1.5) = 1;</p><p>round(x) = Math.floor(x+0.5) 四舍五入</p><h3 id="Stringbuffer-和Stringbuilder"><a href="#Stringbuffer-和Stringbuilder" class="headerlink" title="Stringbuffer 和Stringbuilder"></a>Stringbuffer 和Stringbuilder</h3><p>buffer 线程安全，先提出，builder线程不安全，后提出为了改善效率。</p><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>获取时间Date();<br>获取日期Calendar().getInstance();</p><h3 id="java-引用传递"><a href="#java-引用传递" class="headerlink" title="java 引用传递"></a>java 引用传递</h3><p>只存在值传递，只存在值传递！！！基础类型传值，引用了类型虽然传引用，但是传递的是传入的对象的一个拷贝的引用。修改并不影响原来对象。</p><h3 id="和equals"><a href="#和equals" class="headerlink" title="== 和equals"></a>== 和equals</h3><p>== 基本数据类型比较的是值</p><p>引用类型比较的是引用的对象的地址</p><p>equals 默认比较的是对象的地址（String重写了equals方法）</p><p>String类的equals方法步骤：</p><p>1.若A==B 即是同一个String对象 返回true</p><p>2.若对比对象是String类型则继续，否则返回false</p><p>3.判断A、B长度是否一样，不一样的话返回false</p><p>4。逐个字符比较，若有不相等字符，返回false</p><p>hashcode 两个对象equals 则hashcode一定相等，反之则不一定相等</p><p>若重写了equals的方法，则有必要重写hashcode方法，确保equals为true的两个对象的hashcode返回值相同。</p><h3 id="java-内部类"><a href="#java-内部类" class="headerlink" title="java 内部类"></a>java 内部类</h3><ul><li><p>成员内部类<br>等同与成员变量</p></li><li><p>局部内部类<br>等同与局部变量，没有修饰符，内部可访问。</p></li><li><p>匿名内部类<br>在实现父类或者接口时提供相应的对象而不许需要增加额外的方法。</p></li><li><p>静态内部类<br>静态成员变量，可以新建多个类，每次new都是不同的对象，但是和外部类之间没有强耦合，不用担心OOM</p><p><strong>其他</strong>：编译时得到两个class文件一个为外部类   Outter.class文件 另一个为内部类的字节码文件Outter$Inner.class</p></li></ul><h3 id="函数式接口-Functional-Interface"><a href="#函数式接口-Functional-Interface" class="headerlink" title="函数式接口(Functional Interface)"></a>函数式接口(Functional Interface)</h3><p>就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。函数式接口可以被隐式转换为 lambda 表达式。</p><p>函数式接口可以有方法的默认实现，也可以与静态的方法，也可以定义java.lang.Object 的public方法</p><p>可以用lambda表示一个函数式接口的实现</p><p><strong>常用的函数式接口</strong></p><p>​    java.lang.Runnable,</p><p>​    java.awt.event.ActionListener, </p><p>​    java.util.Comparator,</p><p>​    java.util.concurrent.Callable</p><p>​    java.util.function包下的接口，如Consumer、Predicate、Supplier等</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td><strong>Consumer<T>(消费型接口)</strong></td><td><strong>T</strong></td><td><strong>void</strong></td><td><strong>对类型为T的对象应用操作。void accept(T t)</strong></td></tr><tr><td><strong>Supplier<T>(供给型接口)</strong></td><td><strong>无</strong></td><td><strong>T</strong></td><td><strong>返回类型为T的对象。 T get();</strong></td></tr><tr><td><strong>Function&lt;T, R&gt;(函数型接口)</strong></td><td><strong>T</strong></td><td><strong>R</strong></td><td><strong>对类型为T的对象应用操作并返回R类型的对象。R apply(T t);</strong></td></tr><tr><td><strong>Predicate<T>(断言型接口)</strong></td><td><strong>T</strong></td><td><strong>boolean</strong></td><td><strong>确定类型为T的对象是否满足约束。boolean test(T t);</strong></td></tr></tbody></table><h3 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h3><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。（接口类中只能定义public static final常量）</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。</li><li>接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><h3 id="在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>在 Java 中定义一个不做事且没有参数的构造方法的作用</h3><p>Java 程序在执行子类的构造方法之前，如果没有用 <code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 <code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。 　</p><h3 id="构造方法有哪些特性？"><a href="#构造方法有哪些特性？" class="headerlink" title="构造方法有哪些特性？"></a>构造方法有哪些特性？</h3><ol><li>名字与类名相同。</li><li>没有返回值，但不能用void声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ol><h3 id="与-equals-重要"><a href="#与-equals-重要" class="headerlink" title="== 与 equals(重要)"></a>== 与 equals(重要)</h3><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><h3 id="List数组相互转换"><a href="#List数组相互转换" class="headerlink" title="List数组相互转换"></a>List数组相互转换</h3><p>java steam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer [] myArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>List myList = Arrays.stream(myArray).collect(Collectors.toList());<br><span class="hljs-comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span><br><span class="hljs-keyword">int</span> [] myArray2 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>List myList = Arrays.stream(myArray2).boxed().collect(Collectons.toList());<br></code></pre></td></tr></table></figure><p>​    Guava</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; il = ImmutableList.of(<span class="hljs-string">"string"</span>, <span class="hljs-string">"elements"</span>);  <span class="hljs-comment">// from varray</span><br>List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      <span class="hljs-comment">// from array</span><br></code></pre></td></tr></table></figure><h3 id="Collection-toArray-方法使用的坑-amp-如何反转数组"><a href="#Collection-toArray-方法使用的坑-amp-如何反转数组" class="headerlink" title="Collection.toArray()方法使用的坑&amp;如何反转数组"></a>Collection.toArray()方法使用的坑&amp;如何反转数组</h3><p>该方法是一个泛型方法：<code>&lt;T&gt; T[] toArray(T[] a);</code> 如果<code>toArray</code>方法中没有传递任何参数的话返回的是<code>Object</code>类型数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String [] s= <span class="hljs-keyword">new</span> String[]&#123;<br>    <span class="hljs-string">"dog"</span>, <span class="hljs-string">"lazy"</span>, <span class="hljs-string">"a"</span>, <span class="hljs-string">"over"</span>, <span class="hljs-string">"jumps"</span>, <span class="hljs-string">"fox"</span>, <span class="hljs-string">"brown"</span>, <span class="hljs-string">"quick"</span>, <span class="hljs-string">"A"</span><br>&#125;;<br>List&lt;String&gt; list = Arrays.asList(s);<br>Collections.reverse(list);<br>s=list.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]);<span class="hljs-comment">//没有指定类型的话会报错</span><br></code></pre></td></tr></table></figure><p>由于JVM优化，<code>new String[0]</code>作为<code>Collection.toArray()</code>方法的参数现在使用更好，<code>new String[0]</code>就是起一个模板的作用，指定了返回数组的类型，0是为了节省空间，因为它只是为了说明返回的类型。</p><h3 id="不要在-foreach-循环里进行元素的-remove-add-操作"><a href="#不要在-foreach-循环里进行元素的-remove-add-操作" class="headerlink" title="不要在 foreach 循环里进行元素的 remove/add 操作"></a>不要在 foreach 循环里进行元素的 remove/add 操作</h3><p>如果要进行<code>remove</code>操作，可以调用迭代器的 <code>remove</code>方法而不是集合类的 remove 方法。因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身<code>remove/add</code>方法，迭代器都将抛出一个<code>ConcurrentModificationException</code>,这就是单线程状态下产生的 <strong>fail-fast 机制</strong>。</p><blockquote><p><strong>fail-fast 机制</strong> ：多个线程对 fail-fast 集合进行修改的时，可能会抛出ConcurrentModificationException，单线程下也会出现这种情况，上面已经提到过。</p></blockquote><h3 id="String类的Intern方法"><a href="#String类的Intern方法" class="headerlink" title="String类的Intern方法"></a>String类的Intern方法</h3><p>string的两种构造方式:</p><ol><li>直接使用“”进行构造，字符串对象直接在常量池中创建（jdk 1.7 后常量池移到了堆中，1.6时常量池和方法区在一起）</li><li>使用new String()进行对象的创建，直接在堆中构建一个新的对象</li></ol><p>Intern方法：</p><p>intern方法可以看成返回常量池中该字符串对象的引用。如果没有该字符串对象就把这个对象（或引用）加到常量池。</p><h3 id="新建一个类的方式"><a href="#新建一个类的方式" class="headerlink" title="新建一个类的方式"></a>新建一个类的方式</h3><ol><li>new 一个对象</li><li>调用clone()方法</li><li>使用反射构造一个对象</li><li>反序列化一个对象</li></ol><h3 id="java和C-区别"><a href="#java和C-区别" class="headerlink" title="java和C++区别"></a>java和C++区别</h3><p>java内存管理，C++指针访问，需要自己释放内存</p><p>java单继承，C++多继承</p><h3 id="构造函数Constructor重载和重写问题"><a href="#构造函数Constructor重载和重写问题" class="headerlink" title="构造函数Constructor重载和重写问题"></a>构造函数Constructor重载和重写问题</h3><p>可以被重载，即一个类中可以有多个构造器</p><p>不可以被重写，子类无法继承父类的构造函数和私有属性吗,(私有方法可以继承不能重写）</p><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><ul><li><strong>重载：</strong> 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。 　　</li><li><strong>重写：</strong> 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法。</li></ul><h3 id="Java-面向对象编程三大特性-封装-继承-多态"><a href="#Java-面向对象编程三大特性-封装-继承-多态" class="headerlink" title="Java 面向对象编程三大特性: 封装 继承 多态"></a>Java 面向对象编程三大特性: 封装 继承 多态</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（override重写）。</li></ol><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）</p><h3 id="构造方法有哪些特性？-1"><a href="#构造方法有哪些特性？-1" class="headerlink" title="构造方法有哪些特性？"></a>构造方法有哪些特性？</h3><ol><li>名字与类名相同。</li><li>没有返回值，但不能用void声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java 面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaIO</title>
    <link href="/2019/07/10/java/JavaIO%E6%80%BB%E7%BB%93/"/>
    <url>/2019/07/10/java/JavaIO%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>Java 中的 BIO、NIO和 AIO 理解为是 Java 语言对操作系统的各种 IO 模型的封装。</p><h2 id="BIO、NIO、AIO的区别"><a href="#BIO、NIO、AIO的区别" class="headerlink" title="BIO、NIO、AIO的区别"></a>BIO、NIO、AIO的区别</h2><ol><li>BIO 就是传统的 java.io 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用时可靠的线性顺序。它的有点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。（同步、阻塞）</li><li>NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。（同步、非阻塞）</li><li>AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。（异步，阻塞）</li></ol><h2 id="IO的类型"><a href="#IO的类型" class="headerlink" title="IO的类型"></a>IO的类型</h2><ul><li>InputStream、OutputStream 基于字节操作的 IO</li><li>Writer、Reader 基于字符操作的 IO</li><li>File 基于磁盘操作的 IO</li><li>Socket 基于网络操作的 IO</li></ul><h2 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h2><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201940.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><ul><li>即 <code>Java New IO</code></li><li>是1个全新的、 <code>JDK 1.4</code>后提供的 <code>IO API</code></li><li>提供了与标准<code>IO</code>不同的<code>IO</code>工作方式</li><li>可替代 标准<code>Java IO</code> 的<code>IO API</code></li></ul><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111201952.png" srcset="/img/loading.gif" alt=""></p><p>主要组件：</p><p><strong>Channel ：</strong>相当于IO中的stream，但是Channel是双向的，既可以用来进行读操作，又可以用来进行写操作。</p><ul><li>FileChannel：作用于IO文件流</li><li>DatagramChannel：作用于UDP协议</li><li>SocketChannel：作用于TCP协议</li><li>ServerSocketChannel：作用于TCP协议</li></ul><p><strong>Buffer：</strong>缓冲区，用在线程和channel之间，来缓存数据</p><p><strong>Selector：</strong> 选择器是NIO的核心，它是channel的管理者通过执行select()阻塞方法，监听是否有channel准备好，一旦有数据可读，此方法的返回值是SelectionKey的数量</p><p>NIO代码示例</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.blog.test.NioTest;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.*;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyNioServer</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Selector selector;          <span class="hljs-comment">//创建一个选择器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> port = <span class="hljs-number">8686</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> BUF_SIZE = <span class="hljs-number">10240</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建通道管理器对象selector</span><br>        <span class="hljs-keyword">this</span>.selector=Selector.open();<br><br>        <span class="hljs-comment">//创建一个通道对象channel</span><br>        ServerSocketChannel channel = ServerSocketChannel.open();<br>        channel.configureBlocking(<span class="hljs-keyword">false</span>);       <span class="hljs-comment">//将通道设置为非阻塞</span><br>        channel.socket().bind(<span class="hljs-keyword">new</span> InetSocketAddress(port));       <span class="hljs-comment">//将通道绑定在8686端口</span><br><br>        <span class="hljs-comment">//将上述的通道管理器和通道绑定，并为该通道注册OP_ACCEPT事件</span><br>        <span class="hljs-comment">//注册事件后，当该事件到达时，selector.select()会返回（一个key），如果该事件没到达selector.select()会一直阻塞</span><br>        SelectionKey selectionKey = channel.register(selector,SelectionKey.OP_ACCEPT);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;       <span class="hljs-comment">//轮询</span><br>            selector.select();          <span class="hljs-comment">//这是一个阻塞方法，一直等待直到有数据可读，返回值是key的数量（可以有多个）</span><br>            Set keys = selector.selectedKeys();         <span class="hljs-comment">//如果channel有数据了，将生成的key访入keys集合中</span><br>            Iterator iterator = keys.iterator();        <span class="hljs-comment">//得到这个keys集合的迭代器</span><br>            <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;             <span class="hljs-comment">//使用迭代器遍历集合</span><br>                SelectionKey key = (SelectionKey) iterator.next();       <span class="hljs-comment">//得到集合中的一个key实例</span><br>                iterator.remove();          <span class="hljs-comment">//拿到当前key实例之后记得在迭代器中将这个元素删除，非常重要，否则会出错</span><br>                <span class="hljs-keyword">if</span> (key.isAcceptable())&#123;         <span class="hljs-comment">//判断当前key所代表的channel是否在Acceptable状态，如果是就进行接收</span><br>                    doAccept(key);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable())&#123;<br>                    doRead(key);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isWritable() &amp;&amp; key.isValid())&#123;<br>                    doWrite(key);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isConnectable())&#123;<br>                    System.out.println(<span class="hljs-string">"连接成功！"</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAccept</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();<br>        System.out.println(<span class="hljs-string">"ServerSocketChannel正在循环监听"</span>);<br>        SocketChannel clientChannel = serverChannel.accept();<br>        clientChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        clientChannel.register(key.selector(),SelectionKey.OP_READ);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doRead</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SocketChannel clientChannel = (SocketChannel) key.channel();<br>        ByteBuffer byteBuffer = ByteBuffer.allocate(BUF_SIZE);<br>        <span class="hljs-keyword">long</span> bytesRead = clientChannel.read(byteBuffer);<br>        <span class="hljs-keyword">while</span> (bytesRead&gt;<span class="hljs-number">0</span>)&#123;<br>            byteBuffer.flip();<br>            <span class="hljs-keyword">byte</span>[] data = byteBuffer.array();<br>            String info = <span class="hljs-keyword">new</span> String(data).trim();<br>            System.out.println(<span class="hljs-string">"从客户端发送过来的消息是："</span>+info);<br>            byteBuffer.clear();<br>            bytesRead = clientChannel.read(byteBuffer);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (bytesRead==-<span class="hljs-number">1</span>)&#123;<br>            clientChannel.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doWrite</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        ByteBuffer byteBuffer = ByteBuffer.allocate(BUF_SIZE);<br>        byteBuffer.flip();<br>        SocketChannel clientChannel = (SocketChannel) key.channel();<br>        <span class="hljs-keyword">while</span> (byteBuffer.hasRemaining())&#123;<br>            clientChannel.write(byteBuffer);<br>        &#125;<br>        byteBuffer.compact();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        MyNioServer myNioServer = <span class="hljs-keyword">new</span> MyNioServer();<br>        myNioServer.initServer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.blog.test.NioTest;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyNioClient</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Selector selector;          <span class="hljs-comment">//创建一个选择器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> port = <span class="hljs-number">8686</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> BUF_SIZE = <span class="hljs-number">10240</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ByteBuffer byteBuffer = ByteBuffer.allocate(BUF_SIZE);<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">initClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.selector = Selector.open();<br>        SocketChannel clientChannel = SocketChannel.open();<br>        clientChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        clientChannel.connect(<span class="hljs-keyword">new</span> InetSocketAddress(port));<br>        clientChannel.register(selector, SelectionKey.OP_CONNECT);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            selector.select();<br>            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();<br>            <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>                SelectionKey key = iterator.next();<br>                iterator.remove();<br>                <span class="hljs-keyword">if</span> (key.isConnectable())&#123;<br>                    doConnect(key);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable())&#123;<br>                    doRead(key);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doConnect</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SocketChannel clientChannel = (SocketChannel) key.channel();<br>        <span class="hljs-keyword">if</span> (clientChannel.isConnectionPending())&#123;<br>            clientChannel.finishConnect();<br>        &#125;<br>        clientChannel.configureBlocking(<span class="hljs-keyword">false</span>);<br>        String info = <span class="hljs-string">"服务端你好!!"</span>;<br>        byteBuffer.clear();<br>        byteBuffer.put(info.getBytes(<span class="hljs-string">"UTF-8"</span>));<br>        byteBuffer.flip();<br>        clientChannel.write(byteBuffer);<br>        <span class="hljs-comment">//clientChannel.register(key.selector(),SelectionKey.OP_READ);</span><br>        clientChannel.close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doRead</span><span class="hljs-params">(SelectionKey key)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SocketChannel clientChannel = (SocketChannel) key.channel();<br>        clientChannel.read(byteBuffer);<br>        <span class="hljs-keyword">byte</span>[] data = byteBuffer.array();<br>        String msg = <span class="hljs-keyword">new</span> String(data).trim();<br>        System.out.println(<span class="hljs-string">"服务端发送消息："</span>+msg);<br>        clientChannel.close();<br>        key.selector().close();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        MyNioClient myNioClient = <span class="hljs-keyword">new</span> MyNioClient();<br>        myNioClient.initClient();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>IO 是同步阻塞的，一个线程只能处理一个链路，可以使用线程池来处理，但本质上还是同步的，当前线程只能阻塞到IO准备好为止，才能进行IO</p><p>NIO Non-blocking IO/New IO 同步非阻塞，</p><p>面向流和面向缓冲区：NIO是面向缓冲区的，将所有数据读到或者写到缓冲区再进行操作。</p><p>通道： 通道是双向的，既可以写也可以读，不需要为输入输出单独建流。</p><p>选择器：NIO通过选择器来监控多个通道的状态，这样无需为每一个单独的连接建立一个线程，可以实现单线程管理多个通道，提高系统效率。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven</title>
    <link href="/2019/06/30/%E5%B7%A5%E5%85%B7/maven/"/>
    <url>/2019/06/30/%E5%B7%A5%E5%85%B7/maven/</url>
    
    <content type="html"><![CDATA[<h2 id="1、POM"><a href="#1、POM" class="headerlink" title="1、POM"></a>1、POM</h2><p>pom文件是maven工程的基本工作单元，在项目的根目录下（模块项目则在模块的根目录下）</p><p>POM 中可以指定以下配置：</p><ul><li>项目依赖</li><li>插件</li><li>执行目标</li><li>项目构建 profile</li><li>项目版本</li><li>项目开发者列表</li><li>相关邮件列表信息</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span> = <span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span><br>    <span class="hljs-attr">xmlns:xsi</span> = <span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span><br>    <span class="hljs-attr">xsi:schemaLocation</span> = <span class="hljs-string">"http://maven.apache.org/POM/4.0.0<br>    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 模型版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.companyname.project-group<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 版本号 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br>1、Snapshot 版本代表不稳定、尚处于开发中的版本。<br>2、Release 版本则代表稳定的版本。<br></code></pre></td></tr></table></figure><h2 id="maven-生命周期"><a href="#maven-生命周期" class="headerlink" title="maven 生命周期"></a>maven 生命周期</h2><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200515.png" srcset="/img/loading.gif" alt=""></p><table><thead><tr><th>验证 validate</th><th>验证项目</th><th>验证项目是否正确且所有必须信息是可用的</th></tr></thead><tbody><tr><td>编译 compile</td><td>执行编译</td><td>源代码编译在此阶段完成</td></tr><tr><td>测试 Test</td><td>测试</td><td>使用适当的单元测试框架（例如JUnit）运行测试。</td></tr><tr><td>包装 package</td><td>打包</td><td>创建JAR/WAR包如在 pom.xml 中定义提及的包</td></tr><tr><td>检查 verify</td><td>检查</td><td>对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td>安装 install</td><td>安装</td><td>安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td>部署 deploy</td><td>部署</td><td>拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table><h2 id="maven-仓库"><a href="#maven-仓库" class="headerlink" title="maven 仓库"></a>maven 仓库</h2><ul><li>本地（local）</li><li>中央（central）</li><li>私服 （private）</li></ul><p>查找顺序，先在本地仓库查找依赖，如果没有的话去私服上找依赖，并缓存到本地，如果私服找不到，则去中央仓库中寻找，并缓存到私服。</p><h2 id="maven-依赖引入"><a href="#maven-依赖引入" class="headerlink" title="maven 依赖引入"></a>maven 依赖引入</h2><p>在pom文件中使用dependency标签导入maven依赖</p><h5 id="多重依赖解决方式"><a href="#多重依赖解决方式" class="headerlink" title="多重依赖解决方式"></a>多重依赖解决方式</h5><p>路径最近者优先<br>第一声明者优先</p><p>dependencyManagement: 能让子POM继承父POM的配置的同时, 又能够保证子模块的灵活性: 在父POMdependencyManagement元素配置的依赖声明不会实际引入子模块中, 但能够约束子模块dependencies下的依赖的使用(子模块只需配置groupId与artifactId, 见下).<br>pluginManagement: 与dependencyManagement类似, 配置的插件不会造成实际插件的调用行为, 只有当子POM中配置了相关plugin元素, 才会影响实际的插件行为.</p><h2 id="maven-模块聚合和模块继承"><a href="#maven-模块聚合和模块继承" class="headerlink" title="maven 模块聚合和模块继承"></a>maven 模块聚合和模块继承</h2><h3 id="模块聚合"><a href="#模块聚合" class="headerlink" title="模块聚合"></a>模块聚合</h3><p>推荐将聚合POM放在项目目录的最顶层, 其他模块作为聚合模块的子目录</p><h3 id="模块继承"><a href="#模块继承" class="headerlink" title="模块继承"></a>模块继承</h3><p>子项目可以继承父项目的pom</p><p>推荐: 模块继承与模块聚合同时进行,这意味着, 你可以为你的所有模块指定一个父工程, 同时父工程中可以指定其余的Maven模块作为它的聚合模块. 但需要遵循以下三条规则:</p><p>在所有子POM中指定它们的父POM;<br>将父POM的packaging值设为pom;<br>在父POM中指定子模块/子POM的目录</p><h4 id="超级pom-约定优先于配置"><a href="#超级pom-约定优先于配置" class="headerlink" title="超级pom-约定优先于配置"></a>超级pom-约定优先于配置</h4><p>任何一个Maven项目都<strong>隐式地继承自超级POM</strong>, 因此<strong>超级POM的大量配置都会被所有的Maven项目继承</strong>, 这些配置也成为了Maven所提倡的约定.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java 开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2019/06/29/%E5%B7%A5%E5%85%B7/git/"/>
    <url>/2019/06/29/%E5%B7%A5%E5%85%B7/git/</url>
    
    <content type="html"><![CDATA[<h2 id="git-相关"><a href="#git-相关" class="headerlink" title="git 相关"></a>git 相关</h2><p>git fetch 拉取版本库变化</p><p>远程库命名 origin</p><p>head 指针 指向当前操作的节点</p><p>checkout 切换分支</p><p>branch  创建新分支/不加名字可以查看当前本地分支，查看远程分支采用branch -a，删除分支用branch -d</p><p>merge 分支合并 将其他合并到当前分支上，合并冲突问题 要没有冲突才可以merge，fast-forward模式，会丢失合并前的分支信息，使用–no-ff 禁用fast-forward，并产生一个新的提交commit。可以使用git log 查看提交历史。</p><p>git stash 临时保存 list 查看保存的现场  apply：恢复并保留记录，drop删除记录，pop 恢复并删除。</p><p>git status 查看工作区</p><p>git rebase 把代码建立在别人的基础上</p>]]></content>
    
    
    
    <tags>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8新特性</title>
    <link href="/2019/06/23/java/java8New/"/>
    <url>/2019/06/23/java/java8New/</url>
    
    <content type="html"><![CDATA[<h2 id="1-接口默认方法"><a href="#1-接口默认方法" class="headerlink" title="1.接口默认方法"></a>1.接口默认方法</h2><p>可使用<code>default</code>关键字向接口添加非抽象方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Formula</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">double</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.sqrt(a);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-lambda表达式"><a href="#2-lambda表达式" class="headerlink" title="2.lambda表达式"></a>2.lambda表达式</h2><p>lambda运算符：所有的lambda表达式都是用新的lambda运算符 “ =&gt; “,可以叫他，“转到”或者 “成为”。运算符将表达式分为两部分，左边指定输入参数，右边是lambda的主体。lambda实质是对接口的实现。</p><p>lambda表达式：</p><p>1.一个参数：param -&gt; expr</p><p>2.多个参数：（param-list）-&gt; expr</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 不需要参数,返回值为 5  </span><br>() -&gt; <span class="hljs-number">5</span>  <br>  <br><span class="hljs-comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br>x -&gt; <span class="hljs-number">2</span> * x  <br>  <br><span class="hljs-comment">// 3. 接受2个参数(数字),并返回他们的差值  </span><br>(x, y) -&gt; x – y  <br>  <br><span class="hljs-comment">// 4. 接收2个int型整数,返回他们的和  </span><br>(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y) -&gt; x + y  <br>  <br><span class="hljs-comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br>(String s) -&gt; System.out.print(s)<br></code></pre></td></tr></table></figure><p>lambda表达式作用域：</p><ul><li>局部变量，必须用final修饰，否则在使用后无法被修改，（隐形设为了final）。</li><li>实例变量和静态变量，lambda均可以访问。</li><li>默认接口方法：不适用于lambda表达式。</li></ul><p>lambda 使用场景：</p><ul><li><h2 id="3-函数式接口"><a href="#3-函数式接口" class="headerlink" title="3.函数式接口"></a>3.函数式接口</h2></li></ul><p><strong>“函数式接口”是指仅仅只包含一个抽象方法,但是可以有多个非抽象方法(也就是上面提到的默认方法)的接口。</strong>使用<code>@FunctionalInterface</code> 注解进行声明,编译器会在编译的时候进行检查。</p><p>四大内置函数式接口    java.util.function包下:</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td><strong>Consumer<T>(消费型接口)</strong></td><td><strong>T</strong></td><td><strong>void</strong></td><td><strong>对类型为T的对象应用操作。void accept(T t)</strong></td></tr><tr><td><strong>Supplier<T>(供给型接口)</strong></td><td><strong>无</strong></td><td><strong>T</strong></td><td><strong>返回类型为T的对象。 T get();</strong></td></tr><tr><td><strong>Function&lt;T, R&gt;(函数型接口)</strong></td><td><strong>T</strong></td><td><strong>R</strong></td><td><strong>对类型为T的对象应用操作并返回R类型的对象。R apply(T t);</strong></td></tr><tr><td><strong>Predicate<T>(断言型接口)</strong></td><td><strong>T</strong></td><td><strong>boolean</strong></td><td><strong>确定类型为T的对象是否满足约束。boolean test(T t);</strong></td></tr></tbody></table><h4 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h4><p>Predicate 接口是只有一个参数的返回布尔类型值的 <strong>断言型</strong> 接口。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）</p><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>Function 接口接受一个参数并生成结果。</p><h4 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h4><p>Supplier 接口产生给定泛型类型的结果。 与 Function 接口不同，Supplier 接口不接受参数。</p><h4 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h4><p>Consumer 接口表示要对单个输入参数执行的操作。</p><h2 id="4-方法与构造函数引用"><a href="#4-方法与构造函数引用" class="headerlink" title="4.方法与构造函数引用"></a>4.方法与构造函数引用</h2><p>Java 8允许您通过<code>::</code>关键字传递方法或构造函数的引用。 上面的示例显示了如何引用静态方法。 但我们也可以引用对象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Something</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">startsWith</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> String.valueOf(s.charAt(<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String [] args)</span> </span>&#123;<br>        Something something = <span class="hljs-keyword">new</span> Something();<br>        Converter&lt;String, String&gt; converter = something::startsWith;<br>        String converted = converter.convert(<span class="hljs-string">"Java"</span>);<br>        System.out.println(converted);    <span class="hljs-comment">// "J"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造器的方法引用</p><p>接下来看看构造函数是如何使用<code>::</code>关键字来引用的，首先我们定义一个包含多个构造函数的简单类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String firstName;<br>    String lastName;<br><br>    Person() &#123;&#125;<br><br>    Person(String firstName, String lastName) &#123;<br>        <span class="hljs-keyword">this</span>.firstName = firstName;<br>        <span class="hljs-keyword">this</span>.lastName = lastName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们指定一个用来创建Person对象的对象工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonFactory</span>&lt;<span class="hljs-title">P</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>&gt; </span>&#123;<br>    <span class="hljs-function">P <span class="hljs-title">create</span><span class="hljs-params">(String firstName, String lastName)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们使用构造函数引用来将他们关联起来，而不是手动实现一个完整的工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码三</span><br>PersonFactory&lt;Person&gt; personFactory = Person::<span class="hljs-keyword">new</span>;<br>Person person = personFactory.create(<span class="hljs-string">"Peter"</span>, <span class="hljs-string">"Parker"</span>);<br></code></pre></td></tr></table></figure><p>理解（个人向）定义了一个返回P对象的接口，在代码三中采用Person的构造函数对赋值给了这个接口的对象，在下面create调用中，自动调用了构造方法。</p><h2 id="5-Optionals"><a href="#5-Optionals" class="headerlink" title="5.Optionals"></a>5.Optionals</h2><p>Optionals不是函数式接口，而是用于防止 NullPointerException 的漂亮工具。这是下一节的一个重要概念，让我们快速了解一下Optionals的工作原理。</p><p>Optional 是一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是有时却什么也没有返回，而在Java 8中，你应该返回 Optional 而不是 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//of（）：为非null的值创建一个Optional</span><br>Optional&lt;String&gt; optional = Optional.of(<span class="hljs-string">"bam"</span>);<br><span class="hljs-comment">// isPresent（）： 如果值存在返回true，否则返回false</span><br>optional.isPresent();           <span class="hljs-comment">// true</span><br><span class="hljs-comment">//get()：如果Optional有值则将其返回，否则抛出NoSuchElementException</span><br>optional.get();                 <span class="hljs-comment">// "bam"</span><br><span class="hljs-comment">//orElse（）：如果有值则将其返回，否则返回指定的其它值</span><br>optional.orElse(<span class="hljs-string">"fallback"</span>);    <span class="hljs-comment">// "bam"</span><br><span class="hljs-comment">//ifPresent（）：如果Optional实例有值则为其调用consumer，否则不做处理</span><br>optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="hljs-number">0</span>)));     <span class="hljs-comment">// "b"</span><br></code></pre></td></tr></table></figure><h2 id="6-Steam"><a href="#6-Steam" class="headerlink" title="6.Steam"></a>6.Steam</h2><p><code>java.util.Stream</code> 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。Stream 的创建需要指定一个数据源，比如<code>java.util.Collection</code> 的子类，List 或者 Set， Map 不支持。Stream 的操作可以串行执行或者并行执行。</p><p>首先看看Stream是怎么用，首先创建实例代码的用到的数据List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; stringList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>stringList.add(<span class="hljs-string">"ddd2"</span>);<br>stringList.add(<span class="hljs-string">"aaa2"</span>);<br>stringList.add(<span class="hljs-string">"bbb1"</span>);<br>stringList.add(<span class="hljs-string">"aaa1"</span>);<br>stringList.add(<span class="hljs-string">"bbb3"</span>);<br>stringList.add(<span class="hljs-string">"ccc"</span>);<br>stringList.add(<span class="hljs-string">"bbb2"</span>);<br>stringList.add(<span class="hljs-string">"ddd1"</span>);<br></code></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>filter 通过一个predicate接口来过滤元素，中间操作。</p><p>forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 Filter(过滤)</span><br>stringList.stream()<br>    .filter((s) -&gt; s.startsWith(<span class="hljs-string">"a"</span>))<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>Sorted</p><p>排序是一个 <strong>中间操作</strong>，返回的是排序好后的 Stream。<strong>如果你不指定一个自定义的 Comparator 则会使用默认排序。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 Sort (排序)</span><br>stringList<br>    .stream()<br>    .sorted()<br>    .filter((s) -&gt; s.startsWith(<span class="hljs-string">"a"</span>))<br>    .forEach(System.out::println);<span class="hljs-comment">// aaa1 aaa2</span><br></code></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 Map 操作</span><br>stringList<br>    .stream()<br>    .map(String::toUpperCase)<br>    .sorted((a, b) -&gt; b.compareTo(a))<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h4><p>Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是 <strong>最终操作</strong> ，并返回一个 boolean 类型的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试 Match (匹配)操作</span><br><span class="hljs-keyword">boolean</span> anyStartsWithA =<br>    stringList<br>.stream()<br>    .anyMatch((s) -&gt; s.startsWith(<span class="hljs-string">"a"</span>));<br>System.out.println(anyStartsWithA);      <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">boolean</span> allStartsWithA =<br>    stringList<br>.stream()<br>    .allMatch((s) -&gt; s.startsWith(<span class="hljs-string">"a"</span>));<br><br>System.out.println(allStartsWithA);      <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">boolean</span> noneStartsWithZ =<br>    stringList<br>    .stream()<br>    .noneMatch((s) -&gt; s.startsWith(<span class="hljs-string">"z"</span>));<br><br>System.out.println(noneStartsWithZ);      <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><p>计数是一个 <strong>最终操作</strong>，返回Stream中元素的个数，<strong>返回值类型是 long</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试 Count (计数)操作</span><br><span class="hljs-keyword">long</span> startsWithB =<br>    stringList<br>.stream()<br>    .filter((s) -&gt; s.startsWith(<span class="hljs-string">"b"</span>))<br>    .count();<br>System.out.println(startsWithB);    <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p>这是一个 <strong>最终操作</strong> ，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规约后的结果是通过Optional 接口表示的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试 Reduce (规约)操作</span><br>Optional&lt;String&gt; reduced =<br>    stringList<br>    .stream()<br>    .sorted()<br>    .reduce((s1, s2) -&gt; s1 + <span class="hljs-string">"#"</span> + s2);<br>reduced.ifPresent(System.out::println);<br></code></pre></td></tr></table></figure><h2 id="Parallel-Streams-并行流"><a href="#Parallel-Streams-并行流" class="headerlink" title="Parallel Streams(并行流)"></a>Parallel Streams(并行流)</h2><p>前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//并行排序</span><br><span class="hljs-keyword">long</span> t0 = System.nanoTime();<br><br><span class="hljs-keyword">long</span> count = values.parallelStream().sorted().count();<br>System.out.println(count);<br><br><span class="hljs-keyword">long</span> t1 = System.nanoTime();<br><br><span class="hljs-keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);<br>System.out.println(String.format(<span class="hljs-string">"parallel sort took: %d ms"</span>, millis));<br></code></pre></td></tr></table></figure><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>前面提到过，Map 类型不支持 streams，不过Map提供了一些新的有用的方法来处理一些日常任务。Map接口本身没有可用的 <code>stream（）</code>方法，但是你可以在键，值上创建专门的流或者通过 <code>map.keySet().stream()</code>,<code>map.values().stream()</code>和<code>map.entrySet().stream()</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java容器</title>
    <link href="/2019/06/20/java/Java%E5%AE%B9%E5%99%A8/"/>
    <url>/2019/06/20/java/Java%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h2><p>主要有两种Collection 和 Map，Collection主要是集合，而Map是键值对映射。</p><h3 id="为什么要有hashCode"><a href="#为什么要有hashCode" class="headerlink" title="为什么要有hashCode"></a>为什么要有hashCode</h3><p><strong>我们以“HashSet如何检查重复”为例子来说明为什么要有hashCode：</strong></p><p>当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与其他已经加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head fist java》第二版）。这样我们就大大减少了equals的次数，相应就大大提高了执行速度。</p><h3 id="hashCode（）与equals（）的相关规定"><a href="#hashCode（）与equals（）的相关规定" class="headerlink" title="hashCode（）与equals（）的相关规定"></a>hashCode（）与equals（）的相关规定</h3><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个对象分别调用equals方法都返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li><strong>因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</strong></li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><h3 id="为什么两个对象有相同的hashcode值，它们也不一定是相等的？"><a href="#为什么两个对象有相同的hashcode值，它们也不一定是相等的？" class="headerlink" title="为什么两个对象有相同的hashcode值，它们也不一定是相等的？"></a>为什么两个对象有相同的hashcode值，它们也不一定是相等的？</h3><p>在这里解释一位小伙伴的问题。以下内容摘自《Head Fisrt Java》。</p><p>因为hashCode() 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode）。</p><p>我们刚刚也提到了 HashSet,如果 HashSet 在对比的时候，同样的 hashcode 有多个对象，它会使用 equals() 来判断是否真的相同。也就是说 hashcode 只是用来缩小查找成本。</p><h3 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h3><p>所有实现了Collection接口的容器类都有一个iterator()方法用以返回一个实现了Iterator接口的对象，这个对象可以是多种类型，不同的Collection实现类型遍历方式不同（用于遍历集合类）。</p><p>Iterator对象称作迭代器，用以方便的实现对容器内元素的遍历操作。</p><p>一句话总结，Iterator就是一个统一的遍历Collection中的元素的接口。</p><p>Iterator接口定义了如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//判断游标右边是否有元素</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//返回游标右边的元素并将游标移动到下一个位置</span><br><span class="hljs-function">E <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//删除游标左边的元素，在执行完next之后该操作只能执行一次</span><br><span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>Iterator对象的remove方法是在迭代过程中删除元素的唯一安全的方法。</p><p>增强的for循环对于遍历array或Collection的时候相当简便</p><p>缺陷：1.数组不能方便的访问下标值</p><p>​           2.集合与使用Iterator相比，不能方便的删除结合中的内容，在内部也是调用Iterator</p><h3 id="Map类集合"><a href="#Map类集合" class="headerlink" title="Map类集合"></a>Map类集合</h3><table><thead><tr><th>Map集合类</th><th>key</th><th>value</th><th>Super</th><th>JDK</th><th>说明</th></tr></thead><tbody><tr><td>HashTable</td><td>不允许为null</td><td>不允许为null</td><td>Dictionary</td><td>1.0</td><td>线程安全（过时）</td></tr><tr><td>ConcurrenHashMap</td><td>不允许为null</td><td>不允许为null</td><td>AbstractMap</td><td>1.5</td><td>锁分段技术或CAS（JDK8及以上）</td></tr><tr><td>TreeMap</td><td>不允许为null</td><td>允许为null</td><td>AbstractMap</td><td>1.2</td><td>线程不安全（有序）</td></tr><tr><td>HashMap</td><td>允许为null</td><td>允许为null</td><td>AbstractMap</td><td>1.2</td><td>线程不安全（resize死链问题）</td></tr></tbody></table><p>HashMap均可以为null，而tree由于需要比较key，所以key不能为null，其他的都不允许为空。</p><p>TreeMap 底层采用红黑树。</p><p>TreeSet底层实现是采用TreeMap，而HashSet底层是采用HashMap实现</p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>一种平衡二叉查找树,查找树(左节点上的值小于根节点，右节点上的值大于根节点),平衡查找树(左右子树的高度差的绝对值最大为1)</p><p>1）节点要么为红色，要么为黑色。（不然为啥叫红黑树；））</p><p>2）根节点为黑色。</p><p>3）叶子节点为黑色。 （这两个简直送分，最上面和最下面都是黑的）</p><p>4）每个红色节点的左右孩子都是黑色。 （保证了从根节点到叶子节点不会出现连续两个红色节点）</p><p>5）从任意节点到其每个叶子节点的所有路径，都包含相同数目的黑色节点。（4,5是使得红黑树为平衡树的关键）</p><h3 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h3><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>在所有put操作的时候都用synchronized进行加锁。</p><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p>是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表</p><p>采用volatile修饰value和链表的Entry保证多线程的可见性。</p><p>1.7版本：</p><p>采用segment进行分段，每段只能同时有一个线程操作，put时，先通过key定位到对应的segment，然后竞争时自旋获取对应段的锁。由于value属性是采用volatile修饰，因此get时无需加锁。</p><p>扩容的优化：原来是采用头插法进行链表的复制，高并发的情况下，可能会出现环链表。</p><p>1.8版本：</p><p>其中抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p><p>扩容机制修改了原来的头插法，改为了将原来的node分为保留的和新加的桶里，原来位置的元素只可能在i位置和i+oldcCap位置(hash的特性)</p><h2 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h2><h3 id="Arrays-工具类"><a href="#Arrays-工具类" class="headerlink" title="Arrays 工具类"></a>Arrays 工具类</h3><p> 常用方法</p><ul><li><strong>binarySearch</strong>(byte[] a, byte key) 使用二分搜索法来搜索指定的 byte 型数组，以获得指定的值。</li><li><strong>binarySearch</strong>(byte[] a, int fromIndex, int toIndex, byte key) 使用二分搜索法来搜索指定的 byte 型数组的范围，以获得指定的值。</li><li><strong>copyOf</strong>(byte[] original, int newLength) 复制指定的数组，截取或用 0 填充（如有必要），以使副本具有指定的长度。</li><li><strong>copyOfRange</strong>(boolean[] original, int from, int to) 将指定数组的指定范围复制到一个新数组。</li><li><strong>equals</strong>(byte[] a, byte[] a2) 如果两个指定的 byte 型数组彼此<em>相等</em>，则返回 true。</li><li><strong>fill</strong>(byte[] a, byte val) 将指定的 byte 值分配给指定 byte 节型数组的<strong>每个</strong>元素。</li><li><strong>sort</strong>(byte[] a) 对指定的 byte 型数组按数字升序进行排序。</li><li><strong>sort</strong>(byte[] a, int fromIndex, int toIndex) 对指定 byte 型数组的指定范围按数字升序进行排序。</li><li><strong>toString</strong>(byte[] a) 返回指定数组内容的字符串表示形式。</li></ul><p>sort算法timesort，归并加二分。</p><h3 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h3><p> 常用方法</p><ul><li><strong>addAll</strong>(Collection&lt;? super T&gt; c, T… elements) 将所有指定元素添加到指定 collection 中。</li><li><strong>binarySearch</strong>(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) 使用二分搜索法搜索指定列表，以获得指定对象（实现Comparable接口）。</li><li><strong>binarySearch</strong>(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c) 使用二分搜索法搜索指定列表，以获得指定对象（传入Comparator比较器）。</li><li><strong>copy</strong>(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src) 将所有元素从一个列表复制到另一个列表。</li><li><strong>fill</strong>(List&lt;? super T&gt; list, T obj) 使用指定元素替换指定列表中的所有元素。</li><li><strong>max</strong>(Collection&lt;? extends T&gt; coll) 根据元素的<em>自然顺序</em>，返回给定 collection 的最大元素。</li><li><strong>max</strong>(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp) 根据指定比较器产生的顺序，返回给定 collection 的最大元素。</li><li><strong>min</strong>(Collection&lt;? extends T&gt; coll) 根据元素的<em>自然顺序</em> 返回给定 collection 的最小元素。</li><li><strong>min</strong>(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp) 根据元素的<em>自然顺序</em> 返回给定 collection 的最小元素。</li><li><strong>reverse</strong>(List&lt;?&gt; list) 反转指定列表中元素的顺序。</li><li><strong>sort</strong>(List<T> list) 根据元素的<em>自然顺序</em> 对指定列表按升序进行排序。</li><li><strong>sort</strong>(List<T> list, Comparator&lt;? super T&gt; c) 根据元素的<em>自然顺序</em> 对指定列表按升序进行排序。</li><li><strong>swap</strong>(List&lt;?&gt; list, int i, int j) 在指定列表的指定位置处交换元素。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2019/06/18/%E6%A1%86%E6%9E%B6/mybatis/"/>
    <url>/2019/06/18/%E6%A1%86%E6%9E%B6/mybatis/</url>
    
    <content type="html"><![CDATA[<h3 id="JDBC工作流程"><a href="#JDBC工作流程" class="headerlink" title="JDBC工作流程"></a>JDBC工作流程</h3><p>（1）  加载JDBC驱动</p><p>（2）  建立并获取数据库连接</p><p>（3）  创建 JDBC Statements 对象</p><p>（4）  设置SQL语句的传入参数</p><p>（5）  执行SQL语句并获得查询结果</p><p>（6）  对查询结果进行转换处理并将处理结果返回</p><p>（7）  释放相关资源（关闭Connection，关闭Statement，关闭ResultSet）</p><p>mybatis对JDBC的优化:</p><p>（1） 使用数据库连接池对连接进行管理</p><p>（2） SQL语句统一存放到配置文件</p><p>（3） SQL语句变量和传入参数的映射以及动态SQL</p><p>（4） 动态SQL语句的处理</p><p>（5） 对数据库操作结果的映射和结果缓存</p><p>（6） SQL语句的重复(SQL模块化)</p><p>Mybatis基本结构和流程</p><p>流程：</p><p>当框架启动时，通过configuration解析config.xml配置文件和mapper.xml映射文件，映射文件可以使用xml方式或者注解方式，然后由configuration获得sqlsessionfactory对象，再由sqlsessionfactory获得sqlsession数据库访问会话对象，通过会话对象获得对应DAO层的mapper对象，通过调用mapper对象相应方法，框架就会自动执行SQL语句从而获得结果。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>文档结构</p><ul><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><h3 id="1-Properties"><a href="#1-Properties" class="headerlink" title="1 Properties"></a>1 Properties</h3><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;driver&#125;"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;url&#125;"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;username&#125;"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-Setting"><a href="#2-Setting" class="headerlink" title="2 Setting"></a>2 Setting</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"cacheEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lazyLoadingEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"multipleResultSetsEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"useColumnLabel"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"true"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"useGeneratedKeys"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"autoMappingBehavior"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"PARTIAL"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"autoMappingUnknownColumnBehavior"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"WARNING"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultExecutorType"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"SIMPLE"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultStatementTimeout"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"25"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultFetchSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"100"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"safeRowBoundsEnabled"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapUnderscoreToCamelCase"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"localCacheScope"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"SESSION"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcTypeForNull"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"OTHER"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"lazyLoadTriggerMethods"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"equals,clone,hashCode,toString"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-类型别名（typeAliases）"><a href="#3-类型别名（typeAliases）" class="headerlink" title="3 类型别名（typeAliases）"></a>3 类型别名（typeAliases）</h3><p>类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><h3 id="4-类型处理器（typeHandlers）"><a href="#4-类型处理器（typeHandlers）" class="headerlink" title="4 类型处理器（typeHandlers）"></a>4 类型处理器（typeHandlers）</h3><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p><p>要注意 MyBatis 不会通过窥探数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明那是 VARCHAR 类型的字段， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型</p><h3 id="5-对象工厂（objectFactory）"><a href="#5-对象工厂（objectFactory）" class="headerlink" title="5 对象工厂（objectFactory）"></a>5 对象工厂（objectFactory）</h3><p>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 </p><h3 id="6-插件（plugins）"><a href="#6-插件（plugins）" class="headerlink" title="6 插件（plugins）"></a>6 插件（plugins）</h3><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p><h3 id="7-环境配置（environments）"><a href="#7-环境配置（environments）" class="headerlink" title="7 环境配置（environments）"></a>7 环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"..."</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;driver&#125;"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;url&#125;"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;username&#125;"</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;password&#125;"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>事务管理器（transactionManager）</strong><br>JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</p><p>MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。</p><p><strong>数据源（dataSource）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"org.myproject.C3P0DataSourceFactory"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"org.postgresql.Driver"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:postgresql:mydb"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"postgres"</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-数据库厂商标识（databaseIdProvider）"><a href="#8-数据库厂商标识（databaseIdProvider）" class="headerlink" title="8 数据库厂商标识（databaseIdProvider）"></a>8 数据库厂商标识（databaseIdProvider）</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。</p><h3 id="9-映射器（mappers）"><a href="#9-映射器（mappers）" class="headerlink" title="9 映射器（mappers）"></a>9 映射器（mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要定义 SQL 映射语句了。 但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。</p><h2 id="MyBatis-Spring"><a href="#MyBatis-Spring" class="headerlink" title="MyBatis-Spring"></a>MyBatis-Spring</h2><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 SqlSession 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 DataAccessException。最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。</p><p>在 MyBatis-Spring 中，可使用 SqlSessionFactoryBean来创建 SqlSessionFactory。 要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：SqlSessionFactory 需要一个 DataSource（数据源）。 这可以是任意的 DataSource，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><p>然后就可以使用sqlsession进行事务管理</p><h1 id="mybatis学习"><a href="#mybatis学习" class="headerlink" title="mybatis学习"></a>mybatis学习</h1><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis springboot --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- druid阿里巴巴数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySql数据库驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span> mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span> mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mybatis组件功能配置（如开启各种功能，mapper文件位置等），使用xml，configure或者 properties</p><p>定义实体类对应数据库中的表结构</p><p>创建Dao接口，加上注解@mapper</p><p>创建对应接口的mapper.xml文件（用xml对接口进行实现，采用sql语句）</p><h3 id="一些思考（个人向）"><a href="#一些思考（个人向）" class="headerlink" title="一些思考（个人向）"></a>一些思考（个人向）</h3><p>关于sqlsession和jdbc的连接的关系，sqlsession是mybatis框架的一个对象，负责处理上层交付下来的sql，在若需要操作数据库，则会建立jdbc连接，操作数据库，若使用的是连接池，则会根据连接池的规则去使用和创建连接。</p><p>关于缓存的问题，mybatis的缓存由框架控制，下一部分会介绍，关于数据库部分自身的缓存则有数据库自身进行管理。</p><h2 id="mybatis-缓存"><a href="#mybatis-缓存" class="headerlink" title="mybatis 缓存"></a>mybatis 缓存</h2><p>缓存架构</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210111200945.png" srcset="/img/loading.gif" alt=""></p><p>分为一级缓存和二级缓存</p><p>一级缓存为sqlsession的缓存，缓存只针对查询语句，一级缓存生命周期只存在于一个sqlsession对象。事务提交，插入更新和删除操作会自动更新缓存。也可以手动刷新缓存，关闭sqlsession会释放缓存。</p><p>二级缓存，默认不开启，需要手动设置开启，需要返回的pojo是可以序列化的，即实现了serializable接口的，二级缓存不同namespace是分开的，相同的namespace的对象是共享缓存的。二级缓存只有关闭sqlsession才会写入（实际存储在硬盘）性能问题？。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java 开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java异常</title>
    <link href="/2019/06/17/java/java%E5%BC%82%E5%B8%B8/"/>
    <url>/2019/06/17/java/java%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<p>原文出处： <a href="http://www.cnblogs.com/lulipro/p/7504267.html" target="_blank" rel="noopener">代码钢琴家</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> 异常指不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。java通过API中的<strong>Throwable</strong>类的众多子类来描述各种异常，java异常都是对象，是<strong>Throwable</strong>的子类。</p><h2 id="java异常分类和类结构图"><a href="#java异常分类和类结构图" class="headerlink" title="java异常分类和类结构图"></a>java异常分类和类结构图</h2><p>从基类Throwable派生出两个类Error和Exception</p><p><strong>Error</strong>：错误，代表JVM本身的错误，错误不能被程序员通过代码处理，Error一般很少出现。<br><strong>Exception</strong>：异常，代表程序运行时发生的各种不期望发生的时间，可以被java异常处理机制使用，是我们说的异常处理的核心</p><p>对异常的处理要求我们将异常分为两类：</p><p><strong>非检查异常（unckecked exception）</strong>：编译器不要求强制处置的异常包括运行时异常（RuntimeException与其子类）和错误（Error）。</p><p><strong>检查异常（checked exception）</strong>：编译器要求必须处置的异常，除了Error 和 RuntimeException的其它异常。javac强制要求程序员为这样的异常做预备处理工作（使用try…catch…finally或者throws）。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112034149.png" srcset="/img/loading.gif" alt=""></p><h2 id="异常处理的基本语法"><a href="#异常处理的基本语法" class="headerlink" title="异常处理的基本语法"></a>异常处理的基本语法</h2><p>在编写代码处理异常时，对于检查异常，有2种不同的处理方式：使用try…catch…finally语句块处理它。或者，在函数签名中使用throws 声明交给函数调用者caller去解决。</p><h3 id="try…catch…finally语句块-“try…catch…finally语句块”"><a href="#try…catch…finally语句块-“try…catch…finally语句块”" class="headerlink" title="try…catch…finally语句块 “try…catch…finally语句块”"></a>try…catch…finally语句块 “try…catch…finally语句块”</h3><p><strong><em>try…catch…finally语句块</em></strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">try</span>&#123;  <br> <span class="hljs-regexp">//</span><span class="hljs-keyword">try</span>块中放可能发生异常的代码。  <br> <span class="hljs-regexp">//</span>如果执行完<span class="hljs-keyword">try</span>且不发生异常，则接着去执行<span class="hljs-keyword">finally</span>块和<span class="hljs-keyword">finally</span>后面的代码（如果有的话）。  <br> <span class="hljs-regexp">//</span>如果发生异常，则尝试去匹配<span class="hljs-keyword">catch</span>块。  <br>    <br>&#125;<span class="hljs-keyword">catch</span>(SQLException SQLexception)&#123;  <br> <span class="hljs-regexp">//</span>每一个<span class="hljs-keyword">catch</span>块用于捕获并处理一个特定的异常，或者这异常类型的子类。Java7中可以将多个异常声明在一个<span class="hljs-keyword">catch</span>中。  <br> <span class="hljs-regexp">//</span><span class="hljs-keyword">catch</span>后面的括号定义了异常类型和异常参数。如果异常与之匹配且是最先匹配到的，则虚拟机将使用这个<span class="hljs-keyword">catch</span>块来处理异常。  <br> <span class="hljs-regexp">//</span>在<span class="hljs-keyword">catch</span>块中可以使用这个块的异常参数来获取异常的相关信息。异常参数是这个<span class="hljs-keyword">catch</span>块中的局部变量，其它块不能访问。  <br> <span class="hljs-regexp">//</span>如果当前<span class="hljs-keyword">try</span>块中发生的异常在后续的所有<span class="hljs-keyword">catch</span>中都没捕获到，则先去执行<span class="hljs-keyword">finally</span>，然后到这个函数的外部caller中去匹配异常处理器。  <br> <span class="hljs-regexp">//</span>如果<span class="hljs-keyword">try</span>中没有发生异常，则所有的<span class="hljs-keyword">catch</span>块将被忽略。  <br>    <br>&#125;<span class="hljs-keyword">catch</span>(Exception exception)&#123;  <br> <span class="hljs-regexp">//</span>...  <br>&#125;<span class="hljs-keyword">finally</span>&#123;  <br>    <br> <span class="hljs-regexp">//</span><span class="hljs-keyword">finally</span>块通常是可选的。  <br> <span class="hljs-regexp">//</span>无论异常是否发生，异常是否匹配被处理，<span class="hljs-keyword">finally</span>都会执行。  <br> <span class="hljs-regexp">//</span>一个<span class="hljs-keyword">try</span>至少要有一个<span class="hljs-keyword">catch</span>块，否则， 至少要有<span class="hljs-number">1</span>个<span class="hljs-keyword">finally</span>块。但是<span class="hljs-keyword">finally</span>不是用来处理异常的，<span class="hljs-keyword">finally</span>不会捕获异常。  <br> <span class="hljs-regexp">//</span><span class="hljs-keyword">finally</span>主要做一些清理工作，如流的关闭，数据库连接的关闭等。   <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>tips:</strong></p><ul><li>try块和catch块中的局部变量和finally中的局部变量不能共享使用</li><li>一个catch块处理一个异常</li><li>当发生异常时，java将从异常发生的地方跳转到处理异常的代码，在处理完异常后，回到原来的控制流中去（类似中断？）</li></ul><p><strong>throws 函数声明</strong></p><p>throws声明：如果一个方法内部的代码会抛出检查异常（checked exception），而方法自己又没有完全处理掉，则javac保证你必须在方法的签名上使用throws关键字声明这些可能抛出的异常，否则编译不通过。</p><p>throws是另一种处理异常的方式，它不同于try…catch…finally，throws仅仅是将函数中可能出现的异常向调用者声明，而自己则不具体处理。</p><h3 id="finally块"><a href="#finally块" class="headerlink" title="finally块"></a>finally块</h3><p>finally块不管异常是否发生，只要对应的try执行了，则它一定也执行。只有一种方法让finally块不执行：System.exit()。因此finally块通常用来做资源释放操作：关闭文件，关闭数据库连接等等。</p><p>良好的编程习惯是：在try块中打开资源，在finally块中清理释放这些资源。</p><p>需要注意的地方:</p><p>1、finally块没有处理异常的能力。处理异常的只能是catch块。</p><p>2、在同一try…catch…finally块中 ，如果try中抛出异常，且有匹配的catch块，则先执行catch块，再执行finally块。如果没有catch块匹配，则先执行finally，然后去外面的调用者中寻找合适的catch块。</p><p>3、在同一try…catch…finally块中 ，try发生异常，且匹配的catch块中处理异常时也抛出异常，那么后面的finally也会执行：首先执行finally块，然后去外围调用者中寻找合适的catch块。</p><h3 id="throw异常抛出语句-“throw异常抛出语句”"><a href="#throw异常抛出语句-“throw异常抛出语句”" class="headerlink" title="throw异常抛出语句 “throw异常抛出语句”)"></a>throw异常抛出语句 “throw异常抛出语句”)</h3><p><strong><em>throw异常抛出语句</em></strong></p><blockquote><p>throw exceptionObject</p></blockquote><p>程序员可以自己手动显式的抛出一个异常，throw语句的后面跟的是一个异常对象，和JRE自动抛出的异常没有区别</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span>  <br></span>&#123;  <br> <span class="hljs-keyword">if</span>(user  == <span class="hljs-keyword">null</span>)   <br> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"User对象为空"</span>);  <br> <span class="hljs-comment">//......  </span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCODE配置</title>
    <link href="/2019/05/11/%E5%85%B6%E4%BB%96/VSCODE%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/05/11/%E5%85%B6%E4%BB%96/VSCODE%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1安装官方插件"><a href="#1安装官方插件" class="headerlink" title="1安装官方插件"></a>1安装官方插件</h2><p><img src="https://img-blog.csdn.net/20171224082413655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzIwNTg3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" srcset="/img/loading.gif" alt=""></p><h2 id="2-VSCODE-相关概念"><a href="#2-VSCODE-相关概念" class="headerlink" title="2-VSCODE-相关概念"></a>2-VSCODE-相关概念</h2><p>vs code 单次运行一个脚本视为一个task，配置文件为tasks.json。整个文件和多个文件夹视为workspace，配置文件为setting.json，调试环境配置为launch.json。这些文件需要手动编辑，编辑好后会替代默认配置生效。</p><h2 id="3-setting-文件配置"><a href="#3-setting-文件配置" class="headerlink" title="3-setting-文件配置"></a>3-setting-文件配置</h2><p>1.打开一个 .py文件,然后点状态栏右下角 python</p><p>2.再点图中的python 语言基础设置</p><p>3.修改工作空间settings.json 配置文件中的”python.pythonPath”为自己的解释器路径,工作空间配置可以代替用户配置,用户配置可以代替默认配置</p><p>4.配置 pylint 路径,因为默认 pylint 检查是开启的</p><p><img src="https://img-blog.csdn.net/20171224085803990?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzIwNTg3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" srcset="/img/loading.gif" alt="è¿éåå¾çæè¿°"></p><h2 id="5-配置运行参数-配置tasks-json-运行-python-脚本"><a href="#5-配置运行参数-配置tasks-json-运行-python-脚本" class="headerlink" title="5-配置运行参数-配置tasks-json-运行-python-脚本"></a>5-配置运行参数-配置tasks-json-运行-python-脚本</h2><p>1.在打开的 py 文件中按 command+shift+B (windows 系统上 command 是 ctrl键)运行,点击配置生成任务</p><p>2.使用默认模版生成任务配置文件 tasks.json</p><p>3.点选 others</p><p>4.修改 tasks.py</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br> <span class="hljs-comment">// See https://go.microsoft.com/fwlink/?LinkId=733558  </span><br> <span class="hljs-comment">// for the documentation about the tasks.json format  </span><br> <span class="hljs-attr">"version"</span>: <span class="hljs-string">"2.0.0"</span>,  <br> <span class="hljs-attr">"tasks"</span>: [  <br> &#123;  <br> <span class="hljs-attr">"label"</span>: <span class="hljs-string">"python"</span>,  <br> <span class="hljs-attr">"type"</span>: <span class="hljs-string">"shell"</span>,  <br> <span class="hljs-attr">"command"</span>: <span class="hljs-string">"C:/Users/yanta/AppData/Local/Programs/Python/Python36/python"</span>,  <br> <span class="hljs-attr">"args"</span>: [  <br> <span class="hljs-string">"$&#123;file&#125;"</span>  <br> ],  <br> <span class="hljs-attr">"group"</span>: &#123;  <br> <span class="hljs-attr">"kind"</span>: <span class="hljs-string">"build"</span>,  <br> <span class="hljs-attr">"isDefault"</span>: <span class="hljs-literal">true</span>  <br> &#125;  <br> &#125;  <br> ]  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-调试-单步运行-配置-launch-json"><a href="#6-调试-单步运行-配置-launch-json" class="headerlink" title="6-调试-单步运行-配置-launch-json"></a>6-调试-单步运行-配置-launch-json</h2><p>前面都配置正常的话,此处不需要配置也可以正常运行,若不能正常运行可以尝试重启vscode再试,如果需要自定义调试配置,比如远程调试之类的话,可以添加 launch.json 并且修改其中相应的配置参数:<br>1.点左侧的甲虫图标,然后点左上角没有配置,再点添加配置即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">"version"</span>: <span class="hljs-string">"0.2.0"</span>,  <br> <span class="hljs-string">"configurations"</span>: [  <br> &#123;  <br> <span class="hljs-string">"name"</span>: <span class="hljs-string">"Python"</span>,  <br> <span class="hljs-string">"type"</span>: <span class="hljs-string">"python"</span>,  <br> <span class="hljs-string">"request"</span>: <span class="hljs-string">"launch"</span>,  <br> <span class="hljs-string">"stopOnEntry"</span>: <span class="hljs-literal">false</span>,  <br> //<span class="hljs-string">"pythonPath"</span>: <span class="hljs-string">"C:/Python27/python"</span>,  <br> <span class="hljs-string">"pythonPath"</span>: <span class="hljs-string">"C:/Users/yanta/AppData/Local/Programs/Python/Python36/python"</span>,  <br> <span class="hljs-string">"program"</span>: <span class="hljs-string">"<span class="hljs-variable">$&#123;file&#125;</span>"</span>,  <br> <span class="hljs-string">"cwd"</span>: <span class="hljs-string">"<span class="hljs-variable">$&#123;workspaceRoot&#125;</span>"</span>,  <br> <span class="hljs-string">"env"</span>: &#123;&#125;,  <br> <span class="hljs-string">"envFile"</span>: <span class="hljs-string">"<span class="hljs-variable">$&#123;workspaceRoot&#125;</span>/.env"</span>,  <br> <span class="hljs-string">"debugOptions"</span>: [  <br> <span class="hljs-string">"WaitOnAbnormalExit"</span>,  <br> <span class="hljs-string">"WaitOnNormalExit"</span>,  <br> <span class="hljs-string">"RedirectOutput"</span>  <br> ]  <br> &#125;,<br></code></pre></td></tr></table></figure><p>2.在行号的左侧单击即可设置断点,点左上角调试两个字右侧的绿色按钮,即可开始调试,上方会出现调试面板,有单步,继续等功能</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu18-04安装MySQL</title>
    <link href="/2019/04/29/%E5%85%B6%E4%BB%96/Ubuntu18-04%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2019/04/29/%E5%85%B6%E4%BB%96/Ubuntu18-04%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><p>OS: Ubuntu18.04</p><p>MySQL:5.7.22</p><h2 id="1-安装MySQL"><a href="#1-安装MySQL" class="headerlink" title="1-安装MySQL"></a>1-安装MySQL</h2><p>在Ubuntu中，可以直接采用apt-get的形式安装最新版本的MySQL，在安装前，建议更新一下apt软件列表。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#更新软件源  </span><br>sudo apt-<span class="hljs-builtin-name">get</span> update  <br><span class="hljs-comment">#安装mysql-server  </span><br>sudo apt-<span class="hljs-builtin-name">get</span> install mysql-server<br></code></pre></td></tr></table></figure><h2 id="2-配置MySQL"><a href="#2-配置MySQL" class="headerlink" title="2-配置MySQL"></a>2-配置MySQL</h2><h3 id="2-1启动MySQL配置"><a href="#2-1启动MySQL配置" class="headerlink" title="2-1启动MySQL配置"></a>2-1启动MySQL配置</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo mysql_secure_installation</span><br></code></pre></td></tr></table></figure><p>根据提示操作即可，部分图示<br><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112033907.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="2-2mysql服务运行状态"><a href="#2-2mysql服务运行状态" class="headerlink" title="2-2mysql服务运行状态"></a>2-2mysql服务运行状态</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mosesren@hadoop1:/etc/mysql/mysql.conf.d$ systemctl status mysql  <br>● mysql.service - MySQL<span class="hljs-built_in"> Community Server </span> <br> Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)  <br> Active: active (running) since Tue 2019-03-12 14:39:23 CST; 9s ago  <br> Process: 121302 <span class="hljs-attribute">ExecStart</span>=/usr/sbin/mysqld --daemonize <span class="hljs-attribute">--pid-file</span>=/run/mysqld/mysqld.pid (<span class="hljs-attribute">code</span>=exited, <span class="hljs-attribute">status</span>=0/SUCCESS)  <br> Process: 121293 <span class="hljs-attribute">ExecStartPre</span>=/usr/share/mysql/mysql-systemd-start pre (<span class="hljs-attribute">code</span>=exited, <span class="hljs-attribute">status</span>=0/SUCCESS)  <br> Main PID: 121304 (mysqld)  <br> Tasks: 27 (limit: 1085)  <br> CGroup: /system.slice/mysql.service  <br> └─121304 /usr/sbin/mysqld --daemonize <span class="hljs-attribute">--pid-file</span>=/run/mysqld/mysqld.pid  <br>  <br>3月 12 14:39:22 hadoop1 systemd[1]: Starting MySQL<span class="hljs-built_in"> Community </span>Server<span class="hljs-built_in">..</span>.  <br>3月 12 14:39:23 hadoop1 systemd[1]: Started MySQL<span class="hljs-built_in"> Community </span>Server.<br></code></pre></td></tr></table></figure><h3 id="2-3配置远程访问"><a href="#2-3配置远程访问" class="headerlink" title="2-3配置远程访问"></a>2-3配置远程访问</h3><p>MySQL默认是只能本地访问的，为了能够在windows环境下，使用连接工具访问，我们需要配置远程访问，修改/etc/mysql/my.cnf配置文件</p><p>首先用根用户登录，这里的会要求填写密码，如果在2.1中设置了，直接用即可，若未设置，直接不填即可登录，</p><p>进入root后，也可以用命令给root设置密码和权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> root@localhost <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">"123456"</span>;<br></code></pre></td></tr></table></figure><p><strong>进行远程访问配置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">#这里的user填写自己对应的用户名，password填写对应的密码  </span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> weixx.* <span class="hljs-keyword">TO</span> <span class="hljs-keyword">user</span>@<span class="hljs-string">"%"</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">"password"</span>;<br></code></pre></td></tr></table></figure><p><strong>修改/etc/mysql/mysql.conf.d/mysqld.conf配置文件</strong></p><p>将其中的bind-address 注释掉即可</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mosesren<span class="hljs-variable">@hadoop1</span><span class="hljs-symbol">:/etc/mysql/mysql</span>.conf.d<span class="hljs-variable">$ </span>vim /etc/mysql/mysql.conf.d/mysqld.cnf   <br>  <br><span class="hljs-comment">#bind-address           = 127.0.0.1</span><br></code></pre></td></tr></table></figure><h2 id="采用navicat登录"><a href="#采用navicat登录" class="headerlink" title="采用navicat登录"></a>采用navicat登录</h2><p>这时候我们可以采用连接工具进行远程访问我们的数据库，<a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">navicat</a>是收费的，也可以采用其他免费的工具。</p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112033939.jpg" srcset="/img/loading.gif" alt=""></p><p>配置好host(即mysql安装的机器的IP地址)和用户名密码即可访问。</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建 MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 基础</title>
    <link href="/2019/04/20/java/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/04/20/java/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="J2EE-J2SE-J2ME区别"><a href="#J2EE-J2SE-J2ME区别" class="headerlink" title="J2EE-J2SE-J2ME区别"></a>J2EE-J2SE-J2ME区别</h2><p><strong>J2EE(Java 2 Platform Enterprise Edition)企业版</strong><br>​ 是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如 Servlet Jsp等，主要针对于Web应用程序开发。<br><strong>J2SE（Java 2 Platform Standard Edition）标准版</strong><br>​ 是为开发普通桌面和商务应用程序提供的解决方案。该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发。<br><strong>J2ME(Java 2 Platform Micro Edition)小型版</strong><br>​ 是为开发电子消费产品和嵌入式设备提供的解决方案。该技术体系主要应用于小型电子消费类产品，如手机中的应用程序等。</p><h2 id="JDK-JRE-JVM的区别"><a href="#JDK-JRE-JVM的区别" class="headerlink" title="JDK-JRE-JVM的区别"></a>JDK-JRE-JVM的区别</h2><p><strong>JVM（Java Virtual Machine Java虚拟机)</strong><br>可以理解为是一个虚拟出来的计算机，具备着计算机的基本运算方式，<br>它主要负责将java程序生成的字节码文件解释成具体系统平台上的机器指令。<br>让具体平台如window运行这些Java程序。</p><p><strong>JRE(Java Runtime Environment Java运行环境)</strong><br>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，<br>如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p><p><strong>JDK(Java Development Kit Java开发工具包)</strong><br>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，<br>也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。<br>其中的开发工具包括编译工具(javac.exe) 打包工具(jar.exe)等</p><p>简单而言：使用JDK开发完成的java程序，交给JRE去运行。<br>三者关系：</p><p> JVM:将字节码文件转成具体系统平台的机器指令。</p><p> JRE:JVM+Java语言的核心类库。</p><p> JDK:JRE+Java的开发工具。</p><h3 id="equal和“-”的区别"><a href="#equal和“-”的区别" class="headerlink" title="equal和“==”的区别"></a>equal和“==”的区别</h3><p><strong>==</strong>：在直接值比较是比较值的大小，在引用值比较时比较值的地址是否相同<br><strong>equal</strong> ：比较值是否相等</p><h2 id="windows和linux文件路径问题"><a href="#windows和linux文件路径问题" class="headerlink" title="windows和linux文件路径问题"></a>windows和linux文件路径问题</h2><p><strong>windows平台</strong>：用\或\<br><strong>linux平台</strong>：用/</p><h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;  <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>public：表示此方法可以被外部所调用</p><p>static：表示此方法可以由类名称直接调用</p><p>void：主方法是程序的起点，所以不需要任何返回值</p><p>main：系统规定好默认调用的方法名称，执行的时候，默认找到main方法名称</p><p>String args [] :表示的是运行时的参数，参数传递的形式：java类名称 参数1 参数2 参数3..</p><h2 id="常见的关键字"><a href="#常见的关键字" class="headerlink" title="常见的关键字"></a>常见的关键字</h2><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112033443.jpeg" srcset="/img/loading.gif" alt=""></p><p><img src="https://gitee.com/null_885_6403/pic/raw/master/img/20210112033448.jpeg" srcset="/img/loading.gif" alt=""></p><h2 id="java注释"><a href="#java注释" class="headerlink" title="java注释"></a>java注释</h2><ul><li><strong>单行注释</strong>（line comment）用//表示</li><li><strong>多行注释</strong>(block comment)用/**/表示</li><li><strong>文档注释</strong>用/*/表示，是java特有的注释</li></ul><h2 id="java数据类型"><a href="#java数据类型" class="headerlink" title="java数据类型"></a>java数据类型</h2><ul><li><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>byte/8</li><li>char/16</li><li>short/16</li><li>int/32</li><li>float/32</li><li>long/64</li><li>double/64</li><li>boolean/~ boolean 只有true 和 false 用 1 bit 来存储</li></ul><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>基本类型都有对应的包装类，基本类型和其对应的包装类型之间的赋值使用自动装箱和拆箱完成，Java中的基本类型功能简单，不具备对象的特性，为了使基本类型具备对象的特性，所以出现了包装类，就可以像操作对象一样操作基本类型数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer x = <span class="hljs-number">2</span>;     <span class="hljs-comment">// 装箱  </span><br><span class="hljs-keyword">int</span> y = x;         <span class="hljs-comment">// 拆箱</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">基本数据类型</th><th align="left">对应的包装类</th></tr></thead><tbody><tr><td align="left"><strong>byte</strong></td><td align="left"><strong>Byte</strong></td></tr><tr><td align="left"><strong>short</strong></td><td align="left"><strong>Short</strong></td></tr><tr><td align="left"><strong>int</strong></td><td align="left"><strong>Integer</strong></td></tr><tr><td align="left"><strong>long</strong></td><td align="left"><strong>Long</strong></td></tr><tr><td align="left"><strong>char</strong></td><td align="left"><strong>Character</strong></td></tr><tr><td align="left"><strong>float</strong></td><td align="left"><strong>Float</strong></td></tr><tr><td align="left"><strong>double</strong></td><td align="left"><strong>ouble</strong></td></tr><tr><td align="left"><strong>boolean</strong></td><td align="left"><strong>Boolean</strong></td></tr></tbody></table></li></ul><h3 id="缓存池"><a href="#缓存池" class="headerlink" title="缓存池"></a>缓存池</h3><p>  new Integer(123) 与 Integer.valueOf(123) 的区别在于：</p><ul><li><p>new Integer(123) 每次都会新建一个对象；</p></li><li><p>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。<br>例如：Integer a = 10;<br>调用的就是Integer.valueof()方法(自动装箱调用这个方法)<br>默认的缓冲池的大小是-128到+127(可以在JVM的启动参数中修改)<br>valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;  <br>     <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)  <br>     <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];  <br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);  <br>    &#125;<br></code></pre></td></tr></table></figure><p>所有整数类型的类都有类似的缓存机制，基本类型对应的缓冲池如下：</p></li><li><p>boolean values true and false</p></li><li><p>all byte values</p></li><li><p>short values between -128 and 127</p></li><li><p>int values between -128 and 127</p></li><li><p>char in the range \u0000 to \u007F</p></li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="1-数字转字符串"><a href="#1-数字转字符串" class="headerlink" title="1. 数字转字符串"></a>1. 数字转字符串</h3><ul><li>使用string 类的valueof方法</li><li>将数字装箱为基本类型，调用tostring方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNumber</span> </span>&#123;  <br>    <br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br> <span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>;  <br><br> <span class="hljs-comment">//方法1  </span><br> String str = String.valueOf(i);  <br>    <br> <span class="hljs-comment">//方法2  </span><br> Integer it = i;  <br> String str2 = it.toString();  <br>    <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-数字转字符串"><a href="#2-数字转字符串" class="headerlink" title="2. 数字转字符串"></a>2. 数字转字符串</h3><p>调用Integer的静态方法parseInt  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNumber</span> </span>&#123;  <br>    <br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>    <br> String str = <span class="hljs-string">"999"</span>;  <br>    <br> <span class="hljs-keyword">int</span> i= Integer.parseInt(str);  <br>    <br> System.out.println(i);  <br>    <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修饰符访问权限"><a href="#修饰符访问权限" class="headerlink" title="修饰符访问权限"></a>修饰符访问权限</h2><p>访问权限控制：</p><p>public &gt; protected &gt; default &gt; private</p><p>所有-&gt;其他包的非子类无法访问-&gt;子类无法访问-&gt;仅限本类</p><h2 id="类修饰符："><a href="#类修饰符：" class="headerlink" title="类修饰符："></a>类修饰符：</h2><p>public（访问控制符），将一个类声明为公共类，他可以被任何对象访问，一个程序的主类必须是公共类。</p><p>abstract，将一个类声明为抽象类，没有实现的方法，需要子类提供方法实现。</p><p>final，将一个类生命为最终（即非继承类），表示他不能被其他类继承。</p><p>friendly，默认的修饰符，只有在相同包中的对象才能使用这样的类。</p><h2 id="成员变量修饰符："><a href="#成员变量修饰符：" class="headerlink" title="成员变量修饰符："></a>成员变量修饰符：</h2><p>public（公共访问控制符），指定该变量为公共的，他可以被任何对象的方法访问。</p><p>private（私有访问控制符）指定该变量只允许自己的类的方法访问，其他任何类（包括子类）中的方法均不能访问。</p><p>protected（保护访问控制符）指定该变量可以别被自己的类和子类访问。在子类中可以覆盖此变量。</p><p>friendly ，在同一个包中的类可以访问，其他包中的类不能访问。</p><p>final，最终修饰符，指定此变量的值不能变。</p><p>static（静态修饰符）指定变量被所有对象共享，即所有实例都可以使用该变量。变量属于这个类。</p><p>transient（过度修饰符）指定该变量是系统保留，暂无特别作用的临时性变量。</p><p>volatile（易失修饰符）指定该变量可以同时被几个线程控制和修改。</p><h2 id="方法修饰符："><a href="#方法修饰符：" class="headerlink" title="方法修饰符："></a>方法修饰符：</h2><p>public（公共控制符）</p><p>private（私有控制符）指定此方法只能有自己类等方法访问，其他的类不能访问（包括子类）</p><p>protected（保护访问控制符）指定该方法可以被它的类和子类进行访问。</p><p>final，指定该方法不能被重载。</p><p>static，指定不需要实例化就可以激活的一个方法。</p><p>synchronize，同步修饰符，在多个线程中，该修饰符用于在运行前，对他所属的方法加锁，以防止其他线程的访问，运行结束后解锁。</p><p>native，本地修饰符。指定此方法的方法体是用其他语言在程序外部编写的。</p><h2 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h2><p>访问权限控制： 指的是本类及本类内部的成员（成员变量、成员方法、内部类）对其他类的可见性，即这些内容是否允许其他类访问。</p><h2 id="Class和Object类"><a href="#Class和Object类" class="headerlink" title="Class和Object类"></a>Class和Object类</h2><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class类也是类的一种，内容是创建的类的类型信息，Class只能由JVM去创建，没有public构造函数。</p><p>获取Class对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用forName()方法</span><br>Class obj= Class.forName(<span class="hljs-string">"shapes"</span>);<br><span class="hljs-comment">//使用getClass()方法</span><br>Class obj=s1.getClass();<br>Class obj1=s1.getSuperclass();<br></code></pre></td></tr></table></figure><h3 id="Objetc类"><a href="#Objetc类" class="headerlink" title="Objetc类"></a>Objetc类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>．clone方法<br>保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。<br><span class="hljs-number">2</span>．getClass方法<br><span class="hljs-keyword">final</span>方法，获得运行时类型。<br><span class="hljs-number">3</span>．toString方法<br>该方法用得比较多，一般子类都有覆盖。<br><span class="hljs-number">4</span>．finalize方法<br>该方法用于释放资源。因为无法确定该方法什么时候被调用，很少使用。<br><span class="hljs-number">5</span>．equals方法<br>该方法是非常重要的一个方法。一般equals和==是不一样的，但是在Object中两者是一样的。子类一般都要重写这个方法。<br><span class="hljs-number">6</span>．hashCode方法<br>该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。<br>一般必须满足obj1.equals(obj2)==<span class="hljs-keyword">true</span>。可以推出obj1.hash- Code()==obj2.hashCode()，但是hashCode相等不一定就满足equals。不过为了提高效率，应该尽量使上面两个条件接近等价。<br><span class="hljs-number">7</span>．wait方法<br>wait方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait()方法一直等待，直到获得锁或者被中断。wait(<span class="hljs-keyword">long</span> timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。<br>调用该方法后当前线程进入睡眠状态，直到以下事件发生。<br>（<span class="hljs-number">1</span>）其他线程调用了该对象的notify方法。<br>（<span class="hljs-number">2</span>）其他线程调用了该对象的notifyAll方法。<br>（<span class="hljs-number">3</span>）其他线程调用了interrupt中断该线程。<br>（<span class="hljs-number">4</span>）时间间隔到了。<br>此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。<br><span class="hljs-number">8</span>．notify方法<br>该方法唤醒在该对象上等待的某个线程。<br><span class="hljs-number">9</span>．notifyAll方法<br>该方法唤醒在该对象上等待的所有线程。<br></code></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>字符集和编码规范：</p><p><strong>字符集：</strong> Unicode，为每个字符分配一个唯一的id（码点）</p><p><strong>编码规范：</strong> UTF-8，将码点转换成字节序列的规则</p><h3 id="多态和多态绑定"><a href="#多态和多态绑定" class="headerlink" title="多态和多态绑定"></a>多态和多态绑定</h3><p>一个对象变量可以指示多种实际类型的现象称为多态，在运行时能够自动选择适当的方法称为动态绑定</p><h3 id="理解方法调用"><a href="#理解方法调用" class="headerlink" title="理解方法调用"></a>理解方法调用</h3><p>假设调用<strong>x.f(args)</strong>,x声明为类C的一个对象，则调用方法的详细过程为:</p><ol><li>编译器查看对象的声明类型和方法名，列举所有名为f的方法和父类中所有名为f的方法</li><li>确定方法调用中的参数类型，如果存在与提供类型完全匹配的方法，则选择这个方法，这个过程称为<strong><em>重载解析</em></strong></li></ol><h3 id="为什么要重写hashcode和equals方法"><a href="#为什么要重写hashcode和equals方法" class="headerlink" title="为什么要重写hashcode和equals方法"></a>为什么要重写hashcode和equals方法</h3><ol><li>重写equals方法是为了比较两个不同对象的值是否相等</li><li>重写hashCode是为了让同一个Class对象的两个具有相同值的对象的Hash值相等。</li><li>同时重写hashCode()与equals()是为了满足HashSet、HashMap等此类集合的相同对象的不重复存储。</li></ol><h3 id="java类加载器加载顺序"><a href="#java类加载器加载顺序" class="headerlink" title="java类加载器加载顺序"></a>java类加载器加载顺序</h3><p>BootstrapClassLoader  启动类加载器，加载$JAVA_HOME中jre/lib/rt.jar</p><p>ExtensionClassLoader 标准扩展类加载器 </p><p>AppClassLoader 系统类加载器 加载classPath下面的指定的jar包和class</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习</title>
    <link href="/2019/04/15/%E5%85%B6%E4%BB%96/docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/04/15/%E5%85%B6%E4%BB%96/docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-CE-安装学习"><a href="#docker-CE-安装学习" class="headerlink" title="docker-CE-安装学习"></a>docker-CE-安装学习</h2><p><strong>os requirement</strong>： ubuntu 18.04</p><p>1.卸载旧的版本  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> <span class="hljs-builtin-name">remove</span> docker docker-engine docker.io containerd runc<br></code></pre></td></tr></table></figure><p>2.安装要用到的仓库<br>更新apt 包索引  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>安装包，同时允许apt通过https使用仓库  </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">$ sudo apt-get install <span class="hljs-string">\</span>  <br> apt-transport-https <span class="hljs-string">\</span>  <br> ca-certificates <span class="hljs-string">\</span>  <br> curl <span class="hljs-string">\</span>  <br> gnupg2 <span class="hljs-string">\</span>  <br> software-properties-common<br></code></pre></td></tr></table></figure><p>添加Docker的官方GPG key：  </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>curl -fsSL <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/download.docker.com/linux</span><span class="hljs-regexp">/ubuntu/gpg</span> | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>验证你的key的指纹  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lsl">$ sudo apt-<span class="hljs-type">key</span> fingerprint <span class="hljs-number">0</span>EBFCD88  <br>  <br>pub   <span class="hljs-number">4096</span>R/<span class="hljs-number">0</span>EBFCD88 <span class="hljs-number">2017</span><span class="hljs-number">-02</span><span class="hljs-number">-22</span>  <br> Key fingerprint = <span class="hljs-number">9</span>DC8 <span class="hljs-number">5822</span> <span class="hljs-number">9</span>FC7 DD38 <span class="hljs-number">854</span>A  E2D8 <span class="hljs-number">8</span>D81 <span class="hljs-number">803</span>C <span class="hljs-number">0</span>EBF CD88  <br>uid                  Docker Release (CE deb)   <br>sub   <span class="hljs-number">4096</span>R/F273FCD8 <span class="hljs-number">2017</span><span class="hljs-number">-02</span><span class="hljs-number">-22</span><br></code></pre></td></tr></table></figure><p>设置stable存储库  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ sudo<span class="hljs-built_in"> add-apt-repository </span>\  <br> <span class="hljs-string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \  <br> $(lsb_release -cs) \  <br> stable"</span><br></code></pre></td></tr></table></figure><p>安装docker CE  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> install docker-ce<br></code></pre></td></tr></table></figure><p>如果要安装特定版本的docker可以采用下面的方式：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ apt-cache madison docker-ce  <br>  <br> docker-ce | <span class="hljs-number">5</span>:<span class="hljs-number">18.09</span><span class="hljs-number">.1</span>~<span class="hljs-number">3</span><span class="hljs-number">-0</span>~ubuntu-xenial | https:<span class="hljs-comment">//download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  </span><br> docker-ce | <span class="hljs-number">5</span>:<span class="hljs-number">18.09</span><span class="hljs-number">.0</span>~<span class="hljs-number">3</span><span class="hljs-number">-0</span>~ubuntu-xenial | https:<span class="hljs-comment">//download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  </span><br> docker-ce | <span class="hljs-number">18.06</span><span class="hljs-number">.1</span>~ce~<span class="hljs-number">3</span><span class="hljs-number">-0</span>~ubuntu       | https:<span class="hljs-comment">//download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  </span><br> docker-ce | <span class="hljs-number">18.06</span><span class="hljs-number">.0</span>~ce~<span class="hljs-number">3</span><span class="hljs-number">-0</span>~ubuntu       | https:<span class="hljs-comment">//download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  </span><br> ...<br></code></pre></td></tr></table></figure><p>然后  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> install docker-ce=<br></code></pre></td></tr></table></figure><p>VERSION_STRING 选择上一个命令中第二列中的对应版本即可。<br>到此 docker 安装完毕，可以开始docker的使用了。</p><p>遇到的坑:<br>我在安装的过程中，由于没有设置好ubuntu的apt的源，导致前面安装必要软件是，老是找不到依赖<br>这里简单记一下，ubuntu更新国内镜像源的步骤：<br>首先 将原来的源文件备份：  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ sudo <span class="hljs-keyword">cp</span> /etc/apt/sources<span class="hljs-meta">.list</span> /etc/apt/sources<span class="hljs-meta">.list</span>.bak<br></code></pre></td></tr></table></figure><p>然后修改 sources.list文件，删除原来的内容，我这里采用<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华的ubuntu镜像源</a>,在页面中选择对应的ubuntu版本，然后将内容粘贴到sources.list文件中即可。  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">vim</span> /etc/apt/sources.<span class="hljs-keyword">list</span><br></code></pre></td></tr></table></figure><p>将下面内容粘贴  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 默认注释了源码镜像以提高 apt <span class="hljs-keyword">update</span> 速度，如有需要可自行取消注释  <br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse  <br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic main restricted universe multiverse  <br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse  <br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-updates main restricted universe multiverse  <br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse  <br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-backports main restricted universe multiverse  <br><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse  <br># <span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/ubuntu/ bionic-security main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>我之前就是因为没有注意版本问题，才导致更新一直失败！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-hexo</title>
    <link href="/2019/01/23/%E5%B7%A5%E5%85%B7/hexo/"/>
    <url>/2019/01/23/%E5%B7%A5%E5%85%B7/hexo/</url>
    
    <content type="html"><![CDATA[<p>本文是建立这个博客写下的第一篇博文，记录这个博客建立的过程，今后要多写博客，不管有没有人看，分享一下自己的一些技术上的学习过程，和生活的一些体会等。</p><p>接下来这篇文章主要讲述我搭建博客的过程。</p><h2 id="安装环境准备"><a href="#安装环境准备" class="headerlink" title="安装环境准备"></a>安装环境准备</h2><ul><li>git</li><li>node.js</li><li>github账号和腾讯云域名</li></ul><h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><p>安装<a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">git</a><br>选择对应的系统版本下载即可</p><p>安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a><br>选择对应的系统版本下载即可</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 安装 hexo 命令行工具  </span><br>$ npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">创建一个你要放你的blog文件的文件夹，我这里是blog  </span><br><span class="hljs-meta">#</span><span class="bash">初始化hexo  </span><br><span class="hljs-meta">$</span><span class="bash"> hexo init blog  </span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> blog  </span><br><span class="hljs-meta">$</span><span class="bash"> npm install</span><br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：  </p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.  <br>├── <span class="hljs-variable">_config</span>.yml  <br>├── package.json  <br>├── scaffolds  <br>├── source  <br>|   ├── <span class="hljs-variable">_drafts</span>  <br>|   └── <span class="hljs-variable">_posts</span>  <br>└── themes<br></code></pre></td></tr></table></figure><p>在_config.yml文件中修改对应的配置，我这里修改了titel 网站标题和author 作者两项，其他可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>进行修改。</p><h2 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h2><p>配置完成后，可以运行  </p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$hexo <span class="hljs-keyword">generate</span>  <br>$hexo server<br></code></pre></td></tr></table></figure><p>生成静态文件并启动服务器，默认可以在<br><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看。</p><h2 id="hexo主题设置"><a href="#hexo主题设置" class="headerlink" title="hexo主题设置"></a>hexo主题设置</h2><p>hexo支持主题的自定义，我采用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next主题</a>，是用的比较多的一个主题。</p><p>首先下载主题,我这里采用git clone 的方式进行下载  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/iissnan/hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>然后设置主题，修改根目录下的_config.yml文件  </p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">theme: <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>接下来对主题里的一些选项进行修改，首先修改菜单栏，添加你需要的页面，我这里添加关于页面about  </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span>  <br><span class="hljs-symbol"> home:</span> / || home  <br><span class="hljs-symbol"> about:</span> <span class="hljs-meta-keyword">/about/</span> || user  <br> <span class="hljs-meta">#tags: /tags/ || tags  </span><br> <span class="hljs-meta">#categories: /categories/ || th  </span><br><span class="hljs-symbol"> archives:</span> <span class="hljs-meta-keyword">/archives/</span> || archive  <br> <span class="hljs-meta"># schedule: /schedule/ || calendar  </span><br> <span class="hljs-meta"># sitemap: /sitemap.xml || sitemap  </span><br> <span class="hljs-meta"># commonweal: /404/ || heartbeat</span><br></code></pre></td></tr></table></figure><p>其他的根据需要修改即可。<br>配置访客统计，next集成了busuanzi的访问统计功能，只要在主题的配置文件中打开即可。  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Show PV/UV of the website/page with busuanzi.  </span><br><span class="hljs-comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/  </span><br><span class="hljs-comment"># 增加不蒜子访问数量统计  </span><br><span class="hljs-attr">busuanzi_count:</span>  <br> <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <br> <span class="hljs-comment"># custom uv span for the whole site  </span><br> <span class="hljs-attr">site_uv:</span> <span class="hljs-literal">true</span>  <br> <span class="hljs-attr">site_uv_header:</span>  <span class="hljs-string">访问人数</span>  <br> <span class="hljs-attr">site_uv_footer:</span>  <br> <span class="hljs-comment"># custom pv span for the whole site  </span><br> <span class="hljs-attr">site_pv:</span> <span class="hljs-literal">true</span>  <br> <span class="hljs-attr">site_pv_header:</span>  <span class="hljs-string">访问总量</span>  <br> <span class="hljs-attr">site_pv_footer:</span> <span class="hljs-string">次</span>  <br> <span class="hljs-attr">page_pv:</span> <span class="hljs-literal">true</span>  <br> <span class="hljs-attr">page_pv_header:</span>  <span class="hljs-string">浏览</span>  <br> <span class="hljs-attr">page_pv_footer:</span> <span class="hljs-string">次</span><br></code></pre></td></tr></table></figure><p>将enable 设为true即可</p><p>备注：由于busuanzi(不蒜子)的网址更新,导致了使用Hexo Next主题时统计浏览数失效.<br>解决方法:到hexo的themes文件夹下, 进入\themes\next\layout_third-party\analytics打开: busuanzi-counter.swig</p><p>将src=“<a href="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js”" target="_blank" rel="noopener">https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js”</a></p><p>修改为src=“<a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js”" target="_blank" rel="noopener">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js”</a></p><p>即可。</p><p>接下来博客已经搭建好了我们需要将我们生成的静态文件部署到我们的github上去，就可以通过github访问我们的博客了。</p><h2 id="github设置"><a href="#github设置" class="headerlink" title="github设置"></a>github设置</h2><p>首先注册一个github账号，我本来就有，这里略去。<br>然后新建一个仓库，要注意的是，我们建的项目名一定要是 用户名.github.io 的形式，这样才能生成我们的页面。<br>仓库建立好之后，我们需要将内容同步到我们的github上去。</p><p>首先我们配置全局的git 账号和邮箱  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config –-<span class="hljs-keyword">global</span> <span class="hljs-keyword">user</span>.name “xxxx”  //(“”的账号是刚才Github里面自己注册的账号)   <br>git config –-<span class="hljs-keyword">global</span> <span class="hljs-keyword">user</span>.email “xxxx@qq.com” //(""的邮箱是你自己注册的邮箱)<br></code></pre></td></tr></table></figure><p>然后生成ssh密钥，并设置到github上  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span>   <br>ssh-keygen -t rsa -C “xxxx@qq.com” <span class="hljs-string">//</span>打自己的邮箱<br></code></pre></td></tr></table></figure><p>接下来，复制生成的密钥 id_rsa.pub，到github的设置页面的 SSH and GPG keys 里面<br>新建一个，并把密钥的内容粘贴上去。<br>测试ssh是否成功  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><h2 id="上传hexo"><a href="#上传hexo" class="headerlink" title="上传hexo"></a>上传hexo</h2><p>安装部署到github上的插件依赖  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> –<span class="hljs-keyword">save</span> hexo-deployer-git<br></code></pre></td></tr></table></figure><p>然后修改根目录下的_config.yml文件夹<br>deploy:<br>type: git<br>repo: <a href="mailto:git@github.com">git@github.com</a>:xxxx/xxxxx.github.io.git //(这里改成自己的用户名和用户名加域名,可以在仓库的右上角直接复制)<br>branch: master<br>接下来运行  </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure><p>即可完成部署。</p><h2 id="查看博客-1"><a href="#查看博客-1" class="headerlink" title="查看博客"></a>查看博客</h2><p>过几分钟后，在浏览器输入 用户名.github.io 即可看到自己的博客。</p><p>博客搭建成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>建站历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
